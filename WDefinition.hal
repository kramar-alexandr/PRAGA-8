external inner function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable();
external inner function Boolean IsCloudControllerClient();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner procedure JobRClass_ENG();
external inner function string 60 UserDefined(string,string);
external outer function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
remote function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();
// in-apps
external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions ENG
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabelENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_ENG();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ENG(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DisplayRecordDetailsRA_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

// Language functions ARB
external inner function Boolean DisplayLoginKeyPad_ARB();
external inner function string 255 VATZoneEditFieldLabelARB(Integer);
external inner function real VATZoneButtonsLabelsARB(real,real,real,real);
external inner procedure LoginButtons2_ARB(Real,Real);
external inner procedure FORMDEF_ARB();
external inner function string 255 DemoMsgWClassTitle_ARB(Boolean,Boolean);
external inner procedure TBEClassDef_ARB();
external inner function string 255 VATZoneNameARB();
external inner procedure TSERW_ARB();
external inner procedure TSERWNT_ARB();
external inner procedure TSERWTouch_ARB();
external inner procedure TSERWTEST_ARB();
external inner procedure INVFORM_ARB(Boolean);
external inner procedure DisplayRecordDetails_ARB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ARB(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ARB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ARB();
external inner function string 255 ResMonWClassWindowTitle_ARB();
external inner function string 255 RTMonWClassWindowTitle_ARB();
external inner procedure SetupNightAuditWindowControls_ARB(Boolean);
external inner procedure CURClassDefinitionARB();
external inner function real DrawPaymentModesButtons_IV_ARB(real);
external inner function real FunctionButtons_ARB(string);
external inner procedure CreditCardWindowHeader_ARB(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ARB(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ARB(Real);
external inner procedure CreditCardWindowDeliveryDetail_ARB(Real);
external inner function real DrawPaymentModesButtons_ARB();
external inner procedure DrawBarMenuTiles_ARB(string);
external inner procedure DrawRestPMOtherPay_ARB();
external inner procedure DisplayRecordDetailsRA_ARB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ARB(var integer,var integer);
external inner procedure OKCancel_ARB();
external inner procedure DefineElearningURLCacheLClass_ARB();
external inner procedure DefineElearningURLCacheDClass_ARB();
external inner function real TravelLogDeductions_ARB(real,real);
external inner procedure LoginButtons_ARB(Real);
external inner procedure FORMDEF2_ARB();
external inner procedure FORMDEF3_ARB();
external inner procedure ARS2RClass_ARB();
external inner procedure ALLVATRClass_ARB();

// Language functions AUS
external inner function Boolean DisplayLoginKeyPad_AUS();
external inner function string 255 VATZoneEditFieldLabelAUS(Integer);
external inner function real VATZoneButtonsLabelsAUS(real,real,real,real);
external inner procedure LoginButtons2_AUS(Real,Real);
external inner procedure FORMDEF_AUS();
external inner function string 255 DemoMsgWClassTitle_AUS(Boolean,Boolean);
external inner procedure TBEClassDef_AUS();
external inner function string 255 VATZoneNameAUS();
external inner procedure TSERW_AUS();
external inner procedure TSERWNT_AUS();
external inner procedure TSERWTouch_AUS();
external inner procedure TSERWTEST_AUS();
external inner procedure INVFORM_AUS(Boolean);
external inner procedure DisplayRecordDetails_AUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_AUS(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_AUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_AUS();
external inner function string 255 ResMonWClassWindowTitle_AUS();
external inner function string 255 RTMonWClassWindowTitle_AUS();
external inner procedure SetupNightAuditWindowControls_AUS(Boolean);
external inner procedure CURClassDefinitionAUS();
external inner function real DrawPaymentModesButtons_IV_AUS(real);
external inner function real FunctionButtons_AUS(string);
external inner procedure CreditCardWindowHeader_AUS(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_AUS(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_AUS(Real);
external inner procedure CreditCardWindowDeliveryDetail_AUS(Real);
external inner function real DrawPaymentModesButtons_AUS();
external inner procedure DrawBarMenuTiles_AUS(string);
external inner procedure DrawRestPMOtherPay_AUS();
external inner procedure DisplayRecordDetailsRA_AUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_AUS(var integer,var integer);
external inner procedure OKCancel_AUS();
external inner procedure DefineElearningURLCacheLClass_AUS();
external inner procedure DefineElearningURLCacheDClass_AUS();
external inner function real TravelLogDeductions_AUS(real,real);
external inner procedure LoginButtons_AUS(Real);
external inner procedure FORMDEF2_AUS();
external inner procedure FORMDEF3_AUS();
external inner procedure ARS2RClass_AUS();
external inner procedure ALLVATRClass_AUS();

// Language functions BRA
external inner function Boolean DisplayLoginKeyPad_BRA();
external inner function string 255 VATZoneEditFieldLabelBRA(Integer);
external inner function real VATZoneButtonsLabelsBRA(real,real,real,real);
external inner procedure LoginButtons2_BRA(Real,Real);
external inner procedure FORMDEF_BRA();
external inner function string 255 DemoMsgWClassTitle_BRA(Boolean,Boolean);
external inner procedure TBEClassDef_BRA();
external inner function string 255 VATZoneNameBRA();
external inner procedure TSERW_BRA();
external inner procedure TSERWNT_BRA();
external inner procedure TSERWTouch_BRA();
external inner procedure TSERWTEST_BRA();
external inner procedure INVFORM_BRA(Boolean);
external inner procedure DisplayRecordDetails_BRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_BRA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_BRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_BRA();
external inner function string 255 ResMonWClassWindowTitle_BRA();
external inner function string 255 RTMonWClassWindowTitle_BRA();
external inner procedure SetupNightAuditWindowControls_BRA(Boolean);
external inner procedure CURClassDefinitionBRA();
external inner function real DrawPaymentModesButtons_IV_BRA(real);
external inner function real FunctionButtons_BRA(string);
external inner procedure CreditCardWindowHeader_BRA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_BRA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_BRA(Real);
external inner procedure CreditCardWindowDeliveryDetail_BRA(Real);
external inner function real DrawPaymentModesButtons_BRA();
external inner procedure DrawBarMenuTiles_BRA(string);
external inner procedure DrawRestPMOtherPay_BRA();
external inner procedure DisplayRecordDetailsRA_BRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_BRA(var integer,var integer);
external inner procedure OKCancel_BRA();
external inner procedure DefineElearningURLCacheLClass_BRA();
external inner procedure DefineElearningURLCacheDClass_BRA();
external inner function real TravelLogDeductions_BRA(real,real);
external inner procedure LoginButtons_BRA(Real);
external inner procedure FORMDEF2_BRA();
external inner procedure FORMDEF3_BRA();
external inner procedure ARS2RClass_BRA();
external inner procedure ALLVATRClass_BRA();

// Language functions CAN
external inner function Boolean DisplayLoginKeyPad_CAN();
external inner function string 255 VATZoneEditFieldLabelCAN(Integer);
external inner function real VATZoneButtonsLabelsCAN(real,real,real,real);
external inner procedure LoginButtons2_CAN(Real,Real);
external inner procedure FORMDEF_CAN();
external inner function string 255 DemoMsgWClassTitle_CAN(Boolean,Boolean);
external inner procedure TBEClassDef_CAN();
external inner function string 255 VATZoneNameCAN();
external inner procedure TSERW_CAN();
external inner procedure TSERWNT_CAN();
external inner procedure TSERWTouch_CAN();
external inner procedure TSERWTEST_CAN();
external inner procedure INVFORM_CAN(Boolean);
external inner procedure DisplayRecordDetails_CAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CAN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CAN();
external inner function string 255 ResMonWClassWindowTitle_CAN();
external inner function string 255 RTMonWClassWindowTitle_CAN();
external inner procedure SetupNightAuditWindowControls_CAN(Boolean);
external inner procedure CURClassDefinitionCAN();
external inner function real DrawPaymentModesButtons_IV_CAN(real);
external inner function real FunctionButtons_CAN(string);
external inner procedure CreditCardWindowHeader_CAN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CAN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CAN(Real);
external inner procedure CreditCardWindowDeliveryDetail_CAN(Real);
external inner function real DrawPaymentModesButtons_CAN();
external inner procedure DrawBarMenuTiles_CAN(string);
external inner procedure DrawRestPMOtherPay_CAN();
external inner procedure DisplayRecordDetailsRA_CAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CAN(var integer,var integer);
external inner procedure OKCancel_CAN();
external inner procedure DefineElearningURLCacheLClass_CAN();
external inner procedure DefineElearningURLCacheDClass_CAN();
external inner function real TravelLogDeductions_CAN(real,real);
external inner procedure LoginButtons_CAN(Real);
external inner procedure FORMDEF2_CAN();
external inner procedure FORMDEF3_CAN();
external inner procedure ARS2RClass_CAN();
external inner procedure ALLVATRClass_CAN();

// Language functions CRO
external inner function Boolean DisplayLoginKeyPad_CRO();
external inner function string 255 VATZoneEditFieldLabelCRO(Integer);
external inner function real VATZoneButtonsLabelsCRO(real,real,real,real);
external inner procedure LoginButtons2_CRO(Real,Real);
external inner procedure FORMDEF_CRO();
external inner function string 255 DemoMsgWClassTitle_CRO(Boolean,Boolean);
external inner procedure TBEClassDef_CRO();
external inner function string 255 VATZoneNameCRO();
external inner procedure TSERW_CRO();
external inner procedure TSERWNT_CRO();
external inner procedure TSERWTouch_CRO();
external inner procedure TSERWTEST_CRO();
external inner procedure INVFORM_CRO(Boolean);
external inner procedure DisplayRecordDetails_CRO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CRO(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CRO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CRO();
external inner function string 255 ResMonWClassWindowTitle_CRO();
external inner function string 255 RTMonWClassWindowTitle_CRO();
external inner procedure SetupNightAuditWindowControls_CRO(Boolean);
external inner procedure CURClassDefinitionCRO();
external inner function real DrawPaymentModesButtons_IV_CRO(real);
external inner function real FunctionButtons_CRO(string);
external inner procedure CreditCardWindowHeader_CRO(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CRO(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CRO(Real);
external inner procedure CreditCardWindowDeliveryDetail_CRO(Real);
external inner function real DrawPaymentModesButtons_CRO();
external inner procedure DrawBarMenuTiles_CRO(string);
external inner procedure DrawRestPMOtherPay_CRO();
external inner procedure DisplayRecordDetailsRA_CRO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CRO(var integer,var integer);
external inner procedure OKCancel_CRO();
external inner procedure DefineElearningURLCacheLClass_CRO();
external inner procedure DefineElearningURLCacheDClass_CRO();
external inner function real TravelLogDeductions_CRO(real,real);
external inner procedure LoginButtons_CRO(Real);
external inner procedure FORMDEF2_CRO();
external inner procedure FORMDEF3_CRO();
external inner procedure ARS2RClass_CRO();
external inner procedure ALLVATRClass_CRO();

// Language functions CHI
external inner function Boolean DisplayLoginKeyPad_CHI();
external inner function string 255 VATZoneEditFieldLabelCHI(Integer);
external inner function real VATZoneButtonsLabelsCHI(real,real,real,real);
external inner procedure LoginButtons2_CHI(Real,Real);
external inner procedure FORMDEF_CHI();
external inner function string 255 DemoMsgWClassTitle_CHI(Boolean,Boolean);
external inner procedure TBEClassDef_CHI();
external inner function string 255 VATZoneNameCHI();
external inner procedure TSERW_CHI();
external inner procedure TSERWNT_CHI();
external inner procedure TSERWTouch_CHI();
external inner procedure TSERWTEST_CHI();
external inner procedure INVFORM_CHI(Boolean);
external inner procedure DisplayRecordDetails_CHI(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CHI(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CHI(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CHI();
external inner function string 255 ResMonWClassWindowTitle_CHI();
external inner function string 255 RTMonWClassWindowTitle_CHI();
external inner procedure SetupNightAuditWindowControls_CHI(Boolean);
external inner procedure CURClassDefinitionCHI();
external inner function real DrawPaymentModesButtons_IV_CHI(real);
external inner function real FunctionButtons_CHI(string);
external inner procedure CreditCardWindowHeader_CHI(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CHI(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CHI(Real);
external inner procedure CreditCardWindowDeliveryDetail_CHI(Real);
external inner function real DrawPaymentModesButtons_CHI();
external inner procedure DrawBarMenuTiles_CHI(string);
external inner procedure DrawRestPMOtherPay_CHI();
external inner procedure DisplayRecordDetailsRA_CHI(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CHI(var integer,var integer);
external inner procedure OKCancel_CHI();
external inner procedure DefineElearningURLCacheLClass_CHI();
external inner procedure DefineElearningURLCacheDClass_CHI();
external inner function real TravelLogDeductions_CHI(real,real);
external inner procedure LoginButtons_CHI(Real);
external inner procedure FORMDEF2_CHI();
external inner procedure FORMDEF3_CHI();
external inner procedure ARS2RClass_CHI();
external inner procedure ALLVATRClass_CHI();

// Language functions CZE
external inner function Boolean DisplayLoginKeyPad_CZE();
external inner function string 255 VATZoneEditFieldLabelCZE(Integer);
external inner function real VATZoneButtonsLabelsCZE(real,real,real,real);
external inner procedure LoginButtons2_CZE(Real,Real);
external inner procedure FORMDEF_CZE();
external inner function string 255 DemoMsgWClassTitle_CZE(Boolean,Boolean);
external inner procedure TBEClassDef_CZE();
external inner function string 255 VATZoneNameCZE();
external inner procedure TSERW_CZE();
external inner procedure TSERWNT_CZE();
external inner procedure TSERWTouch_CZE();
external inner procedure TSERWTEST_CZE();
external inner procedure INVFORM_CZE(Boolean);
external inner procedure DisplayRecordDetails_CZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CZE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CZE();
external inner function string 255 ResMonWClassWindowTitle_CZE();
external inner function string 255 RTMonWClassWindowTitle_CZE();
external inner procedure SetupNightAuditWindowControls_CZE(Boolean);
external inner procedure CURClassDefinitionCZE();
external inner function real DrawPaymentModesButtons_IV_CZE(real);
external inner function real FunctionButtons_CZE(string);
external inner procedure CreditCardWindowHeader_CZE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CZE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CZE(Real);
external inner procedure CreditCardWindowDeliveryDetail_CZE(Real);
external inner function real DrawPaymentModesButtons_CZE();
external inner procedure DrawBarMenuTiles_CZE(string);
external inner procedure DrawRestPMOtherPay_CZE();
external inner procedure DisplayRecordDetailsRA_CZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CZE(var integer,var integer);
external inner procedure OKCancel_CZE();
external inner procedure DefineElearningURLCacheLClass_CZE();
external inner procedure DefineElearningURLCacheDClass_CZE();
external inner function real TravelLogDeductions_CZE(real,real);
external inner procedure LoginButtons_CZE(Real);
external inner procedure FORMDEF2_CZE();
external inner procedure FORMDEF3_CZE();
external inner procedure ARS2RClass_CZE();
external inner procedure ALLVATRClass_CZE();

// Language functions DAN
external inner function Boolean DisplayLoginKeyPad_DAN();
external inner function string 255 VATZoneEditFieldLabelDAN(Integer);
external inner function real VATZoneButtonsLabelsDAN(real,real,real,real);
external inner procedure LoginButtons2_DAN(Real,Real);
external inner procedure FORMDEF_DAN();
external inner function string 255 DemoMsgWClassTitle_DAN(Boolean,Boolean);
external inner procedure TBEClassDef_DAN();
external inner function string 255 VATZoneNameDAN();
external inner procedure TSERW_DAN();
external inner procedure TSERWNT_DAN();
external inner procedure TSERWTouch_DAN();
external inner procedure TSERWTEST_DAN();
external inner procedure INVFORM_DAN(Boolean);
external inner procedure DisplayRecordDetails_DAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_DAN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_DAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_DAN();
external inner function string 255 ResMonWClassWindowTitle_DAN();
external inner function string 255 RTMonWClassWindowTitle_DAN();
external inner procedure SetupNightAuditWindowControls_DAN(Boolean);
external inner procedure CURClassDefinitionDAN();
external inner function real DrawPaymentModesButtons_IV_DAN(real);
external inner function real FunctionButtons_DAN(string);
external inner procedure CreditCardWindowHeader_DAN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_DAN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_DAN(Real);
external inner procedure CreditCardWindowDeliveryDetail_DAN(Real);
external inner function real DrawPaymentModesButtons_DAN();
external inner procedure DrawBarMenuTiles_DAN(string);
external inner procedure DrawRestPMOtherPay_DAN();
external inner procedure DisplayRecordDetailsRA_DAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_DAN(var integer,var integer);
external inner procedure OKCancel_DAN();
external inner procedure DefineElearningURLCacheLClass_DAN();
external inner procedure DefineElearningURLCacheDClass_DAN();
external inner function real TravelLogDeductions_DAN(real,real);
external inner procedure LoginButtons_DAN(Real);
external inner procedure FORMDEF2_DAN();
external inner procedure FORMDEF3_DAN();
external inner procedure ARS2RClass_DAN();
external inner procedure ALLVATRClass_DAN();

// Language functions ESP
external inner function Boolean DisplayLoginKeyPad_ESP();
external inner function string 255 VATZoneEditFieldLabelESP(Integer);
external inner function real VATZoneButtonsLabelsESP(real,real,real,real);
external inner procedure LoginButtons2_ESP(Real,Real);
external inner procedure FORMDEF_ESP();
external inner function string 255 DemoMsgWClassTitle_ESP(Boolean,Boolean);
external inner procedure TBEClassDef_ESP();
external inner function string 255 VATZoneNameESP();
external inner procedure TSERW_ESP();
external inner procedure TSERWNT_ESP();
external inner procedure TSERWTouch_ESP();
external inner procedure TSERWTEST_ESP();
external inner procedure INVFORM_ESP(Boolean);
external inner procedure DisplayRecordDetails_ESP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ESP(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ESP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ESP();
external inner function string 255 ResMonWClassWindowTitle_ESP();
external inner function string 255 RTMonWClassWindowTitle_ESP();
external inner procedure SetupNightAuditWindowControls_ESP(Boolean);
external inner procedure CURClassDefinitionESP();
external inner function real DrawPaymentModesButtons_IV_ESP(real);
external inner function real FunctionButtons_ESP(string);
external inner procedure CreditCardWindowHeader_ESP(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ESP(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ESP(Real);
external inner procedure CreditCardWindowDeliveryDetail_ESP(Real);
external inner function real DrawPaymentModesButtons_ESP();
external inner procedure DrawBarMenuTiles_ESP(string);
external inner procedure DrawRestPMOtherPay_ESP();
external inner procedure DisplayRecordDetailsRA_ESP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ESP(var integer,var integer);
external inner procedure OKCancel_ESP();
external inner procedure DefineElearningURLCacheLClass_ESP();
external inner procedure DefineElearningURLCacheDClass_ESP();
external inner function real TravelLogDeductions_ESP(real,real);
external inner procedure LoginButtons_ESP(Real);
external inner procedure FORMDEF2_ESP();
external inner procedure FORMDEF3_ESP();
external inner procedure ARS2RClass_ESP();
external inner procedure ALLVATRClass_ESP();

// Language functions EST
external inner function Boolean DisplayLoginKeyPad_EST();
external inner function string 255 VATZoneEditFieldLabelEST(Integer);
external inner function real VATZoneButtonsLabelsEST(real,real,real,real);
external inner procedure LoginButtons2_EST(Real,Real);
external inner procedure FORMDEF_EST();
external inner function string 255 DemoMsgWClassTitle_EST(Boolean,Boolean);
external inner procedure TBEClassDef_EST();
external inner function string 255 VATZoneNameEST();
external inner procedure TSERW_EST();
external inner procedure TSERWNT_EST();
external inner procedure TSERWTouch_EST();
external inner procedure TSERWTEST_EST();
external inner procedure INVFORM_EST(Boolean);
external inner procedure DisplayRecordDetails_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_EST(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_EST();
external inner function string 255 ResMonWClassWindowTitle_EST();
external inner function string 255 RTMonWClassWindowTitle_EST();
external inner procedure SetupNightAuditWindowControls_EST(Boolean);
external inner procedure CURClassDefinitionEST();
external inner function real DrawPaymentModesButtons_IV_EST(real);
external inner function real FunctionButtons_EST(string);
external inner procedure CreditCardWindowHeader_EST(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_EST(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_EST(Real);
external inner procedure CreditCardWindowDeliveryDetail_EST(Real);
external inner function real DrawPaymentModesButtons_EST();
external inner procedure DrawBarMenuTiles_EST(string);
external inner procedure DrawRestPMOtherPay_EST();
external inner procedure DisplayRecordDetailsRA_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_EST(var integer,var integer);
external inner procedure OKCancel_EST();
external inner procedure DefineElearningURLCacheLClass_EST();
external inner procedure DefineElearningURLCacheDClass_EST();
external inner function real TravelLogDeductions_EST(real,real);
external inner procedure LoginButtons_EST(Real);
external inner procedure FORMDEF2_EST();
external inner procedure FORMDEF3_EST();
external inner procedure ARS2RClass_EST();
external inner procedure ALLVATRClass_EST();

// Language functions FIN
external inner function Boolean DisplayLoginKeyPad_FIN();
external inner function string 255 VATZoneEditFieldLabelFIN(Integer);
external inner function real VATZoneButtonsLabelsFIN(real,real,real,real);
external inner procedure LoginButtons2_FIN(Real,Real);
external inner procedure FORMDEF_FIN();
external inner function string 255 DemoMsgWClassTitle_FIN(Boolean,Boolean);
external inner procedure TBEClassDef_FIN();
external inner function string 255 VATZoneNameFIN();
external inner procedure TSERW_FIN();
external inner procedure TSERWNT_FIN();
external inner procedure TSERWTouch_FIN();
external inner procedure TSERWTEST_FIN();
external inner procedure INVFORM_FIN(Boolean);
external inner procedure DisplayRecordDetails_FIN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FIN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FIN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FIN();
external inner function string 255 ResMonWClassWindowTitle_FIN();
external inner function string 255 RTMonWClassWindowTitle_FIN();
external inner procedure SetupNightAuditWindowControls_FIN(Boolean);
external inner procedure CURClassDefinitionFIN();
external inner function real DrawPaymentModesButtons_IV_FIN(real);
external inner function real FunctionButtons_FIN(string);
external inner procedure CreditCardWindowHeader_FIN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FIN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FIN(Real);
external inner procedure CreditCardWindowDeliveryDetail_FIN(Real);
external inner function real DrawPaymentModesButtons_FIN();
external inner procedure DrawBarMenuTiles_FIN(string);
external inner procedure DrawRestPMOtherPay_FIN();
external inner procedure DisplayRecordDetailsRA_FIN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FIN(var integer,var integer);
external inner procedure OKCancel_FIN();
external inner procedure DefineElearningURLCacheLClass_FIN();
external inner procedure DefineElearningURLCacheDClass_FIN();
external inner function real TravelLogDeductions_FIN(real,real);
external inner procedure LoginButtons_FIN(Real);
external inner procedure FORMDEF2_FIN();
external inner procedure FORMDEF3_FIN();
external inner procedure ARS2RClass_FIN();
external inner procedure ALLVATRClass_FIN();

// Language functions FRA
external inner function Boolean DisplayLoginKeyPad_FRA();
external inner function string 255 VATZoneEditFieldLabelFRA(Integer);
external inner function real VATZoneButtonsLabelsFRA(real,real,real,real);
external inner procedure LoginButtons2_FRA(Real,Real);
external inner procedure FORMDEF_FRA();
external inner function string 255 DemoMsgWClassTitle_FRA(Boolean,Boolean);
external inner procedure TBEClassDef_FRA();
external inner function string 255 VATZoneNameFRA();
external inner procedure TSERW_FRA();
external inner procedure TSERWNT_FRA();
external inner procedure TSERWTouch_FRA();
external inner procedure TSERWTEST_FRA();
external inner procedure INVFORM_FRA(Boolean);
external inner procedure DisplayRecordDetails_FRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FRA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FRA();
external inner function string 255 ResMonWClassWindowTitle_FRA();
external inner function string 255 RTMonWClassWindowTitle_FRA();
external inner procedure SetupNightAuditWindowControls_FRA(Boolean);
external inner procedure CURClassDefinitionFRA();
external inner function real DrawPaymentModesButtons_IV_FRA(real);
external inner function real FunctionButtons_FRA(string);
external inner procedure CreditCardWindowHeader_FRA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FRA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FRA(Real);
external inner procedure CreditCardWindowDeliveryDetail_FRA(Real);
external inner function real DrawPaymentModesButtons_FRA();
external inner procedure DrawBarMenuTiles_FRA(string);
external inner procedure DrawRestPMOtherPay_FRA();
external inner procedure DisplayRecordDetailsRA_FRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FRA(var integer,var integer);
external inner procedure OKCancel_FRA();
external inner procedure DefineElearningURLCacheLClass_FRA();
external inner procedure DefineElearningURLCacheDClass_FRA();
external inner function real TravelLogDeductions_FRA(real,real);
external inner procedure LoginButtons_FRA(Real);
external inner procedure FORMDEF2_FRA();
external inner procedure FORMDEF3_FRA();
external inner procedure ARS2RClass_FRA();
external inner procedure ALLVATRClass_FRA();

// Language functions FRC
external inner function Boolean DisplayLoginKeyPad_FRC();
external inner function string 255 VATZoneEditFieldLabelFRC(Integer);
external inner function real VATZoneButtonsLabelsFRC(real,real,real,real);
external inner procedure LoginButtons2_FRC(Real,Real);
external inner procedure FORMDEF_FRC();
external inner function string 255 DemoMsgWClassTitle_FRC(Boolean,Boolean);
external inner procedure TBEClassDef_FRC();
external inner function string 255 VATZoneNameFRC();
external inner procedure TSERW_FRC();
external inner procedure TSERWNT_FRC();
external inner procedure TSERWTouch_FRC();
external inner procedure TSERWTEST_FRC();
external inner procedure INVFORM_FRC(Boolean);
external inner procedure DisplayRecordDetails_FRC(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FRC(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FRC(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FRC();
external inner function string 255 ResMonWClassWindowTitle_FRC();
external inner function string 255 RTMonWClassWindowTitle_FRC();
external inner procedure SetupNightAuditWindowControls_FRC(Boolean);
external inner procedure CURClassDefinitionFRC();
external inner function real DrawPaymentModesButtons_IV_FRC(real);
external inner function real FunctionButtons_FRC(string);
external inner procedure CreditCardWindowHeader_FRC(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FRC(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FRC(Real);
external inner procedure CreditCardWindowDeliveryDetail_FRC(Real);
external inner function real DrawPaymentModesButtons_FRC();
external inner procedure DrawBarMenuTiles_FRC(string);
external inner procedure DrawRestPMOtherPay_FRC();
external inner procedure DisplayRecordDetailsRA_FRC(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FRC(var integer,var integer);
external inner procedure OKCancel_FRC();
external inner procedure DefineElearningURLCacheLClass_FRC();
external inner procedure DefineElearningURLCacheDClass_FRC();
external inner function real TravelLogDeductions_FRC(real,real);
external inner procedure LoginButtons_FRC(Real);
external inner procedure FORMDEF2_FRC();
external inner procedure FORMDEF3_FRC();
external inner procedure ARS2RClass_FRC();
external inner procedure ALLVATRClass_FRC();

// Language functions FAR
external inner function Boolean DisplayLoginKeyPad_FAR();
external inner function string 255 VATZoneEditFieldLabelFAR(Integer);
external inner function real VATZoneButtonsLabelsFAR(real,real,real,real);
external inner procedure LoginButtons2_FAR(Real,Real);
external inner procedure FORMDEF_FAR();
external inner function string 255 DemoMsgWClassTitle_FAR(Boolean,Boolean);
external inner procedure TBEClassDef_FAR();
external inner function string 255 VATZoneNameFAR();
external inner procedure TSERW_FAR();
external inner procedure TSERWNT_FAR();
external inner procedure TSERWTouch_FAR();
external inner procedure TSERWTEST_FAR();
external inner procedure INVFORM_FAR(Boolean);
external inner procedure DisplayRecordDetails_FAR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FAR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FAR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FAR();
external inner function string 255 ResMonWClassWindowTitle_FAR();
external inner function string 255 RTMonWClassWindowTitle_FAR();
external inner procedure SetupNightAuditWindowControls_FAR(Boolean);
external inner procedure CURClassDefinitionFAR();
external inner function real DrawPaymentModesButtons_IV_FAR(real);
external inner function real FunctionButtons_FAR(string);
external inner procedure CreditCardWindowHeader_FAR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FAR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FAR(Real);
external inner procedure CreditCardWindowDeliveryDetail_FAR(Real);
external inner function real DrawPaymentModesButtons_FAR();
external inner procedure DrawBarMenuTiles_FAR(string);
external inner procedure DrawRestPMOtherPay_FAR();
external inner procedure DisplayRecordDetailsRA_FAR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FAR(var integer,var integer);
external inner procedure OKCancel_FAR();
external inner procedure DefineElearningURLCacheLClass_FAR();
external inner procedure DefineElearningURLCacheDClass_FAR();
external inner function real TravelLogDeductions_FAR(real,real);
external inner procedure LoginButtons_FAR(Real);
external inner procedure FORMDEF2_FAR();
external inner procedure FORMDEF3_FAR();
external inner procedure ARS2RClass_FAR();
external inner procedure ALLVATRClass_FAR();

// Language functions GER
external inner function Boolean DisplayLoginKeyPad_GER();
external inner function string 255 VATZoneEditFieldLabelGER(Integer);
external inner function real VATZoneButtonsLabelsGER(real,real,real,real);
external inner procedure LoginButtons2_GER(Real,Real);
external inner procedure FORMDEF_GER();
external inner function string 255 DemoMsgWClassTitle_GER(Boolean,Boolean);
external inner procedure TBEClassDef_GER();
external inner function string 255 VATZoneNameGER();
external inner procedure TSERW_GER();
external inner procedure TSERWNT_GER();
external inner procedure TSERWTouch_GER();
external inner procedure TSERWTEST_GER();
external inner procedure INVFORM_GER(Boolean);
external inner procedure DisplayRecordDetails_GER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_GER(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_GER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_GER();
external inner function string 255 ResMonWClassWindowTitle_GER();
external inner function string 255 RTMonWClassWindowTitle_GER();
external inner procedure SetupNightAuditWindowControls_GER(Boolean);
external inner procedure CURClassDefinitionGER();
external inner function real DrawPaymentModesButtons_IV_GER(real);
external inner function real FunctionButtons_GER(string);
external inner procedure CreditCardWindowHeader_GER(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_GER(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_GER(Real);
external inner procedure CreditCardWindowDeliveryDetail_GER(Real);
external inner function real DrawPaymentModesButtons_GER();
external inner procedure DrawBarMenuTiles_GER(string);
external inner procedure DrawRestPMOtherPay_GER();
external inner procedure DisplayRecordDetailsRA_GER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_GER(var integer,var integer);
external inner procedure OKCancel_GER();
external inner procedure DefineElearningURLCacheLClass_GER();
external inner procedure DefineElearningURLCacheDClass_GER();
external inner function real TravelLogDeductions_GER(real,real);
external inner procedure LoginButtons_GER(Real);
external inner procedure FORMDEF2_GER();
external inner procedure FORMDEF3_GER();
external inner procedure ARS2RClass_GER();
external inner procedure ALLVATRClass_GER();

// Language functions HEB
external inner function Boolean DisplayLoginKeyPad_HEB();
external inner function string 255 VATZoneEditFieldLabelHEB(Integer);
external inner function real VATZoneButtonsLabelsHEB(real,real,real,real);
external inner procedure LoginButtons2_HEB(Real,Real);
external inner procedure FORMDEF_HEB();
external inner function string 255 DemoMsgWClassTitle_HEB(Boolean,Boolean);
external inner procedure TBEClassDef_HEB();
external inner function string 255 VATZoneNameHEB();
external inner procedure TSERW_HEB();
external inner procedure TSERWNT_HEB();
external inner procedure TSERWTouch_HEB();
external inner procedure TSERWTEST_HEB();
external inner procedure INVFORM_HEB(Boolean);
external inner procedure DisplayRecordDetails_HEB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_HEB(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_HEB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_HEB();
external inner function string 255 ResMonWClassWindowTitle_HEB();
external inner function string 255 RTMonWClassWindowTitle_HEB();
external inner procedure SetupNightAuditWindowControls_HEB(Boolean);
external inner procedure CURClassDefinitionHEB();
external inner function real DrawPaymentModesButtons_IV_HEB(real);
external inner function real FunctionButtons_HEB(string);
external inner procedure CreditCardWindowHeader_HEB(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_HEB(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_HEB(Real);
external inner procedure CreditCardWindowDeliveryDetail_HEB(Real);
external inner function real DrawPaymentModesButtons_HEB();
external inner procedure DrawBarMenuTiles_HEB(string);
external inner procedure DrawRestPMOtherPay_HEB();
external inner procedure DisplayRecordDetailsRA_HEB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_HEB(var integer,var integer);
external inner procedure OKCancel_HEB();
external inner procedure DefineElearningURLCacheLClass_HEB();
external inner procedure DefineElearningURLCacheDClass_HEB();
external inner function real TravelLogDeductions_HEB(real,real);
external inner procedure LoginButtons_HEB(Real);
external inner procedure FORMDEF2_HEB();
external inner procedure FORMDEF3_HEB();
external inner procedure ARS2RClass_HEB();
external inner procedure ALLVATRClass_HEB();

// Language functions HUN
external inner function Boolean DisplayLoginKeyPad_HUN();
external inner function string 255 VATZoneEditFieldLabelHUN(Integer);
external inner function real VATZoneButtonsLabelsHUN(real,real,real,real);
external inner procedure LoginButtons2_HUN(Real,Real);
external inner procedure FORMDEF_HUN();
external inner function string 255 DemoMsgWClassTitle_HUN(Boolean,Boolean);
external inner procedure TBEClassDef_HUN();
external inner function string 255 VATZoneNameHUN();
external inner procedure TSERW_HUN();
external inner procedure TSERWNT_HUN();
external inner procedure TSERWTouch_HUN();
external inner procedure TSERWTEST_HUN();
external inner procedure INVFORM_HUN(Boolean);
external inner procedure DisplayRecordDetails_HUN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_HUN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_HUN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_HUN();
external inner function string 255 ResMonWClassWindowTitle_HUN();
external inner function string 255 RTMonWClassWindowTitle_HUN();
external inner procedure SetupNightAuditWindowControls_HUN(Boolean);
external inner procedure CURClassDefinitionHUN();
external inner function real DrawPaymentModesButtons_IV_HUN(real);
external inner function real FunctionButtons_HUN(string);
external inner procedure CreditCardWindowHeader_HUN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_HUN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_HUN(Real);
external inner procedure CreditCardWindowDeliveryDetail_HUN(Real);
external inner function real DrawPaymentModesButtons_HUN();
external inner procedure DrawBarMenuTiles_HUN(string);
external inner procedure DrawRestPMOtherPay_HUN();
external inner procedure DisplayRecordDetailsRA_HUN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_HUN(var integer,var integer);
external inner procedure OKCancel_HUN();
external inner procedure DefineElearningURLCacheLClass_HUN();
external inner procedure DefineElearningURLCacheDClass_HUN();
external inner function real TravelLogDeductions_HUN(real,real);
external inner procedure LoginButtons_HUN(Real);
external inner procedure FORMDEF2_HUN();
external inner procedure FORMDEF3_HUN();
external inner procedure ARS2RClass_HUN();
external inner procedure ALLVATRClass_HUN();

// Language functions ICE
external inner function Boolean DisplayLoginKeyPad_ICE();
external inner function string 255 VATZoneEditFieldLabelICE(Integer);
external inner function real VATZoneButtonsLabelsICE(real,real,real,real);
external inner procedure LoginButtons2_ICE(Real,Real);
external inner procedure FORMDEF_ICE();
external inner function string 255 DemoMsgWClassTitle_ICE(Boolean,Boolean);
external inner procedure TBEClassDef_ICE();
external inner function string 255 VATZoneNameICE();
external inner procedure TSERW_ICE();
external inner procedure TSERWNT_ICE();
external inner procedure TSERWTouch_ICE();
external inner procedure TSERWTEST_ICE();
external inner procedure INVFORM_ICE(Boolean);
external inner procedure DisplayRecordDetails_ICE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ICE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ICE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ICE();
external inner function string 255 ResMonWClassWindowTitle_ICE();
external inner function string 255 RTMonWClassWindowTitle_ICE();
external inner procedure SetupNightAuditWindowControls_ICE(Boolean);
external inner procedure CURClassDefinitionICE();
external inner function real DrawPaymentModesButtons_IV_ICE(real);
external inner function real FunctionButtons_ICE(string);
external inner procedure CreditCardWindowHeader_ICE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ICE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ICE(Real);
external inner procedure CreditCardWindowDeliveryDetail_ICE(Real);
external inner function real DrawPaymentModesButtons_ICE();
external inner procedure DrawBarMenuTiles_ICE(string);
external inner procedure DrawRestPMOtherPay_ICE();
external inner procedure DisplayRecordDetailsRA_ICE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ICE(var integer,var integer);
external inner procedure OKCancel_ICE();
external inner procedure DefineElearningURLCacheLClass_ICE();
external inner procedure DefineElearningURLCacheDClass_ICE();
external inner function real TravelLogDeductions_ICE(real,real);
external inner procedure LoginButtons_ICE(Real);
external inner procedure FORMDEF2_ICE();
external inner procedure FORMDEF3_ICE();
external inner procedure ARS2RClass_ICE();
external inner procedure ALLVATRClass_ICE();

// Language functions ITA
external inner function Boolean DisplayLoginKeyPad_ITA();
external inner function string 255 VATZoneEditFieldLabelITA(Integer);
external inner function real VATZoneButtonsLabelsITA(real,real,real,real);
external inner procedure LoginButtons2_ITA(Real,Real);
external inner procedure FORMDEF_ITA();
external inner function string 255 DemoMsgWClassTitle_ITA(Boolean,Boolean);
external inner procedure TBEClassDef_ITA();
external inner function string 255 VATZoneNameITA();
external inner procedure TSERW_ITA();
external inner procedure TSERWNT_ITA();
external inner procedure TSERWTouch_ITA();
external inner procedure TSERWTEST_ITA();
external inner procedure INVFORM_ITA(Boolean);
external inner procedure DisplayRecordDetails_ITA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ITA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ITA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ITA();
external inner function string 255 ResMonWClassWindowTitle_ITA();
external inner function string 255 RTMonWClassWindowTitle_ITA();
external inner procedure SetupNightAuditWindowControls_ITA(Boolean);
external inner procedure CURClassDefinitionITA();
external inner function real DrawPaymentModesButtons_IV_ITA(real);
external inner function real FunctionButtons_ITA(string);
external inner procedure CreditCardWindowHeader_ITA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ITA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ITA(Real);
external inner procedure CreditCardWindowDeliveryDetail_ITA(Real);
external inner function real DrawPaymentModesButtons_ITA();
external inner procedure DrawBarMenuTiles_ITA(string);
external inner procedure DrawRestPMOtherPay_ITA();
external inner procedure DisplayRecordDetailsRA_ITA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ITA(var integer,var integer);
external inner procedure OKCancel_ITA();
external inner procedure DefineElearningURLCacheLClass_ITA();
external inner procedure DefineElearningURLCacheDClass_ITA();
external inner function real TravelLogDeductions_ITA(real,real);
external inner procedure LoginButtons_ITA(Real);
external inner procedure FORMDEF2_ITA();
external inner procedure FORMDEF3_ITA();
external inner procedure ARS2RClass_ITA();
external inner procedure ALLVATRClass_ITA();

// Language functions KEE
external inner function Boolean DisplayLoginKeyPad_KEE();
external inner function string 255 VATZoneEditFieldLabelKEE(Integer);
external inner function real VATZoneButtonsLabelsKEE(real,real,real,real);
external inner procedure LoginButtons2_KEE(Real,Real);
external inner procedure FORMDEF_KEE();
external inner function string 255 DemoMsgWClassTitle_KEE(Boolean,Boolean);
external inner procedure TBEClassDef_KEE();
external inner function string 255 VATZoneNameKEE();
external inner procedure TSERW_KEE();
external inner procedure TSERWNT_KEE();
external inner procedure TSERWTouch_KEE();
external inner procedure TSERWTEST_KEE();
external inner procedure INVFORM_KEE(Boolean);
external inner procedure DisplayRecordDetails_KEE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_KEE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_KEE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_KEE();
external inner function string 255 ResMonWClassWindowTitle_KEE();
external inner function string 255 RTMonWClassWindowTitle_KEE();
external inner procedure SetupNightAuditWindowControls_KEE(Boolean);
external inner procedure CURClassDefinitionKEE();
external inner function real DrawPaymentModesButtons_IV_KEE(real);
external inner function real FunctionButtons_KEE(string);
external inner procedure CreditCardWindowHeader_KEE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_KEE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_KEE(Real);
external inner procedure CreditCardWindowDeliveryDetail_KEE(Real);
external inner function real DrawPaymentModesButtons_KEE();
external inner procedure DrawBarMenuTiles_KEE(string);
external inner procedure DrawRestPMOtherPay_KEE();
external inner procedure DisplayRecordDetailsRA_KEE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_KEE(var integer,var integer);
external inner procedure OKCancel_KEE();
external inner procedure DefineElearningURLCacheLClass_KEE();
external inner procedure DefineElearningURLCacheDClass_KEE();
external inner function real TravelLogDeductions_KEE(real,real);
external inner procedure LoginButtons_KEE(Real);
external inner procedure FORMDEF2_KEE();
external inner procedure FORMDEF3_KEE();
external inner procedure ARS2RClass_KEE();
external inner procedure ALLVATRClass_KEE();

// Language functions LAT
external inner function Boolean DisplayLoginKeyPad_LAT();
external inner function string 255 VATZoneEditFieldLabelLAT(Integer);
external inner function real VATZoneButtonsLabelsLAT(real,real,real,real);
external inner procedure LoginButtons2_LAT(Real,Real);
external inner procedure FORMDEF_LAT();
external inner function string 255 DemoMsgWClassTitle_LAT(Boolean,Boolean);
external inner procedure TBEClassDef_LAT();
external inner function string 255 VATZoneNameLAT();
external inner procedure TSERW_LAT();
external inner procedure TSERWNT_LAT();
external inner procedure TSERWTouch_LAT();
external inner procedure TSERWTEST_LAT();
external inner procedure INVFORM_LAT(Boolean);
external inner procedure DisplayRecordDetails_LAT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_LAT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LAT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LAT();
external inner function string 255 ResMonWClassWindowTitle_LAT();
external inner function string 255 RTMonWClassWindowTitle_LAT();
external inner procedure SetupNightAuditWindowControls_LAT(Boolean);
external inner procedure CURClassDefinitionLAT();
external inner function real DrawPaymentModesButtons_IV_LAT(real);
external inner function real FunctionButtons_LAT(string);
external inner procedure CreditCardWindowHeader_LAT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LAT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LAT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LAT(Real);
external inner function real DrawPaymentModesButtons_LAT();
external inner procedure DrawBarMenuTiles_LAT(string);
external inner procedure DrawRestPMOtherPay_LAT();
external inner procedure DisplayRecordDetailsRA_LAT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LAT(var integer,var integer);
external inner procedure OKCancel_LAT();
external inner procedure DefineElearningURLCacheLClass_LAT();
external inner procedure DefineElearningURLCacheDClass_LAT();
external inner function real TravelLogDeductions_LAT(real,real);
external inner procedure LoginButtons_LAT(Real);
external inner procedure FORMDEF2_LAT();
external inner procedure FORMDEF3_LAT();
external inner procedure ARS2RClass_LAT();
external inner procedure ALLVATRClass_LAT();

// Language functions LIT
external inner function Boolean DisplayLoginKeyPad_LIT();
external inner function string 255 VATZoneEditFieldLabelLIT(Integer);
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);
external inner procedure LoginButtons2_LIT(Real,Real);
external inner procedure FORMDEF_LIT();
external inner function string 255 DemoMsgWClassTitle_LIT(Boolean,Boolean);
external inner procedure TBEClassDef_LIT();
external inner function string 255 VATZoneNameLIT();
external inner procedure TSERW_LIT();
external inner procedure TSERWNT_LIT();
external inner procedure TSERWTouch_LIT();
external inner procedure TSERWTEST_LIT();
external inner procedure INVFORM_LIT(Boolean);
external inner procedure DisplayRecordDetails_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_LIT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LIT();
external inner function string 255 ResMonWClassWindowTitle_LIT();
external inner function string 255 RTMonWClassWindowTitle_LIT();
external inner procedure SetupNightAuditWindowControls_LIT(Boolean);
external inner procedure CURClassDefinitionLIT();
external inner function real DrawPaymentModesButtons_IV_LIT(real);
external inner function real FunctionButtons_LIT(string);
external inner procedure CreditCardWindowHeader_LIT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LIT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LIT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LIT(Real);
external inner function real DrawPaymentModesButtons_LIT();
external inner procedure DrawBarMenuTiles_LIT(string);
external inner procedure DrawRestPMOtherPay_LIT();
external inner procedure DisplayRecordDetailsRA_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LIT(var integer,var integer);
external inner procedure OKCancel_LIT();
external inner procedure DefineElearningURLCacheLClass_LIT();
external inner procedure DefineElearningURLCacheDClass_LIT();
external inner function real TravelLogDeductions_LIT(real,real);
external inner procedure LoginButtons_LIT(Real);
external inner procedure FORMDEF2_LIT();
external inner procedure FORMDEF3_LIT();
external inner procedure ARS2RClass_LIT();
external inner procedure ALLVATRClass_LIT();

// Language functions NOR
external inner function Boolean DisplayLoginKeyPad_NOR();
external inner function string 255 VATZoneEditFieldLabelNOR(Integer);
external inner function real VATZoneButtonsLabelsNOR(real,real,real,real);
external inner procedure LoginButtons2_NOR(Real,Real);
external inner procedure FORMDEF_NOR();
external inner function string 255 DemoMsgWClassTitle_NOR(Boolean,Boolean);
external inner procedure TBEClassDef_NOR();
external inner function string 255 VATZoneNameNOR();
external inner procedure TSERW_NOR();
external inner procedure TSERWNT_NOR();
external inner procedure TSERWTouch_NOR();
external inner procedure TSERWTEST_NOR();
external inner procedure INVFORM_NOR(Boolean);
external inner procedure DisplayRecordDetails_NOR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_NOR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_NOR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_NOR();
external inner function string 255 ResMonWClassWindowTitle_NOR();
external inner function string 255 RTMonWClassWindowTitle_NOR();
external inner procedure SetupNightAuditWindowControls_NOR(Boolean);
external inner procedure CURClassDefinitionNOR();
external inner function real DrawPaymentModesButtons_IV_NOR(real);
external inner function real FunctionButtons_NOR(string);
external inner procedure CreditCardWindowHeader_NOR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_NOR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_NOR(Real);
external inner procedure CreditCardWindowDeliveryDetail_NOR(Real);
external inner function real DrawPaymentModesButtons_NOR();
external inner procedure DrawBarMenuTiles_NOR(string);
external inner procedure DrawRestPMOtherPay_NOR();
external inner procedure DisplayRecordDetailsRA_NOR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_NOR(var integer,var integer);
external inner procedure OKCancel_NOR();
external inner procedure DefineElearningURLCacheLClass_NOR();
external inner procedure DefineElearningURLCacheDClass_NOR();
external inner function real TravelLogDeductions_NOR(real,real);
external inner procedure LoginButtons_NOR(Real);
external inner procedure FORMDEF2_NOR();
external inner procedure FORMDEF3_NOR();
external inner procedure ARS2RClass_NOR();
external inner procedure ALLVATRClass_NOR();

// Language functions NZE
external inner function Boolean DisplayLoginKeyPad_NZE();
external inner function string 255 VATZoneEditFieldLabelNZE(Integer);
external inner function real VATZoneButtonsLabelsNZE(real,real,real,real);
external inner procedure LoginButtons2_NZE(Real,Real);
external inner procedure FORMDEF_NZE();
external inner function string 255 DemoMsgWClassTitle_NZE(Boolean,Boolean);
external inner procedure TBEClassDef_NZE();
external inner function string 255 VATZoneNameNZE();
external inner procedure TSERW_NZE();
external inner procedure TSERWNT_NZE();
external inner procedure TSERWTouch_NZE();
external inner procedure TSERWTEST_NZE();
external inner procedure INVFORM_NZE(Boolean);
external inner procedure DisplayRecordDetails_NZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_NZE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_NZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_NZE();
external inner function string 255 ResMonWClassWindowTitle_NZE();
external inner function string 255 RTMonWClassWindowTitle_NZE();
external inner procedure SetupNightAuditWindowControls_NZE(Boolean);
external inner procedure CURClassDefinitionNZE();
external inner function real DrawPaymentModesButtons_IV_NZE(real);
external inner function real FunctionButtons_NZE(string);
external inner procedure CreditCardWindowHeader_NZE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_NZE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_NZE(Real);
external inner procedure CreditCardWindowDeliveryDetail_NZE(Real);
external inner function real DrawPaymentModesButtons_NZE();
external inner procedure DrawBarMenuTiles_NZE(string);
external inner procedure DrawRestPMOtherPay_NZE();
external inner procedure DisplayRecordDetailsRA_NZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_NZE(var integer,var integer);
external inner procedure OKCancel_NZE();
external inner procedure DefineElearningURLCacheLClass_NZE();
external inner procedure DefineElearningURLCacheDClass_NZE();
external inner function real TravelLogDeductions_NZE(real,real);
external inner procedure LoginButtons_NZE(Real);
external inner procedure FORMDEF2_NZE();
external inner procedure FORMDEF3_NZE();
external inner procedure ARS2RClass_NZE();
external inner procedure ALLVATRClass_NZE();

// Language functions PHE
external inner function Boolean DisplayLoginKeyPad_PHE();
external inner function string 255 VATZoneEditFieldLabelPHE(Integer);
external inner function real VATZoneButtonsLabelsPHE(real,real,real,real);
external inner procedure LoginButtons2_PHE(Real,Real);
external inner procedure FORMDEF_PHE();
external inner function string 255 DemoMsgWClassTitle_PHE(Boolean,Boolean);
external inner procedure TBEClassDef_PHE();
external inner function string 255 VATZoneNamePHE();
external inner procedure TSERW_PHE();
external inner procedure TSERWNT_PHE();
external inner procedure TSERWTouch_PHE();
external inner procedure TSERWTEST_PHE();
external inner procedure INVFORM_PHE(Boolean);
external inner procedure DisplayRecordDetails_PHE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_PHE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_PHE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_PHE();
external inner function string 255 ResMonWClassWindowTitle_PHE();
external inner function string 255 RTMonWClassWindowTitle_PHE();
external inner procedure SetupNightAuditWindowControls_PHE(Boolean);
external inner procedure CURClassDefinitionPHE();
external inner function real DrawPaymentModesButtons_IV_PHE(real);
external inner function real FunctionButtons_PHE(string);
external inner procedure CreditCardWindowHeader_PHE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_PHE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_PHE(Real);
external inner procedure CreditCardWindowDeliveryDetail_PHE(Real);
external inner function real DrawPaymentModesButtons_PHE();
external inner procedure DrawBarMenuTiles_PHE(string);
external inner procedure DrawRestPMOtherPay_PHE();
external inner procedure DisplayRecordDetailsRA_PHE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_PHE(var integer,var integer);
external inner procedure OKCancel_PHE();
external inner procedure DefineElearningURLCacheLClass_PHE();
external inner procedure DefineElearningURLCacheDClass_PHE();
external inner function real TravelLogDeductions_PHE(real,real);
external inner procedure LoginButtons_PHE(Real);
external inner procedure FORMDEF2_PHE();
external inner procedure FORMDEF3_PHE();
external inner procedure ARS2RClass_PHE();
external inner procedure ALLVATRClass_PHE();

// Language functions POL
external inner function Boolean DisplayLoginKeyPad_POL();
external inner function string 255 VATZoneEditFieldLabelPOL(Integer);
external inner function real VATZoneButtonsLabelsPOL(real,real,real,real);
external inner procedure LoginButtons2_POL(Real,Real);
external inner procedure FORMDEF_POL();
external inner function string 255 DemoMsgWClassTitle_POL(Boolean,Boolean);
external inner procedure TBEClassDef_POL();
external inner function string 255 VATZoneNamePOL();
external inner procedure TSERW_POL();
external inner procedure TSERWNT_POL();
external inner procedure TSERWTouch_POL();
external inner procedure TSERWTEST_POL();
external inner procedure INVFORM_POL(Boolean);
external inner procedure DisplayRecordDetails_POL(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_POL(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_POL(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_POL();
external inner function string 255 ResMonWClassWindowTitle_POL();
external inner function string 255 RTMonWClassWindowTitle_POL();
external inner procedure SetupNightAuditWindowControls_POL(Boolean);
external inner procedure CURClassDefinitionPOL();
external inner function real DrawPaymentModesButtons_IV_POL(real);
external inner function real FunctionButtons_POL(string);
external inner procedure CreditCardWindowHeader_POL(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_POL(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_POL(Real);
external inner procedure CreditCardWindowDeliveryDetail_POL(Real);
external inner function real DrawPaymentModesButtons_POL();
external inner procedure DrawBarMenuTiles_POL(string);
external inner procedure DrawRestPMOtherPay_POL();
external inner procedure DisplayRecordDetailsRA_POL(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_POL(var integer,var integer);
external inner procedure OKCancel_POL();
external inner procedure DefineElearningURLCacheLClass_POL();
external inner procedure DefineElearningURLCacheDClass_POL();
external inner function real TravelLogDeductions_POL(real,real);
external inner procedure LoginButtons_POL(Real);
external inner procedure FORMDEF2_POL();
external inner procedure FORMDEF3_POL();
external inner procedure ARS2RClass_POL();
external inner procedure ALLVATRClass_POL();

// Language functions POR
external inner function Boolean DisplayLoginKeyPad_POR();
external inner function string 255 VATZoneEditFieldLabelPOR(Integer);
external inner function real VATZoneButtonsLabelsPOR(real,real,real,real);
external inner procedure LoginButtons2_POR(Real,Real);
external inner procedure FORMDEF_POR();
external inner function string 255 DemoMsgWClassTitle_POR(Boolean,Boolean);
external inner procedure TBEClassDef_POR();
external inner function string 255 VATZoneNamePOR();
external inner procedure TSERW_POR();
external inner procedure TSERWNT_POR();
external inner procedure TSERWTouch_POR();
external inner procedure TSERWTEST_POR();
external inner procedure INVFORM_POR(Boolean);
external inner procedure DisplayRecordDetails_POR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_POR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_POR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_POR();
external inner function string 255 ResMonWClassWindowTitle_POR();
external inner function string 255 RTMonWClassWindowTitle_POR();
external inner procedure SetupNightAuditWindowControls_POR(Boolean);
external inner procedure CURClassDefinitionPOR();
external inner function real DrawPaymentModesButtons_IV_POR(real);
external inner function real FunctionButtons_POR(string);
external inner procedure CreditCardWindowHeader_POR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_POR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_POR(Real);
external inner procedure CreditCardWindowDeliveryDetail_POR(Real);
external inner function real DrawPaymentModesButtons_POR();
external inner procedure DrawBarMenuTiles_POR(string);
external inner procedure DrawRestPMOtherPay_POR();
external inner procedure DisplayRecordDetailsRA_POR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_POR(var integer,var integer);
external inner procedure OKCancel_POR();
external inner procedure DefineElearningURLCacheLClass_POR();
external inner procedure DefineElearningURLCacheDClass_POR();
external inner function real TravelLogDeductions_POR(real,real);
external inner procedure LoginButtons_POR(Real);
external inner procedure FORMDEF2_POR();
external inner procedure FORMDEF3_POR();
external inner procedure ARS2RClass_POR();
external inner procedure ALLVATRClass_POR();

// Language functions ROM
external inner function Boolean DisplayLoginKeyPad_ROM();
external inner function string 255 VATZoneEditFieldLabelROM(Integer);
external inner function real VATZoneButtonsLabelsROM(real,real,real,real);
external inner procedure LoginButtons2_ROM(Real,Real);
external inner procedure FORMDEF_ROM();
external inner function string 255 DemoMsgWClassTitle_ROM(Boolean,Boolean);
external inner procedure TBEClassDef_ROM();
external inner function string 255 VATZoneNameROM();
external inner procedure TSERW_ROM();
external inner procedure TSERWNT_ROM();
external inner procedure TSERWTouch_ROM();
external inner procedure TSERWTEST_ROM();
external inner procedure INVFORM_ROM(Boolean);
external inner procedure DisplayRecordDetails_ROM(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ROM(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ROM(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ROM();
external inner function string 255 ResMonWClassWindowTitle_ROM();
external inner function string 255 RTMonWClassWindowTitle_ROM();
external inner procedure SetupNightAuditWindowControls_ROM(Boolean);
external inner procedure CURClassDefinitionROM();
external inner function real DrawPaymentModesButtons_IV_ROM(real);
external inner function real FunctionButtons_ROM(string);
external inner procedure CreditCardWindowHeader_ROM(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ROM(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ROM(Real);
external inner procedure CreditCardWindowDeliveryDetail_ROM(Real);
external inner function real DrawPaymentModesButtons_ROM();
external inner procedure DrawBarMenuTiles_ROM(string);
external inner procedure DrawRestPMOtherPay_ROM();
external inner procedure DisplayRecordDetailsRA_ROM(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ROM(var integer,var integer);
external inner procedure OKCancel_ROM();
external inner procedure DefineElearningURLCacheLClass_ROM();
external inner procedure DefineElearningURLCacheDClass_ROM();
external inner function real TravelLogDeductions_ROM(real,real);
external inner procedure LoginButtons_ROM(Real);
external inner procedure FORMDEF2_ROM();
external inner procedure FORMDEF3_ROM();
external inner procedure ARS2RClass_ROM();
external inner procedure ALLVATRClass_ROM();

// Language functions RUS
external inner function Boolean DisplayLoginKeyPad_RUS();
external inner function string 255 VATZoneEditFieldLabelRUS(Integer);
external inner function real VATZoneButtonsLabelsRUS(real,real,real,real);
external inner procedure LoginButtons2_RUS(Real,Real);
external inner procedure FORMDEF_RUS();
external inner function string 255 DemoMsgWClassTitle_RUS(Boolean,Boolean);
external inner procedure TBEClassDef_RUS();
external inner function string 255 VATZoneNameRUS();
external inner procedure TSERW_RUS();
external inner procedure TSERWNT_RUS();
external inner procedure TSERWTouch_RUS();
external inner procedure TSERWTEST_RUS();
external inner procedure INVFORM_RUS(Boolean);
external inner procedure DisplayRecordDetails_RUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_RUS(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_RUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_RUS();
external inner function string 255 ResMonWClassWindowTitle_RUS();
external inner function string 255 RTMonWClassWindowTitle_RUS();
external inner procedure SetupNightAuditWindowControls_RUS(Boolean);
external inner procedure CURClassDefinitionRUS();
external inner function real DrawPaymentModesButtons_IV_RUS(real);
external inner function real FunctionButtons_RUS(string);
external inner procedure CreditCardWindowHeader_RUS(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_RUS(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_RUS(Real);
external inner procedure CreditCardWindowDeliveryDetail_RUS(Real);
external inner function real DrawPaymentModesButtons_RUS();
external inner procedure DrawBarMenuTiles_RUS(string);
external inner procedure DrawRestPMOtherPay_RUS();
external inner procedure DisplayRecordDetailsRA_RUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_RUS(var integer,var integer);
external inner procedure OKCancel_RUS();
external inner procedure DefineElearningURLCacheLClass_RUS();
external inner procedure DefineElearningURLCacheDClass_RUS();
external inner function real TravelLogDeductions_RUS(real,real);
external inner procedure LoginButtons_RUS(Real);
external inner procedure FORMDEF2_RUS();
external inner procedure FORMDEF3_RUS();
external inner procedure ARS2RClass_RUS();
external inner procedure ALLVATRClass_RUS();

// Language functions SAF
external inner function Boolean DisplayLoginKeyPad_SAF();
external inner function string 255 VATZoneEditFieldLabelSAF(Integer);
external inner function real VATZoneButtonsLabelsSAF(real,real,real,real);
external inner procedure LoginButtons2_SAF(Real,Real);
external inner procedure FORMDEF_SAF();
external inner function string 255 DemoMsgWClassTitle_SAF(Boolean,Boolean);
external inner procedure TBEClassDef_SAF();
external inner function string 255 VATZoneNameSAF();
external inner procedure TSERW_SAF();
external inner procedure TSERWNT_SAF();
external inner procedure TSERWTouch_SAF();
external inner procedure TSERWTEST_SAF();
external inner procedure INVFORM_SAF(Boolean);
external inner procedure DisplayRecordDetails_SAF(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SAF(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SAF(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SAF();
external inner function string 255 ResMonWClassWindowTitle_SAF();
external inner function string 255 RTMonWClassWindowTitle_SAF();
external inner procedure SetupNightAuditWindowControls_SAF(Boolean);
external inner procedure CURClassDefinitionSAF();
external inner function real DrawPaymentModesButtons_IV_SAF(real);
external inner function real FunctionButtons_SAF(string);
external inner procedure CreditCardWindowHeader_SAF(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SAF(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SAF(Real);
external inner procedure CreditCardWindowDeliveryDetail_SAF(Real);
external inner function real DrawPaymentModesButtons_SAF();
external inner procedure DrawBarMenuTiles_SAF(string);
external inner procedure DrawRestPMOtherPay_SAF();
external inner procedure DisplayRecordDetailsRA_SAF(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SAF(var integer,var integer);
external inner procedure OKCancel_SAF();
external inner procedure DefineElearningURLCacheLClass_SAF();
external inner procedure DefineElearningURLCacheDClass_SAF();
external inner function real TravelLogDeductions_SAF(real,real);
external inner procedure LoginButtons_SAF(Real);
external inner procedure FORMDEF2_SAF();
external inner procedure FORMDEF3_SAF();
external inner procedure ARS2RClass_SAF();
external inner procedure ALLVATRClass_SAF();

// Language functions SER
external inner function Boolean DisplayLoginKeyPad_SER();
external inner function string 255 VATZoneEditFieldLabelSER(Integer);
external inner function real VATZoneButtonsLabelsSER(real,real,real,real);
external inner procedure LoginButtons2_SER(Real,Real);
external inner procedure FORMDEF_SER();
external inner function string 255 DemoMsgWClassTitle_SER(Boolean,Boolean);
external inner procedure TBEClassDef_SER();
external inner function string 255 VATZoneNameSER();
external inner procedure TSERW_SER();
external inner procedure TSERWNT_SER();
external inner procedure TSERWTouch_SER();
external inner procedure TSERWTEST_SER();
external inner procedure INVFORM_SER(Boolean);
external inner procedure DisplayRecordDetails_SER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SER(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SER();
external inner function string 255 ResMonWClassWindowTitle_SER();
external inner function string 255 RTMonWClassWindowTitle_SER();
external inner procedure SetupNightAuditWindowControls_SER(Boolean);
external inner procedure CURClassDefinitionSER();
external inner function real DrawPaymentModesButtons_IV_SER(real);
external inner function real FunctionButtons_SER(string);
external inner procedure CreditCardWindowHeader_SER(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SER(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SER(Real);
external inner procedure CreditCardWindowDeliveryDetail_SER(Real);
external inner function real DrawPaymentModesButtons_SER();
external inner procedure DrawBarMenuTiles_SER(string);
external inner procedure DrawRestPMOtherPay_SER();
external inner procedure DisplayRecordDetailsRA_SER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SER(var integer,var integer);
external inner procedure OKCancel_SER();
external inner procedure DefineElearningURLCacheLClass_SER();
external inner procedure DefineElearningURLCacheDClass_SER();
external inner function real TravelLogDeductions_SER(real,real);
external inner procedure LoginButtons_SER(Real);
external inner procedure FORMDEF2_SER();
external inner procedure FORMDEF3_SER();
external inner procedure ARS2RClass_SER();
external inner procedure ALLVATRClass_SER();

// Language functions SGP
external inner function Boolean DisplayLoginKeyPad_SGP();
external inner function string 255 VATZoneEditFieldLabelSGP(Integer);
external inner function real VATZoneButtonsLabelsSGP(real,real,real,real);
external inner procedure LoginButtons2_SGP(Real,Real);
external inner procedure FORMDEF_SGP();
external inner function string 255 DemoMsgWClassTitle_SGP(Boolean,Boolean);
external inner procedure TBEClassDef_SGP();
external inner function string 255 VATZoneNameSGP();
external inner procedure TSERW_SGP();
external inner procedure TSERWNT_SGP();
external inner procedure TSERWTouch_SGP();
external inner procedure TSERWTEST_SGP();
external inner procedure INVFORM_SGP(Boolean);
external inner procedure DisplayRecordDetails_SGP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SGP(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SGP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SGP();
external inner function string 255 ResMonWClassWindowTitle_SGP();
external inner function string 255 RTMonWClassWindowTitle_SGP();
external inner procedure SetupNightAuditWindowControls_SGP(Boolean);
external inner procedure CURClassDefinitionSGP();
external inner function real DrawPaymentModesButtons_IV_SGP(real);
external inner function real FunctionButtons_SGP(string);
external inner procedure CreditCardWindowHeader_SGP(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SGP(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SGP(Real);
external inner procedure CreditCardWindowDeliveryDetail_SGP(Real);
external inner function real DrawPaymentModesButtons_SGP();
external inner procedure DrawBarMenuTiles_SGP(string);
external inner procedure DrawRestPMOtherPay_SGP();
external inner procedure DisplayRecordDetailsRA_SGP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SGP(var integer,var integer);
external inner procedure OKCancel_SGP();
external inner procedure DefineElearningURLCacheLClass_SGP();
external inner procedure DefineElearningURLCacheDClass_SGP();
external inner function real TravelLogDeductions_SGP(real,real);
external inner procedure LoginButtons_SGP(Real);
external inner procedure FORMDEF2_SGP();
external inner procedure FORMDEF3_SGP();
external inner procedure ARS2RClass_SGP();
external inner procedure ALLVATRClass_SGP();

// Language functions SWE
external inner function Boolean DisplayLoginKeyPad_SWE();
external inner function string 255 VATZoneEditFieldLabelSWE(Integer);
external inner function real VATZoneButtonsLabelsSWE(real,real,real,real);
external inner procedure LoginButtons2_SWE(Real,Real);
external inner procedure FORMDEF_SWE();
external inner function string 255 DemoMsgWClassTitle_SWE(Boolean,Boolean);
external inner procedure TBEClassDef_SWE();
external inner function string 255 VATZoneNameSWE();
external inner procedure TSERW_SWE();
external inner procedure TSERWNT_SWE();
external inner procedure TSERWTouch_SWE();
external inner procedure TSERWTEST_SWE();
external inner procedure INVFORM_SWE(Boolean);
external inner procedure DisplayRecordDetails_SWE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SWE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SWE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SWE();
external inner function string 255 ResMonWClassWindowTitle_SWE();
external inner function string 255 RTMonWClassWindowTitle_SWE();
external inner procedure SetupNightAuditWindowControls_SWE(Boolean);
external inner procedure CURClassDefinitionSWE();
external inner function real DrawPaymentModesButtons_IV_SWE(real);
external inner function real FunctionButtons_SWE(string);
external inner procedure CreditCardWindowHeader_SWE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SWE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SWE(Real);
external inner procedure CreditCardWindowDeliveryDetail_SWE(Real);
external inner function real DrawPaymentModesButtons_SWE();
external inner procedure DrawBarMenuTiles_SWE(string);
external inner procedure DrawRestPMOtherPay_SWE();
external inner procedure DisplayRecordDetailsRA_SWE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SWE(var integer,var integer);
external inner procedure OKCancel_SWE();
external inner procedure DefineElearningURLCacheLClass_SWE();
external inner procedure DefineElearningURLCacheDClass_SWE();
external inner function real TravelLogDeductions_SWE(real,real);
external inner procedure LoginButtons_SWE(Real);
external inner procedure FORMDEF2_SWE();
external inner procedure FORMDEF3_SWE();
external inner procedure ARS2RClass_SWE();
external inner procedure ALLVATRClass_SWE();

// Language functions SLO
external inner function Boolean DisplayLoginKeyPad_SLO();
external inner function string 255 VATZoneEditFieldLabelSLO(Integer);
external inner function real VATZoneButtonsLabelsSLO(real,real,real,real);
external inner procedure LoginButtons2_SLO(Real,Real);
external inner procedure FORMDEF_SLO();
external inner function string 255 DemoMsgWClassTitle_SLO(Boolean,Boolean);
external inner procedure TBEClassDef_SLO();
external inner function string 255 VATZoneNameSLO();
external inner procedure TSERW_SLO();
external inner procedure TSERWNT_SLO();
external inner procedure TSERWTouch_SLO();
external inner procedure TSERWTEST_SLO();
external inner procedure INVFORM_SLO(Boolean);
external inner procedure DisplayRecordDetails_SLO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SLO(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SLO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SLO();
external inner function string 255 ResMonWClassWindowTitle_SLO();
external inner function string 255 RTMonWClassWindowTitle_SLO();
external inner procedure SetupNightAuditWindowControls_SLO(Boolean);
external inner procedure CURClassDefinitionSLO();
external inner function real DrawPaymentModesButtons_IV_SLO(real);
external inner function real FunctionButtons_SLO(string);
external inner procedure CreditCardWindowHeader_SLO(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SLO(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SLO(Real);
external inner procedure CreditCardWindowDeliveryDetail_SLO(Real);
external inner function real DrawPaymentModesButtons_SLO();
external inner procedure DrawBarMenuTiles_SLO(string);
external inner procedure DrawRestPMOtherPay_SLO();
external inner procedure DisplayRecordDetailsRA_SLO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SLO(var integer,var integer);
external inner procedure OKCancel_SLO();
external inner procedure DefineElearningURLCacheLClass_SLO();
external inner procedure DefineElearningURLCacheDClass_SLO();
external inner function real TravelLogDeductions_SLO(real,real);
external inner procedure LoginButtons_SLO(Real);
external inner procedure FORMDEF2_SLO();
external inner procedure FORMDEF3_SLO();
external inner procedure ARS2RClass_SLO();
external inner procedure ALLVATRClass_SLO();

// Language functions SVK
external inner function Boolean DisplayLoginKeyPad_SVK();
external inner function string 255 VATZoneEditFieldLabelSVK(Integer);
external inner function real VATZoneButtonsLabelsSVK(real,real,real,real);
external inner procedure LoginButtons2_SVK(Real,Real);
external inner procedure FORMDEF_SVK();
external inner function string 255 DemoMsgWClassTitle_SVK(Boolean,Boolean);
external inner procedure TBEClassDef_SVK();
external inner function string 255 VATZoneNameSVK();
external inner procedure TSERW_SVK();
external inner procedure TSERWNT_SVK();
external inner procedure TSERWTouch_SVK();
external inner procedure TSERWTEST_SVK();
external inner procedure INVFORM_SVK(Boolean);
external inner procedure DisplayRecordDetails_SVK(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SVK(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SVK(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SVK();
external inner function string 255 ResMonWClassWindowTitle_SVK();
external inner function string 255 RTMonWClassWindowTitle_SVK();
external inner procedure SetupNightAuditWindowControls_SVK(Boolean);
external inner procedure CURClassDefinitionSVK();
external inner function real DrawPaymentModesButtons_IV_SVK(real);
external inner function real FunctionButtons_SVK(string);
external inner procedure CreditCardWindowHeader_SVK(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SVK(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SVK(Real);
external inner procedure CreditCardWindowDeliveryDetail_SVK(Real);
external inner function real DrawPaymentModesButtons_SVK();
external inner procedure DrawBarMenuTiles_SVK(string);
external inner procedure DrawRestPMOtherPay_SVK();
external inner procedure DisplayRecordDetailsRA_SVK(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SVK(var integer,var integer);
external inner procedure OKCancel_SVK();
external inner procedure DefineElearningURLCacheLClass_SVK();
external inner procedure DefineElearningURLCacheDClass_SVK();
external inner function real TravelLogDeductions_SVK(real,real);
external inner procedure LoginButtons_SVK(Real);
external inner procedure FORMDEF2_SVK();
external inner procedure FORMDEF3_SVK();
external inner procedure ARS2RClass_SVK();
external inner procedure ALLVATRClass_SVK();

// Language functions TUR
external inner function Boolean DisplayLoginKeyPad_TUR();
external inner function string 255 VATZoneEditFieldLabelTUR(Integer);
external inner function real VATZoneButtonsLabelsTUR(real,real,real,real);
external inner procedure LoginButtons2_TUR(Real,Real);
external inner procedure FORMDEF_TUR();
external inner function string 255 DemoMsgWClassTitle_TUR(Boolean,Boolean);
external inner procedure TBEClassDef_TUR();
external inner function string 255 VATZoneNameTUR();
external inner procedure TSERW_TUR();
external inner procedure TSERWNT_TUR();
external inner procedure TSERWTouch_TUR();
external inner procedure TSERWTEST_TUR();
external inner procedure INVFORM_TUR(Boolean);
external inner procedure DisplayRecordDetails_TUR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_TUR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_TUR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_TUR();
external inner function string 255 ResMonWClassWindowTitle_TUR();
external inner function string 255 RTMonWClassWindowTitle_TUR();
external inner procedure SetupNightAuditWindowControls_TUR(Boolean);
external inner procedure CURClassDefinitionTUR();
external inner function real DrawPaymentModesButtons_IV_TUR(real);
external inner function real FunctionButtons_TUR(string);
external inner procedure CreditCardWindowHeader_TUR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_TUR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_TUR(Real);
external inner procedure CreditCardWindowDeliveryDetail_TUR(Real);
external inner function real DrawPaymentModesButtons_TUR();
external inner procedure DrawBarMenuTiles_TUR(string);
external inner procedure DrawRestPMOtherPay_TUR();
external inner procedure DisplayRecordDetailsRA_TUR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_TUR(var integer,var integer);
external inner procedure OKCancel_TUR();
external inner procedure DefineElearningURLCacheLClass_TUR();
external inner procedure DefineElearningURLCacheDClass_TUR();
external inner function real TravelLogDeductions_TUR(real,real);
external inner procedure LoginButtons_TUR(Real);
external inner procedure FORMDEF2_TUR();
external inner procedure FORMDEF3_TUR();
external inner procedure ARS2RClass_TUR();
external inner procedure ALLVATRClass_TUR();

// Language functions UKR
external inner function Boolean DisplayLoginKeyPad_UKR();
external inner function string 255 VATZoneEditFieldLabelUKR(Integer);
external inner function real VATZoneButtonsLabelsUKR(real,real,real,real);
external inner procedure LoginButtons2_UKR(Real,Real);
external inner procedure FORMDEF_UKR();
external inner function string 255 DemoMsgWClassTitle_UKR(Boolean,Boolean);
external inner procedure TBEClassDef_UKR();
external inner function string 255 VATZoneNameUKR();
external inner procedure TSERW_UKR();
external inner procedure TSERWNT_UKR();
external inner procedure TSERWTouch_UKR();
external inner procedure TSERWTEST_UKR();
external inner procedure INVFORM_UKR(Boolean);
external inner procedure DisplayRecordDetails_UKR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_UKR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_UKR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_UKR();
external inner function string 255 ResMonWClassWindowTitle_UKR();
external inner function string 255 RTMonWClassWindowTitle_UKR();
external inner procedure SetupNightAuditWindowControls_UKR(Boolean);
external inner procedure CURClassDefinitionUKR();
external inner function real DrawPaymentModesButtons_IV_UKR(real);
external inner function real FunctionButtons_UKR(string);
external inner procedure CreditCardWindowHeader_UKR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_UKR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_UKR(Real);
external inner procedure CreditCardWindowDeliveryDetail_UKR(Real);
external inner function real DrawPaymentModesButtons_UKR();
external inner procedure DrawBarMenuTiles_UKR(string);
external inner procedure DrawRestPMOtherPay_UKR();
external inner procedure DisplayRecordDetailsRA_UKR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_UKR(var integer,var integer);
external inner procedure OKCancel_UKR();
external inner procedure DefineElearningURLCacheLClass_UKR();
external inner procedure DefineElearningURLCacheDClass_UKR();
external inner function real TravelLogDeductions_UKR(real,real);
external inner procedure LoginButtons_UKR(Real);
external inner procedure FORMDEF2_UKR();
external inner procedure FORMDEF3_UKR();
external inner procedure ARS2RClass_UKR();
external inner procedure ALLVATRClass_UKR();

// Language functions USA
external inner function Boolean DisplayLoginKeyPad_USA();
external inner function string 255 VATZoneEditFieldLabelUSA(Integer);
external inner function real VATZoneButtonsLabelsUSA(real,real,real,real);
external inner procedure LoginButtons2_USA(Real,Real);
external inner procedure FORMDEF_USA();
external inner function string 255 DemoMsgWClassTitle_USA(Boolean,Boolean);
external inner procedure TBEClassDef_USA();
external inner function string 255 VATZoneNameUSA();
external inner procedure TSERW_USA();
external inner procedure TSERWNT_USA();
external inner procedure TSERWTouch_USA();
external inner procedure TSERWTEST_USA();
external inner procedure INVFORM_USA(Boolean);
external inner procedure DisplayRecordDetails_USA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_USA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_USA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_USA();
external inner function string 255 ResMonWClassWindowTitle_USA();
external inner function string 255 RTMonWClassWindowTitle_USA();
external inner procedure SetupNightAuditWindowControls_USA(Boolean);
external inner procedure CURClassDefinitionUSA();
external inner function real DrawPaymentModesButtons_IV_USA(real);
external inner function real FunctionButtons_USA(string);
external inner procedure CreditCardWindowHeader_USA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_USA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_USA(Real);
external inner procedure CreditCardWindowDeliveryDetail_USA(Real);
external inner function real DrawPaymentModesButtons_USA();
external inner procedure DrawBarMenuTiles_USA(string);
external inner procedure DrawRestPMOtherPay_USA();
external inner procedure DisplayRecordDetailsRA_USA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_USA(var integer,var integer);
external inner procedure OKCancel_USA();
external inner procedure DefineElearningURLCacheLClass_USA();
external inner procedure DefineElearningURLCacheDClass_USA();
external inner function real TravelLogDeductions_USA(real,real);
external inner procedure LoginButtons_USA(Real);
external inner procedure FORMDEF2_USA();
external inner procedure FORMDEF3_USA();
external inner procedure ARS2RClass_USA();
external inner procedure ALLVATRClass_USA();

// Language functions USS
external inner function Boolean DisplayLoginKeyPad_USS();
external inner function string 255 VATZoneEditFieldLabelUSS(Integer);
external inner function real VATZoneButtonsLabelsUSS(real,real,real,real);
external inner procedure LoginButtons2_USS(Real,Real);
external inner procedure FORMDEF_USS();
external inner function string 255 DemoMsgWClassTitle_USS(Boolean,Boolean);
external inner procedure TBEClassDef_USS();
external inner function string 255 VATZoneNameUSS();
external inner procedure TSERW_USS();
external inner procedure TSERWNT_USS();
external inner procedure TSERWTouch_USS();
external inner procedure TSERWTEST_USS();
external inner procedure INVFORM_USS(Boolean);
external inner procedure DisplayRecordDetails_USS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_USS(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_USS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_USS();
external inner function string 255 ResMonWClassWindowTitle_USS();
external inner function string 255 RTMonWClassWindowTitle_USS();
external inner procedure SetupNightAuditWindowControls_USS(Boolean);
external inner procedure CURClassDefinitionUSS();
external inner function real DrawPaymentModesButtons_IV_USS(real);
external inner function real FunctionButtons_USS(string);
external inner procedure CreditCardWindowHeader_USS(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_USS(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_USS(Real);
external inner procedure CreditCardWindowDeliveryDetail_USS(Real);
external inner function real DrawPaymentModesButtons_USS();
external inner procedure DrawBarMenuTiles_USS(string);
external inner procedure DrawRestPMOtherPay_USS();
external inner procedure DisplayRecordDetailsRA_USS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_USS(var integer,var integer);
external inner procedure OKCancel_USS();
external inner procedure DefineElearningURLCacheLClass_USS();
external inner procedure DefineElearningURLCacheDClass_USS();
external inner function real TravelLogDeductions_USS(real,real);
external inner procedure LoginButtons_USS(Real);
external inner procedure FORMDEF2_USS();
external inner procedure FORMDEF3_USS();
external inner procedure ARS2RClass_USS();
external inner procedure ALLVATRClass_USS();

// Language functions VIE
external inner function Boolean DisplayLoginKeyPad_VIE();
external inner function string 255 VATZoneEditFieldLabelVIE(Integer);
external inner function real VATZoneButtonsLabelsVIE(real,real,real,real);
external inner procedure LoginButtons2_VIE(Real,Real);
external inner procedure FORMDEF_VIE();
external inner function string 255 DemoMsgWClassTitle_VIE(Boolean,Boolean);
external inner procedure TBEClassDef_VIE();
external inner function string 255 VATZoneNameVIE();
external inner procedure TSERW_VIE();
external inner procedure TSERWNT_VIE();
external inner procedure TSERWTouch_VIE();
external inner procedure TSERWTEST_VIE();
external inner procedure INVFORM_VIE(Boolean);
external inner procedure DisplayRecordDetails_VIE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_VIE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_VIE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_VIE();
external inner function string 255 ResMonWClassWindowTitle_VIE();
external inner function string 255 RTMonWClassWindowTitle_VIE();
external inner procedure SetupNightAuditWindowControls_VIE(Boolean);
external inner procedure CURClassDefinitionVIE();
external inner function real DrawPaymentModesButtons_IV_VIE(real);
external inner function real FunctionButtons_VIE(string);
external inner procedure CreditCardWindowHeader_VIE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_VIE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_VIE(Real);
external inner procedure CreditCardWindowDeliveryDetail_VIE(Real);
external inner function real DrawPaymentModesButtons_VIE();
external inner procedure DrawBarMenuTiles_VIE(string);
external inner procedure DrawRestPMOtherPay_VIE();
external inner procedure DisplayRecordDetailsRA_VIE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_VIE(var integer,var integer);
external inner procedure OKCancel_VIE();
external inner procedure DefineElearningURLCacheLClass_VIE();
external inner procedure DefineElearningURLCacheDClass_VIE();
external inner function real TravelLogDeductions_VIE(real,real);
external inner procedure LoginButtons_VIE(Real);
external inner procedure FORMDEF2_VIE();
external inner procedure FORMDEF3_VIE();
external inner procedure ARS2RClass_VIE();
external inner procedure ALLVATRClass_VIE();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();


procedure dummy() //##ii
begin //##ii
  SetLangMode(LangEnglish,"ENG",0); //##ii
  return; //##ii
end; //##ii


window TESTRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("TESTRClass",TESTRClass,CGRcW,RcType);
		SetWRect(20,80,400,250);
		v = 6; vs = 20; h = 120;
		PeriodField(h,v=6,"Period");
		EditField(h,v+=20,120,"Projects",Normal,f2,false,PRSClass);
		EditField(h,v+=20,120,"Objects",Normal,f1,false,ObjSClass);
	EndWindow;
end;

window TEST2RClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("TEST2RClass",TEST2RClass,CGRcW,RcType);
		SetWRect(20,80,400,250);
		v = 6; vs = 20; h = 120;
		PeriodField(h,v=6,"Period");
		EditField(h,v+=20,120,"Projects",Normal,f1,false,PRSClass);
		EditField(h,v+=20,120,"Objects",Normal,f2,false,ObjSClass);
		EditField(h,v+=20,120,"Expense Account",Normal,f3,false,CLCorspSClass);
	EndWindow;
end;

window ExcelUploadTClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Uploading a file to MS Excel",ExcelUploadTClass,CGother,RcType);
  SetWRect(20,80,400,240);
  vs = 20;h = 130; v = 26;
  HalPushButton(h,v,h+100,v+20,"ExcelUploadSetting","Upload Excel path");
  EndWindow;
end;

window TBBUDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,t,v,vm,vs;
  Integer tnr;

  WindowBegin("Project Budget",TBBUDClass,CGview,-);
  SetWRect(20,80,900,410);
  Sizeable(900,-1,0,0);
  UseView(TBBUVc);
  vs=20; h=100; h2=260; h1=50;
  Tile(0,90,false,"",PRCode);
  EditField(h,v=6,80, "Project",St_i,PRCode,false,PRSClass);
  EditField(h2,v,240, "Description",Normal,PRName,false,0);
  EditField(h,v+=vs,80, "Customer",St_i,CustCode,false,CUSClass);
  EditField(h2,v,240, "Name",Normal,CustName,false,0);
  EditField(h,v+=vs,80, "Trans. Date",Normal,TransDate,false,PasteCurDate);
  EditField(h2,v,240, "Version",ViewOnly,Version,false,0);						//Edit----------------------Dima  13.07.2015
  EnterSkip(Math);
  tnr = 1;
 // TileButton(tnr,"Invoicing"); tnr = tnr + 1;//Edit----------------------Dima  13.07.2015
  TileButton(tnr,"Items"); tnr = tnr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    //TileButton(tnr,"Currency"); tnr = tnr + 1;
  end;
  //TileButton(tnr,"Text"); tnr = tnr + 1;
  TileButton(tnr,"Members"); tnr = tnr + 1;
  tnr = 1;
 /* Tile(tnr,65,false,tnr,Math); tnr = tnr + 1;
  if (IsEnterprise) then begin
    ButtonFrame(h1,vm=(v=20),120,2,"Invoice Time");
    RadioButton(h1,v,0,0,"Actual",BudTime);
    RadioButton(h1,v+=16,1,255,"As Budgeted",BudTime);
    ButtonFrame(h1+=140,v=vm,120,2,"Invoice #Stocked# Items");
    RadioButton(h1,v,0,0,"Actual",BudStocked);
    RadioButton(h1,v+=16,1,255,"As Budgeted",BudStocked);
    ButtonFrame(h1+=140,v=vm,120,2,"Invoice Material");
    RadioButton(h1,v=vm,0,0,"Actual",BudMaterial);
    RadioButton(h1,v+=16,1,255,"As Budgeted",BudMaterial);
    ButtonFrame(h1+=140,v=vm,120,2,"Invoice Purchases");
    RadioButton(h1,v,0,0,"Actual",BudOther);
    RadioButton(h1,v+=16,1,255,"As Budgeted",BudOther);
  end else begin
    ButtonFrame(h1,vm=(v=20),120,2,"Invoice Time");
    RadioButton(h1,v,0,0,"Actual",BudTime);
    RadioButton(h1,v+=16,1,255,"As Budgeted",BudTime);
    ButtonFrame(h1+=140,v=vm,120,2,"Invoice #Stocked# Items");
    RadioButton(h1,v,0,0,"Actual",BudStocked);
    RadioButton(h1,v+=16,1,255,"As Budgeted",BudStocked);
    ButtonFrame(h1+=140,v=vm,120,2,"Invoice Purchases");
    RadioButton(h1,v,0,0,"Actual",BudOther);
    RadioButton(h1,v+=16,1,255,"As Budgeted",BudOther);
  end;*/
  Tile(tnr,120,true,tnr,Math); tnr = tnr + 1;
  v=6; h = 20;
  MatrixBegin(h,vm=(v+=16),-50,-56,-,999);
  MatTypedRow(stp);
  Flip(0);
  MatText(t=9,30,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t,-140,"Sum",0,Sum,true,0);
  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=17,30,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=18,30,"Quartal",true);// Edit ************************** Friday, 22 May 2015 10:12:52
  MatCol(t,100,"",0,Spec,false,0);// Edit ************************** Friday, 22 May 2015 10:13:17
  MatCol(1,30,"Item",0,ArtCode,false,CLCorspSClass);// Edit ************************** Thursday, 18 June 2015 17:57:24
  MatCol(1,100,"Extras",0,Extras,false,ExtSClass);
  MatCol(1,150,"Suppl",0,VECode,false,VESClass);
  MatCol(1,200,"Name",0,VEName,false,0);
  MatCol(1,h=-370,"Foundation",0,ExtraObj,true,ObjFoundSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,30,"Item",0,ArtCode,false,INSClass);
  MatCol(t,100,"Person",0,EMCode,false,UserSClass);
  MatCol(t,200,"Description",0,Comment,false,0);
  MatCol(t=1,h+=60,"Description",0,Comment,false,0);
  Flip(1);
  MatCol(t,-160,"Month Sum",0,MonthSum,true,0);
  MatCol(t,-80,"Quart Sum",0,Price,true,0);
  //MatCol(t,-215,"%",0,Discount,true,0);
  //MatCol(t,-100,"Phase",0,PRStage,false,PRStageSClass);
  //MatCol(t,-50,"Sign",0,PRStageSign,false,UserSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,-285,"Price",0,Price,true,0);
  MatCol(t,-215,"%",0,Discount,true,0);
  MatCol(t,-175,"Sum",0,Sum,true,0);
  MatCol(t,-100,"Phase",0,PRStage,false,PRStageSClass);
  MatCol(t,-50,"Sign",0,PRStageSign,false,UserSClass);
  Flip(2);
  MatCol(t=1,-110,"Qty",0,Qty,true,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  /*MatCol(t=1,-235,"Markup",0,Markup,true,0);
  MatCol(t,-180,"Cost",0,Cost,true,0);
  MatCol(t,-115,"GP",0,GP,true,0);
  MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
  //MatColTL(1,-50,"Inv. No.",0,-1,0,-1,Invoiced,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,-235,"Markup",0,Markup,true,0);
  MatCol(t,-180,"Cost",0,Cost,true,0);
  MatCol(t,-115,"GP",0,GP,true,0);
  MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
  Flip(3);
  t = 1;
  if (IsEnterprise) then begin
    MatCol(t,-255,"Time Class",0,TimeClass,false,TimeClassSClass);
  end;
  MatCol(t,-185,"Type",0,BudType,false,SetSClass);
  MatCol(t,-115,"Inv After",0,InvAfter,false,PasteCurDate);
  MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
//  MatColTL(1,-50,"Inv. No.",0,-1,0,-1,Invoiced,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,-255,"Time Class",0,TimeClass,false,TimeClassSClass);
  MatCol(t,-185,"Type",0,BudType,false,SetSClass);
  MatCol(t,-115,"Inv After",0,InvAfter,false,PasteCurDate);
  MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
  Flip(4);
  t=1;
  if (HasObjects) then begin
    MatCol(t,-235,"Objects",0,Objects,false,ObjSClass);
  end;
  MatCol(t,-115,"Inv Date",0,InvDate,false,PasteCurDate);
  MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
//  MatColTL(1,-50,"Inv. No.",0,-1,0,-1,Invoiced,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,-235,"Objects",0,Objects,false,ObjSClass);
  MatCol(t,-115,"Inv Date",0,InvDate,false,PasteCurDate);
  MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
  if (IsEnterprise) then begin
    Flip(5);
    MatCol(t=1,-115,"GM",0,GM,false,0);
    MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
//  MatColTL(1,-50,"Inv. No.",0,-1,0,-1,Invoiced,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-115,"GM",0,GM,false,0);
    MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
  end;*/
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusTBBUDsm");
  RowMenuItem(0,"Add Header Line",' ',' ',0,"HeaderLineTBBUDsm");
  RowMenuItem(0,"Add Subtotal Line",' ',' ',0,"SubtotalTBBUDsm");
  RowMenuItem(0,"--------",' ',' ',0,"HeaderLine0TBBUDsm");
  RowMenuItem(0,"Add Quartal I Line",' ',' ',0,"HeaderLine1TBBUDsm");
  RowMenuItem(0,"Add Quartal II Line",' ',' ',0,"HeaderLine2TBBUDsm");
  RowMenuItem(0,"Add Quartal III Line",' ',' ',0,"HeaderLine3TBBUDsm");
  RowMenuItem(0,"Add Quartal IV Line",' ',' ',0,"HeaderLine4TBBUDsm");
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  //v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  //v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  if (IsEnterprise) then begin
    //v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
    EditField(63,-25,40,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(210,-45,80, "Sum Time",Normal,SumTime,true,0);
    EditField(210,-25,80, "Sum Materials",Normal,SumMaterial,true,0);
    EditField(400,-45,80, "Sum #Stocked#",Normal,SumStocked,true,0);
    EditField(400,-25,80, "Sum Purchases",Normal,SumOther,true,0);
  end;
  EditField(580,-45,80, "Budget Markup",Normal,Markup,true,0);
  EditField(580,-25,80, "Total Sum",Normal,TotSum,true,0);
  /*if (HasMultiCurrency or HasBase2) then begin
    Tile(tnr,70,false,tnr,FrRate); tnr = tnr + 1;
    vs = 20; h1 = 110;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  Tile(tnr,210,false,tnr,Text0); tnr = tnr + 1;
  vs=20; h=100; h2=260; h1=50;
  EditField(h,v=6,-20,"Text",Normal,Text0,false,0);
  EditField(h,v+=20,-20,"",Normal,Text1,false,0);
  EditField(h,v+=20,-20,"",Normal,Text2,false,0);
  EditField(h,v+=20,-20,"",Normal,Text3,false,0);
  EditField(h,v+=20,-20,"",Normal,Text4,false,0);
  EditField(h,v+=20,-20,"",Normal,Text5,false,0);
  EditField(h,v+=20,-20,"",Normal,Text6,false,0);
  EditField(h,v+=20,-20,"",Normal,Text7,false,0);
  EditField(h,v+=20,-20,"",Normal,Text8,false,0);
  EditField(h,v+=20,-20,"",Normal,Text9,false,0);*/
  
  
  if (IsEnterprise) then begin
    Tile(tnr,120,false,tnr,Members); tnr = tnr + 1;
  end else begin
    if (HasLanguages) then begin
      Tile(tnr,100,false,tnr,Members); tnr = tnr + 1;
    end else begin
      Tile(tnr,80,false,tnr,Members); tnr = tnr + 1;
    end;
  end;
  h=100;
  EditField(h,vm=(v=6),-170,"Project Members",ViewOnly,Members,false,0);
  EditField(h,v+=vs,50,"Project Manager",Normal,PRLeader,false,0);
  if (HasSalesman) then begin
    EditField(h2,v=vm+vs,50,"#Salesman#",Normal,SalesMan,false,UserSClass);
  end;

  if (HasApprovals) then begin
    //SoftEditField(h3=570,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    ButtonFrame(h,v+=60,123,6,"Approval Status");
    RadioButton(h,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateNotRequested,0,"Not Requested",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
  end;
   

	SpecialMenu("Create Purchase Order",'u',1,"POFromTBBUDsm");
	SpecialMenu("Create Sales Order",'l',2,"ORFromTBBUDsm");
  SpecialMenu("Item Status",'I',3,"ItemStatusTBBUDsm");
  SpecialMenu("Budget Report",'r',4,"TBBUStatusReport");
  SpecialMenu("Purchase Orders by Vendors",'',1,"SeparatePOFromTBBUDsm"); //Edit***************************Sasha2,17:21 13.10.2014
  
  
    SpecialMenu("Add Quartal I Line",'1',3,"HeaderLine1TBBUDsm");
	SpecialMenu("Add Quartal II Line",'2',4,"HeaderLine2TBBUDsm");  
	SpecialMenu("Add Quartal III Line",'3',5,"HeaderLine3TBBUDsm");
	SpecialMenu("Add Quartal IV Line",'4',6,"HeaderLine4TBBUDsm");	
	
	SpecialMenu("New budget version",'n',7,"CreateNewBudget");			//Edit----------------------Dima  13.07.2015
  SpecialMenu("Copy Quartal",'Q',7,"CopyQuartDsm");//Edit-------------------Vitalii 17:14 10.02.2016
  
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModSL) then begin
    SpecialMenu("Invoice",'F',5,"IVFromTBBUDsm");
    if (IsEnterprise) then begin
      SpecialMenu("Invoice for Completed Phases",'f',6,"IVFromTBBUCompleteDsm");
    end;
  end;
  SpecialMenu("Purchase Order",'u',1,"POFromTBBUDsm");


  SpecialMenu("Sales Order",'l',2,"ORFromTBBUDsm");

//      SpecialMenu("Open Tax Matrix",' ',25,"OpenTaxMatrixTBBUDsm");
  EndWindow;
end;

window ObjPrjSClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real v;
  Integer mwn;
  Boolean contf;
  
  WindowBegin("Paste Object",ObjPrjSClass,CGslist,ObjView);
  DynamicWindow;
  SpawnClass(ObjDClass);
  UseView(ObjVc);
  Sizeable(-1,-1,0,0);
  SetWRect(220,80,600,298);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,    "Object",Code,false,ActSbstOTCode);
  RlColKey(201,201,"Name",Comment,false,ActSbstComment);
  SearchField("Search");
  EndWindow;
end;

window ObjExpSClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real v;
  Integer mwn;
  Boolean contf;
  
  WindowBegin("Paste Object",ObjExpSClass,CGslist,ObjView);
  DynamicWindow;
  SpawnClass(ObjDClass);
  UseView(ObjVc);
  Sizeable(-1,-1,0,0);
  SetWRect(220,80,600,298);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,    "Object",Code,false,ActSbstOTCode);
  RlColKey(201,201,"Name",Comment,false,ActSbstComment);
  SearchField("Search");
  EndWindow;
end;

window ObjSuppSClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real v;
  Integer mwn;
  Boolean contf;
  
  WindowBegin("Paste Object",ObjSuppSClass,CGslist,ObjView);
  DynamicWindow;
  SpawnClass(ObjDClass);
  UseView(ObjVc);
  Sizeable(-1,-1,0,0);
  SetWRect(220,80,600,298);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,    "Object",Code,false,ActSbstOTCode);
  RlColKey(201,201,"Name",Comment,false,ActSbstComment);
  SearchField("Search");
  EndWindow;
end;

window ObjLocSClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real v;
  Integer mwn;
  Boolean contf;
  
  WindowBegin("Paste Object",ObjLocSClass,CGslist,ObjView);
  DynamicWindow;
  SpawnClass(ObjDClass);
  UseView(ObjVc);
  Sizeable(-1,-1,0,0);
  SetWRect(220,80,600,298);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,    "Object",Code,false,ActSbstOTCode);
  RlColKey(201,201,"Name",Comment,false,ActSbstComment);
  SearchField("Search");
  EndWindow;
end;

window ObjFoundSClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real v;
  Integer mwn;
  Boolean contf;
  
  WindowBegin("Paste Object",ObjFoundSClass,CGslist,ObjView);
  DynamicWindow;
  SpawnClass(ObjDClass);
  UseView(ObjVc);
  Sizeable(-1,-1,0,0);
  SetWRect(220,80,600,298);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,    "Object",Code,false,ActSbstOTCode);
  RlColKey(201,201,"Name",Comment,false,ActSbstComment);
  SearchField("Search");
  EndWindow;
end;

window CLInDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,l,t,v,vs;
  Integer tilenr;
  
  WindowBegin("Cash In",CLInDClass,CGview,-);
  SetWRect(20,80,700,550);
  UseView(CLInVc);
  ActiveFieldOnNew("TransDate");
//  Sizeable(-1,-1,0,0);
  vs = 20; h = 130; h2=h+200; h3 = 472; v=6;
  if (HasOfficialSerNr and HasLocalization("POL")==false) then begin
    Tile(0,70,false,"",SerNr);
  end else begin
    Tile(0,50,false,"",SerNr);
  end;
  if (HasNumberSeries) then begin
    EditField(h,v,80,"No.",St_i,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"No.",St_i,SerNr,false,0);
  end;
  EditField(h2,v,82,"Date",Normal,TransDate,false,PasteCurDate);
  if (HasOfficialSerNr and HasLocalization("POL")==false) then begin
    EditField(h,v+=vs,135,"Official Ser. No.",Normal,OfficialSerNr,false,LegalCLInNrSClass);
  end;
  tilenr = 1;
  TileButton(tilenr,"Amounts");  tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Payments"); tilenr = tilenr + 1;
  CheckBox(-100,v,0,"OK",OKFlag);
  tilenr = 1;
  Tile(tilenr,300,false,tilenr,PayMode); tilenr = tilenr + 1;
  EditField(h,v=6,30,"Pay Mode",Normal,PayMode,false,PMSClass);
  EditField(h2,v,50,"Person",Normal,Person,false,UserSClass);
  CheckBox(400,v,0,"Info on Trans.",ARonTR);
  EditField(h,v+=vs,120,"Expense A/C",Normal,CorspCode,false,CLCorspSClass);
  EditField(h2,v,-20,"Comment",Normal,CorspComment,false,0);
  EditField(h,v+=vs,120,"Customer",Normal,CUCode,false,CUSClass);
  if (HasModNL) then begin
    EditField(h2,v,100,"Reference",Normal,RefStr,false,0);
  end;
  EditField(h,v+=vs,-20,"Name",Normal,CUName,false,0);
  EditField(h,v+=vs,-20,"Address",Normal,Addr0,false,0);
  EditField(h,v+=vs,-20,"",Normal,Addr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Addr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,Addr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,Addr4,false,0);
  EditField(h,v+=vs,-20,"Specification",Normal,Comment,false,0);
  if (HasObjects) then begin
    EditField(h,v+=vs,-20,"Objects",Normal,Objects,false,ObjSClass);
  end;
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(h,v+=vs,100,"Total",Normal,Total,true,0);
  if (HasLocalization("POL")==false) then begin
    EditField(h2,v,50,"#VAT# Code",Normal,VATCode,false,VATCodeSClass);
  end;
  if (HasLanguages) then begin
    EditField(h3,v,50,"Language",Normal,LangCode,true,LangSClass);
  end;
  EditField(h,v+=vs,100,"Net",Normal,NetVal,true,0);
  if (HasLocalization("POL")==false) then begin
    EditField(h2,v,80,"#VAT#",Normal,VATVal,true,0);
  end;
  if (HasExtTax) then begin
    EditField(h3,v,50,"Tax",Normal,TAX1Sum,true,0);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,CurncyCode); tilenr = tilenr + 1;
    vs = 20;
    EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;  
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  Tile(tilenr,200,false,tilenr,Math); tilenr = tilenr + 1;
  h = 8; v=24; l = 35;
  MatrixBegin(4,v,-50,-10,-,99);
  //Edit-------------------Vitalii 17:41 10.12.2015
  Flip(1);
  MatTypedRow(stp);
  
  MatCol(t=1,h=34,"Pay. Mode",Normal,PayMode,false,PMSClass);
  MatCol(t,h+=70,"Expense",Normal,CorspCode,false,CLCorspSClass);
  MatCol(t,h+=70,"Project",Normal,Prj,false,ObjPrjSClass);
  MatCol(t,h+=70,"#Supplier#",0,Supp,false,VESClass);
  MatCol(t,h+=70,"Foundation",0,Found,false,ObjFoundSClass);
  MatCol(t,h+=70,"Location",0,Loc,false,ObjLocSClass);
  MatCol(1,h+=70,"#Supplier# Name",0,SupName,true,0);
  MatCol(t,h+=100,"Comment",0,Comment,false,0);// Edit ************************** Tuesday, 26 May 2015 13:46:50
  MatCol(t,-80,"Sum",0,Sum,true,0);
  
  
  Flip(2);
  MatCol(t=1,h=34,"Type",0,Type,false,SetSClass);
  /*if (HasLocalization("POL") and IsStandardProduct) then begin// Edit ************************** Tuesday, 26 May 2015 13:17:40
    MatCol(t,h+=120,"Number",0,TransOfficialSerNr,false,ARSClass);
  end else begin
    MatCol(t,h+=120,"Number",0,TransNr,false,ARSClass);
  end;*/
  MatCol(t,h+=120,"Pay. Mode",Normal,PayMode,false,PMSClass);// Edit ************************** Tuesday, 26 May 2015 13:17:28
  /*if (HasModSO) then begin// Edit ************************** Tuesday, 26 May 2015 13:16:11
    MatCol(t,h+=70,"Order",0,OrderNr,false,ORSClass);
  end;*/
  MatCol(t,h+=70,"Expense A/C",ViewOnly,CorspCode,false,CLCorspSClass);// Edit ************************** Tuesday, 26 May 2015 13:16:16
  if (HasObjects) then begin
    MatCol(t,h+=70,"Objects",0,Objects,false,ObjSClass);
  end;
  //MatCol(t,-180,"Company",ViewOnly,Company,false,0);// Edit ************************** Tuesday, 26 May 2015 13:14:00
  MatCol(t,-180,"Comment",Normal,Comment,false,0);// Edit ************************** Tuesday, 26 May 2015 13:14:39
  
  MatCol(t,-80,"Sum",0,Sum,true,0);
  MatText(t=2,h=34,"Set. Disc.",true);
  MatCol(t,h+=80,"",0,Type,false,0);
  if (HasLocalization("POL") and IsStandardProduct) then begin
    MatCol(t,h+=200,"",0,TransOfficialSerNr,false,0);
  end else begin
    MatCol(t,h+=200,"",0,TransNr,false,0);
  end;
  MatCol(t,-180,"Company",ViewOnly,Company,false,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  Flip(3);
  MatCol(t=1,h=34,"Type",0,Type,false,SetSClass);
  MatCol(t,h+=120,"Expense A/C",ViewOnly,CorspCode,false,CLCorspSClass);
  //MatCol(t,h+=80,"Pay. Mode",Normal,PayMode,false,PMSClass);// Edit ************************** Tuesday, 26 May 2015 13:17:20
  if (HasLocalization("POL") and IsStandardProduct) then begin// Edit ************************** Tuesday, 26 May 2015 13:17:40
    MatCol(t,h+=80,"Number",0,TransOfficialSerNr,false,ARSClass);
  end else begin
    MatCol(t,h+=80	,"Number",0,TransNr,false,ARSClass);
  end;// Edit ************************** Tuesday, 26 May 2015 13:17:54
  MatCol(t,h+=70,"Comment",0,Comment,false,0);
  MatText(t=2,h=34,"Set. Disc.",true);
  //MatCol(t,h+=120,"Expense A/C",ViewOnly,CorspCode,false,CLCorspSClass);// Edit ************************** Tuesday, 26 May 2015 13:15:59
  if (HasModSO) then begin
    MatCol(t,h+=120,"Order",0,OrderNr,false,ORSClass);// Edit ************************** Tuesday, 26 May 2015 13:15:56
  end;
  MatCol(t,h+=70,"Comment",0,Comment,false,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v=v+ 1; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  if (HasModNL) then begin
    SpecialMenu("Open #NL# Transaction",'t',0,"OpenTRFromCLIn");
  end;
  if (IsEnterprise) then begin
    if (UserCanReport("CLInColIVRn","",true)) then begin
      SpecialMenu("Show Invoices",' ',0,"ShowColIVDsm");
    end;
  end;
  EndWindow;
end;

window CLOutDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,l,t,v,vs;
  Integer pos,tilenr,flipnr,f;
  
  WindowBegin("Cash Out",CLOutDClass,CGview,-);
  SetWRect(20,80,1000,550);// Edit ************************** Thursday, 17 September 2015 14:14:13
  UseView(CLOutVc);
  ActiveFieldOnNew("TransDate");
//  Sizeable(-1,-1,0,0);
  vs = 20; h = 100; h2=h+200; h3 = 430; v = 6;
  Tile(0,50,false,"",SerNr);
  if (HasNumberSeries) then begin
    EditField(h,v,80,"No.",St_i,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"No.",Normal,SerNr,false,0);
  end;
  EditField(h+150,v,82,"Date",Normal,TransDate,false,PasteCurDate);
//  EditField(h3,v,82,"Local Machine",ViewOnly,LocalMachineCode,false,0);
  tilenr = 1;
  TileButton(tilenr,"Amounts"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Payments"); tilenr = tilenr + 1;
  CheckBox(-100,v,0,"OK",OKFlag);
  tilenr = 1;
  Tile(tilenr,270,false,tilenr,PayMode); tilenr = tilenr + 1;
  EditField(h,v=6,30,"Pay Mode",Normal,PayMode,false,PMSClass);
  EditField(h2,v,50,"Person",Normal,Person,false,UserSClass);
  CheckBox(400,v,0,"Info on Trans.",ARonTR);
  EditField(h,v+=vs,120,"Expense A/C",Normal,CorspCode,false,CLCorspSClass);
  EditField(h2,v,-20,"Comment",Normal,CorspComment,false,0);
  //EditField(h,v+=vs,120,"Extras",Normal,CorspCode,false,CLCorspSClass);
  if (HasModPL or HasModPO) then begin
    EditField(h,v+=vs,120,"#Supplier#",Normal,CUCode,false,VESClass);
  end;
  if ((HasModNL and HasModPL==false) or (HasModNL==false and HasModPL==false)) then begin
    EditField(h2,v+=vs,100,"Reference",Normal,RefStr,false,0);
  end else begin
    EditField(h2,v,100,"Reference",Normal,RefStr,false,0);
  end;
  if (HasModPL or HasModPO) then begin
    EditField(h,v+=vs,-20,"Name",Normal,CUName,false,0);
    EditField(h,v+=vs,-20,"Address",Normal,Addr0,false,0);
    EditField(h,v+=vs,-20,"",Normal,Addr1,false,0);
    EditField(h,v+=vs,-20,"",Normal,Addr2,false,0);
    EditField(h,v+=vs,-20,"",Normal,Addr3,false,0);
    EditField(h,v+=vs,-20,"",Normal,Addr4,false,0);
  end;
  EditField(h,v+=vs,-20,"Specification",Normal,Comment,false,0);
  if (HasObjects) then begin
    EditField(h,v+=vs,-20,"Objects",Normal,Objects,false,ObjSClass);
  end;
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(h,v+=vs,100,"Total",Normal,Total,true,0);
  if (HasLocalization("POL")==false) then begin
    EditField(h2,v,50,"#VAT# Code",Normal,VATCode,false,VATCodeSClass);
  end;
  if (HasLanguages) then begin
    EditField(h3,v,50,"Language",Normal,LangCode,true,LangSClass);
  end;
  EditField(h,v+=vs,100,"Net",Normal,NetVal,true,0);
  if (HasLocalization("POL")==false) then begin
    EditField(h2,v,80,"#VAT#",Normal,VATVal,true,0);
  end;
  if (HasExtTax) then begin
    EditField(h3,v,50,"Tax",Normal,TAX1Sum,true,0);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,CurncyCode); tilenr = tilenr + 1;
    vs = 20;
    EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;  
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;  
  Tile(tilenr,200,false,tilenr,Math); tilenr = tilenr + 1;
  h = 8; v=24; l = 35; t = 1;
  MatrixBegin(4,v,-50,-10,-,99);
  Flip(1);
  MatTypedRow(stp);
  
  MatCol(t=1,h=34,"Pay. Mode",Normal,PayMode,false,PMSClass);
  MatCol(t,h+=70,"Expense",Normal,CorspCode,false,CLCorspSClass);
  MatCol(t,h+=70,"Extras",0,Extras,false,ExtSClass);
  MatCol(t,h+=70,"Project",Normal,Prj,false,ObjPrjSClass);
  MatCol(t,h+=70,"#Supplier#",0,Company,false,VESClass);
  MatCol(t,h+=70,"Foundation",0,Found,false,ObjFoundSClass);
  MatCol(t,h+=70,"Location",0,Loc,false,ObjLocSClass);
  MatCol(1,h+=70,"#Supplier# Name",0,VEName,true,0);
  MatCol(t,h+=100,"Comment",0,Comment,false,0);// Edit ************************** Tuesday, 26 May 2015 13:46:50
  MatCol(t,-80,"Sum",0,Sum,true,0);
  
  
  Flip(2);
  
  //MatCol(t=1,h=34,"Type",0,Type,false,SetSClass);// Edit ************************** Wednesday, 10 June 2015 10:56:41
  MatCol(t=1,h=34,"#Supplier#",0,Company,false,VESClass);// Edit ************************** Wednesday, 10 June 2015 10:57:08
  MatCol(t,h+=120,"Pay. Mode",Normal,PayMode,false,PMSClass);// Edit ************************** Tuesday, 26 May 2015 13:43:24
  

  MatCol(t,h+=70,"Expense A/C",ViewOnly,CorspCode,false,CLCorspSClass);
  if (HasObjects) then begin
    MatCol(t,h+=70,"Objects",0,Objects,false,ObjSClass);
  end;
  //MatCol(t,-180,"Company",ViewOnly,Company,false,0);
  MatCol(t,-180,"Comment",0,Comment,false,0);// Edit ************************** Tuesday, 26 May 2015 13:46:50
  MatCol(t,-80,"Sum",0,Sum,true,0);
  MatText(t=2,h=34,"Set. Disc.",true);
  MatCol(t,h+=80,"",0,Type,false,0);
  MatCol(t,h+=200,"",0,TransNr,false,0);
  MatCol(t,-180,"Company",ViewOnly,Company,false,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  
  Flip(3);
  t=1; h = 34;
  if (HasModPL) then begin
    MatCol(t,h,"Type",0,Type,false,SetSClass);
    h = h + 120;
  end;
  //MatCol(t,h,"Expense A/C",ViewOnly,CorspCode,false,CLCorspSClass);// Edit ************************** Tuesday, 26 May 2015 13:46:17
  if (HasModSO) then begin
    MatCol(t,h,"Order",0,OrderNr,false,ORSClass);// Edit ************************** Tuesday, 26 May 2015 13:46:18
  end;
  //MatCol(t,h+=80,"Pay. Mode",Normal,PayMode,false,PMSClass);// Edit ************************** Tuesday, 26 May 2015 13:43:48
  if (HasLocalization("POL") and IsStandardProduct) then begin
    MatCol(t,h+=80,"Number",0,TransOfficialSerNr,false,ARSClass);
  end else begin
    MatCol(t,h+=80,"Number",0,TransNr,false,ARSClass);
  end;
  MatCol(t,h+=70,"Comment",0,Comment,false,0);
  MatText(t=2,h=34,"Set. Disc.",true);
  MatCol(t,-180,"Company",ViewOnly,Company,false,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  if (IsEnterprise) then begin
    Flip(3);
    MatCol(1,80,"Date",0,ExpDate,false,PasteCurDate);
    pos = 155;
    MatCol(1,pos,"Type",0,Type,false,SetSClass);// Edit ************************** Wednesday, 10 June 2015 10:57:28
    /*if (HasModPL) then begin
      MatCol(1,pos,"#Supplier#",0,Company,false,VESClass);// Edit ************************** Wednesday, 10 June 2015 10:57:29
      pos = 225;
    end;*/
    MatCol(1,pos,"Identifier",0,Identifier,true,0);
    if (HasModPL) then begin
      MatCol(1,-365,"#Supplier# Name",0,VEName,true,0);
    end;
    MatCol(1,-130,"Document No.",0,DocNr,true,0);
    MatCol(1,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v=v+ 1; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  if (IsEnterprise) then begin
    v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  end;
  if (HasModNL) then begin
    SpecialMenu("Open #NL# Transaction",'t',0,"OpenTRFromCLOut");
  end;
  if (IsEnterprise) then begin
    if (UserCanReport("CLOutColVIRn","",true)) then begin
      SpecialMenu("Show Invoices",' ',1,"ShowColVIDsm");
    end;
  end;
  EndWindow;
end;

window CLCorspDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  WindowBegin("Expense Account",CLCorspDClass,CGview,CLCorspView);
  SetWRect(64,80,509,150);
  UseView(CLCorspVc);
  EditField(120,v=6,140,"Code",St_i,Code,false,0);
  CheckBox(300,v,0,"Closed",Closed);
  EditField(120,v+=20,300,"Comment",Normal,Comment,false,0);
  EditField(120,v+=20,80,"A/C",Normal,AccNumber,false,AccSClass);
  EditField(120,v+=20,80,"Objects",Normal,Objects,false,ObjSClass);
  EndWindow;
end;


window PRDClass:4
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","*")
begin
  real h,h2,v,vs,vm;
  string 255 label;
  Integer tilenr;

  WindowBegin("Project",PRDClass,CGview,-);
  UseView(PRVc);
//  FormName(ProjectForm);
  FormName(ProjectInfoForm);
  Sizeable(-1,-1,0,0);
//  if (GuiType==kGuiAndroid or GUIType==kGuiiPhone) then begin
  if (false) then begin
    SetWRect(0,0,320,418);

    h = 200;  h2=h+240; vs = 38;
  //Tile(0,70+18,false,"",Person);
    EditField(h,v=6,120,"Code",St_i,Code,false,0); //
    EditField(h2,v,-30,"Cust. Code",Normal,CustCode,false,CUSClass);
    EditField(h,v+=vs,-30,"Cust. Name",Normal,CustName,false,0);
    EditField(h,v+=vs,-30,"Description",Normal,Name,false,0);

    v = v + vs;
  end else begin
  SetWRect(20,80,600,390);
  Tile(0,74,false,"",Code);
  EditField(h=80,v=6,120,"Project",St_i,Code,false,TSerSClass);
  if (IsEnterprise) then begin
    EditField(300,v,-210,"Mother",Normal,MotherCode,false,PRSClass);
  end;
  EditField(-100,v,-40,"Class",Normal,PRClass,false,PRClassSClass);
  EditField(h,v+=20,-210,"Description",Normal,Name,false,0);
  /*if (IsEnterprise) then begin// Edit ************************** Thursday, 18 June 2015 14:54:26
    EditField(-100,v,-40,"Phase",Normal,PRStage,false,PRStageSClass);
  end;*/
  tilenr = 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  //TileButton(tilenr,"Members"); tilenr = tilenr + 1;// Edit ************************** Thursday, 18 June 2015 14:56:34
  TileButton(tilenr,"Suppliers"); tilenr = tilenr + 1;// Edit ************************** Thursday, 18 June 2015 14:56:41
  /*TileButton(tilenr,"Down Payments"); tilenr = tilenr + 1;// Edit ************************** Thursday, 18 June 2015 15:11:04
  if (IsEnterprise) then begin
    TileButton(tilenr,"Time & Purchases"); tilenr = tilenr + 1;
    TileButton(tilenr,"#Stock# & Materials"); tilenr = tilenr + 1;
  end;*/
  //TileButton(tilenr,"Invoicing"); tilenr = tilenr + 1;// Edit ************************** Thursday, 18 June 2015 15:11:09
  TileButton(tilenr,"Text"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,260,true,tilenr,CustCode); tilenr = tilenr + 1;
  h=100; h2=h+140; v=6;
  EditField(h,v,70,"Customer",Normal ,CustCode,false,CUSClass);
  EditField(h2,v,-40,"Name",ViewOnly,CustName,false,0);
  EditField(h,v+=20,300,"Contact",Normal,Contact,false,ContactSClass);
  if (HasObjects) then begin
    EditField(h,v+=20,300,"Objects",Normal ,Objects,false,ObjSClass);
  end;
  if (HasContactClassification) then begin
    EditField(h,v+=20,300,"Classification",Normal ,PRClassification,false,PRClSClass);
  end;
  EditField(h,v+=20,300,"Text",Normal ,Desc0,false,0);
  EditField(h,v+=20,300,"",Normal ,Desc1,false,0);
  EditField(h,v+=20,300,"",Normal ,Desc2,false,0);
  ButtonFrame(h,vm=(v+=45),150,3,"Status");
  RadioButton(h,v,0,0,"Active",Terminated);
  RadioButton(h,v+=16,2,0,"No More Transactions",Terminated);
  RadioButton(h,v+=16,1,0,"Finished",Terminated);
  /*ButtonFrame(h=280,v=vm,150,3,"Project Type");
  RadioButton(h,v,0,0,"Invoiceable",Type);
  RadioButton(h,v+=16,1,255,"Internal",Type);
  RadioButton(h,v+=16,2,255,"Other",Type);*/
  /*if (IsEnterprise) then begin
    ButtonFrame(h=460,v=vm,220,3,"Usage of Items on Project Budget");
    RadioButton(h,v,0,0,"No Warning",TBIVItemsUsage);
    RadioButton(h,v+=16,1,255,"Warning",TBIVItemsUsage);
    RadioButton(h,v+=16,2,255,"Disallow",TBIVItemsUsage);
  end;*/
  EditField(-110,v=26,70,"Start Date",Normal ,StartDate,false,PasteCurDate);
  EditField(-110,v+=20,70,"End Date",Normal ,EndDate,false,PasteCurDate);
  EditField(-110,v+=20,70,"Finished Date",ViewOnly,FinishedDate,false,0);
  if (HasMultiCurrency) then begin
    EditField(-110,v+=20,70,"Project Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  //nk EditField(-110,v+=20,25,"Payment Terms",Normal,PayDeal,false,PDSClass);
  //nk EditField(-110,v+=20,70,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  
  
 /* Tile(tilenr,130,false,tilenr,Members); tilenr = tilenr + 1;
  h=120; h2=300; v=6;
  EditField(h,v,-40,"Members",Normal,Members,false,UserSClass);
  label = UserDefined("PRVc","Leader");
  if (IsEnterprise) then begin
    if (blank(label)) then begin label = "Project Manager 1";end;
  end else begin
    if (blank(label)) then begin label = "Project Manager";end;
  end;
  EditField(h,v+=20,70,label,Normal ,Leader,false,UserSClass);
  EditField(h2,v,-210,"Name",ViewOnly,LeaderName,false,0);
  if (IsEnterprise) then begin
    label = UserDefined("PRVc","Leader2");
    if (blank(label)) then begin label = "Project Manager 2";end;
    EditField(h,v+=20,70,label,Normal ,Leader2,false,UserSClass);
    EditField(h2,v,-210,"Name",ViewOnly,Leader2Name,false,0);
    label = UserDefined("PRVc","Leader3");
    if (blank(label)) then begin label = "Project Manager 3";end;
    EditField(h,v+=20,70,label,Normal ,Leader3,false,UserSClass);
    EditField(h2,v,-210,"Name",ViewOnly,Leader3Name,false,0);
    label = UserDefined("PRVc","Leader4");
    if (blank(label)) then begin label = "Project Manager 4";end;
    EditField(h,v+=20,70,label,Normal ,Leader4,false,UserSClass);
    EditField(h2,v,-210,"Name",ViewOnly,Leader4Name,false,0);
    label = UserDefined("PRVc","Leader5");
    if (blank(label)) then begin label = "Project Manager 5";end;
    EditField(h,v+=20,70,label,Normal ,Leader5,false,UserSClass);
    EditField(h2,v,-210,"Name",ViewOnly,Leader5Name,false,0);
  end;
  v = 26;
  if (HasSalesman) then begin
    EditField(-100,v=26,-40,"#Salesman#",Normal,PrSalesMan,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
    EditField(-100,v+=20,-40,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
  end;*/
  
  Tile(tilenr,130,false,tilenr,Members); tilenr = tilenr + 1;
  h=120; h2=300; v=6;
  EditField(h,v,70,"Project Manager",Normal,PRMan,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,PRManName,false,0);
  
  EditField(h,v+=20,70,"Supplier 1",Normal,Suppl1,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl1Name,false,0);
  EditField(h,v+=20,70,"Supplier 2",Normal,Suppl2,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl2Name,false,0);
  EditField(h,v+=20,70,"Supplier 3",Normal,Suppl3,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl3Name,false,0);
  EditField(h,v+=20,70,"Supplier 4",Normal,Suppl4,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl4Name,false,0);
  EditField(h,v+=20,70,"Supplier 5",Normal,Suppl5,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl5Name,false,0);
  EditField(h,v+=20,70,"Supplier 6",Normal,Suppl6,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl6Name,false,0);
  EditField(h,v+=20,70,"Supplier 7",Normal,Suppl7,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl7Name,false,0);
  EditField(h,v+=20,70,"Supplier 8",Normal,Suppl8,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl8Name,false,0);
  EditField(h,v+=20,70,"Supplier 9",Normal,Suppl9,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl9Name,false,0);
  EditField(h,v+=20,70,"Supplier 10",Normal,Suppl10,false,VESClass);
  EditField(h2,v,-210,"Name",ViewOnly,Suppl10Name,false,0);
  
  //Tile(tilenr,121,true,tilenr,Math); tilenr = tilenr + 1;
  /*if (IsEnterprise) then begin
    StaticText(36,v=14,"Downpayment Invoices Only",false); // and Retentions
    MatrixBegin(4,v+=25,-32,-20,PRRowType,299);
//  StaticText(36,v-5,"Date",false);
//  StaticText(105,v-5,"Inv.No.",false);
//  StaticText(165,v-5,"Sum",false);
//  StaticText(255,v-5,"Sign",false);
//  StaticText(305,v-5,"Comment",false);
    MatCol(1,32,"Type",0,RowType,false,SetSClass);
    MatCol(1,120,"Phase",0,PRStage,false,PRStageSClass);

    MatCol(1,170,"Date",0,PlanDate,false,PasteCurDate);
    MatColTL(1,250,"Inv. No.",0,-1,ViewOnly,-1,InvNr,false,0);
    MatCol(1,320,"Sum/Retn %",0,ValStr,false,0);
    MatCol(1,390,"Sign",0,Person,false,UserSClass);
    MatCol(1,440,"Comment",0,Comment,false,0);
    MatCol(1,-120,"Inv. Status",0,InvFlag,false,SetSClass);

  end else begin
    StaticText(36,v=65,"Downpayment Invoices Only",false); // and Retentions
    MatrixBegin(4,v+=25,-32,-20,PRRowType,299);
    MatCol(1,30,"Date",0,PlanDate,false,PasteCurDate);
    MatColTL(1,100,"Inv. No.",0,-1,ViewOnly,-1,InvNr,false,0);
    MatCol(1,180,"Sum/Prc",0,ValStr,false,0);
    MatCol(1,250,"Sign",0,Person,false,UserSClass);
    MatCol(1,300,"Comment",0,Comment,false,0);
    MatCol(1,-120,"Inv. Status",0,InvFlag,false,SetSClass);
  end;
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;*/
  //if (IsEnterprise) then begin
  //  Tile(tilenr,110,false,tilenr,InvoiceTime); tilenr = tilenr + 1;
    /*h=140; v=16;
    ButtonFrame(h=40,vm=v,180,5,"Invoice Times");
    RadioButton(h,v    ,0,0,"One Row Total",InvoiceTime);
    RadioButton(h,v+=16,1,0,"By _Groups",InvoiceTime);
    RadioButton(h,v+=16,2,0,"By _Items",InvoiceTime);
    RadioButton(h,v+=16,3,0,"By _Transactions",InvoiceTime);
    RadioButton(h,v+=16,4,0,"By Items/_Person",InvoiceTime);
    ButtonFrame(h+=200,v=vm,180,5,"Invoice Purchases");
    RadioButton(h,v    ,0,0,"One Row Total",InvoicePurch);
    RadioButton(h,v+=16,1,0,"By _Groups",InvoicePurch);
    RadioButton(h,v+=16,2,0,"By _Items",InvoicePurch);
    RadioButton(h,v+=16,3,0,"By _Transactions",InvoicePurch);
    RadioButton(h,v+=16,4,0,"By Items/_Person",InvoicePurch);
    Tile(tilenr,110,false,tilenr,InvoiceStock); tilenr = tilenr + 1;
    h=140; v=16;
    ButtonFrame(h=40,vm=v,180,4,"Invoice #Stocked# Items");
    RadioButton(h,v    ,0,0,"One Row _Total",InvoiceStock);
    RadioButton(h,v+=16,1,0,"By _Groups",InvoiceStock);
    RadioButton(h,v+=16,2,0,"By _Items",InvoiceStock);
    RadioButton(h,v+=16,3,0,"By _Transactions",InvoiceStock);
    ButtonFrame(h+=200,v=vm,180,5,"Invoice Materials");
    RadioButton(h,v    ,0,0,"One Row Total",InvoiceMaterial);
    RadioButton(h,v+=16,1,0,"By _Groups",InvoiceMaterial);
    RadioButton(h,v+=16,2,0,"By _Items",InvoiceMaterial);
    RadioButton(h,v+=16,3,0,"By _Transactions",InvoiceMaterial);
    RadioButton(h,v+=16,4,0,"By Items/_Person",InvoiceMaterial);*/
  //end;
  //Tile(tilenr,260,false,tilenr,CustOrdNr); tilenr = tilenr + 1;
  /*h=140; v=6;
  EditField(h=430,v,25,"Payment Terms",Normal,PayDeal,false,PDSClass);
  EditField(h,v+=20,-40,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  EditField(h,v+=20,-40,"E-mail",Normal,Email,false,0);
  EditField(h,v+=20,70,"First Invoice Date",Normal ,NoInvBefore,false,PasteCurDate);
  if (HasLanguages) then begin
    EditField(h,v+=20,70,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=20,70,"Max. Retention",Normal,MaxRetSum,false,0);
  end;
  if (HasLocalization("FIN")) then begin
    EditField(h,v+=20,135,"Delivery Site Code",Normal,DeliverySiteCode,false,0);
    EditField(h,v+=20,135,"Work Site Number",Normal,WorkSiteNumber,false,0);
  end;
  CheckBox(h,v+=40,0,"Do Not Invoice",StopInvoicing);
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Use WIP",UseWIP);
  end;
  ButtonFrame(h=40,vm=(v=25),275,13,"Put On Invoice");
  if (IsEnterprise) then begin
    CheckBox(h,v,0,"#Time Sheets#/Activities: Separate Inv. Row",InvSepTB);
    v = v + 16;
    CheckBox(h,v,0,"Purch. Invs/Expenses: Separate Inv. Row",InvSepPB);
    v = v + 16;
  end;
  CheckBox(h,v ,0,"Project Code",PRCodeOnInv);
  CheckBox(h,v+=16,0,"Project Description",PRNameOnInv);
  CheckBox(h,v+=16,0,"Project Text",PRTextOnInv);
  CheckBox(h,v+=16,0,"Project Leader",PRLeaderOnInv);
  CheckBox(h,v+=16,0,"Contact",PRContOnInv);
  CheckBox(h,v+=16,0,"Period from First to Last Project Trans. Invoiced",PeriodOnInv);
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Include Average Price on Time",TimeAvgPriOnInv);
    CheckBox(h,v+=16,0,"Include Quantity on Time",TimeAvgQtyOnInv);
    CheckBox(h,v+=16,0,"Include Average Price on Purchase",PurcAvgPriOnInv);
    CheckBox(h,v+=16,0,"Include Quantity on Purchase",PurcAvgQtyOnInv);
  end else begin
    CheckBox(h,v+=16,0,"Include Average Price on Time & Materials",PurcAvgPriOnInv);
    CheckBox(h,v+=16,0,"Include Quantity on Time & Materials",PurcAvgQtyOnInv);
  end;
  CheckBox(h,v+=16,0,"Items Per Day",ItemPerDay);
  EndFrame;
  if (HasModTS and IsEnterprise==false) then begin
    ButtonFrame(h,v+=70,275,5,"Invoice");
    RadioButton(h,v    ,0,0,"One Row Total",InvoicePurch);
    RadioButton(h,v+=16,1,0,"By _Groups",InvoicePurch);
    RadioButton(h,v+=16,2,0,"By _Items",InvoicePurch);
    RadioButton(h,v+=16,3,0,"By _Transactions",InvoicePurch);
    RadioButton(h,v+=16,4,0,"By Items/_Person",InvoicePurch);
  end;*/
  Tile(tilenr,220,false,tilenr,Text0); tilenr = tilenr + 1;
  EditField(h=80,v=6,-40,"Text",Normal,Text0,false,0);
  EditField(h,v+=20,-40,"",Normal,Text1,false,0);
  EditField(h,v+=20,-40,"",Normal,Text2,false,0);
  EditField(h,v+=20,-40,"",Normal,Text3,false,0);
  EditField(h,v+=20,-40,"",Normal,Text4,false,0);
  EditField(h,v+=20,-40,"",Normal,Text5,false,0);
  EditField(h,v+=20,-40,"",Normal,Text6,false,0);
  EditField(h,v+=20,-40,"",Normal,Text7,false,0);
  EditField(h,v+=20,-40,"",Normal,Text8,false,0);
  EditField(h,v+=20,-40,"",Normal,Text9,false,0);
  SpecialMenu("Project Info",'I',2,"ProInvPRD");
  SpecialMenu("Project Status",'r',9,"ProStatRnPRD");
  SpecialMenu("Open Project Budget",' ',6,"OpenTBBUPRD");
  if (IsEnterprise) then begin
    SpecialMenu("Open Project Schedule",' ',8,"OpenPRSchedulePRD");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModSL) then begin
    SpecialMenu("Downpayment Invoice",' ',0,"PRDownPayDsm");
  end;
  if (HasObjects) then begin
    SpecialMenu("Object",'o',1,"CreateObjPRDsm");
  end;
  if (IsEnterprise) then begin
    SpecialMenu("Project Schedule",' ',7,"CreatePRScheduleFromPRD");
  end;
  SpecialMenu("Quotation",'q',3,"DoQTFromPRD");
  if (HasStandardCRM) then begin
//    SpecialMenu("Activity",'c',4,"CreateActFromPRD");
  end;
  SpecialMenu("Project Budget",' ',5,"DoTBBUFromPRD");
  end;
  EndWindow;
end;

window VIDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr;
  Integer f,flipnr;
  Integer pos;

  WindowBegin("#Purchase Invoice#",VIDClass,CGview,-);
  SetWRect(20,80,950,460);
  if (IsEnterprise==false) and (HasModNL==false) then begin
  end else begin
    Sizeable(-1,-1,0,0);
  end;
  UseView(VIVc);
  //  FormName(PrintVID);
  ActiveFieldOnNew("VECode");
  if (IsEnterprise==false) then begin
    if (IsBooks and IsStandardProduct==false) then begin
      AutoSizeWindow(false);
    end;
    v = 6; h = 90; h2 = 260; h3 = 460; h4=-120; vs = 20;
    if (HasVATZone or ((HasMultiCurrency or HasBase2) and (HasModNL or HasIncomeAndExpenseBook))) then begin
      Tile(0,74,false,"",VECode);
    end;
    if (HasNumberSeries) then begin
      EditField(h,v,80,"No.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,v,80,"No.",Normal,SerNr,false,0);
    end;
    EditField(h2,v,-40,"Name",Normal,VEName,false,0);

    EditField(h,vm=(v+=20),80,"#Supplier#",Normal,VECode,false,VESClass);
    EditField(h2,v,80,"Invoice Date",Normal,InvDate,false,PasteCurDate);
    CheckBox(-80,v,0,"OK",OKFlag);
    if (HasModNL) then begin
      EditField(h3,v,-100,"Reference",Normal,RefStr,false,0);
    end;
    if (HasVATZone) then begin
      tilenr = 1;
      TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
      TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
      if (HasMultiCurrency or HasBase2) then begin
        TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
      end;
      TileButton(tilenr,"Misc"); tilenr = tilenr + 1;
      tilenr = 1;
      Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
      v = 6;
    end else begin
      if (HasMultiCurrency or HasBase2) and (HasModNL or HasIncomeAndExpenseBook) then begin
        tilenr = 1;
        TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
        TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
        TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
        tilenr = 1;
        Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + vs;
      end;
    end;
    vm = v;
    EditField(h,v,80,"#Supp.# Inv. No.",Normal,InvoiceNr,false,0);
    EditField(h,v+=vs,80,"Total",Normal,PayVal,true,0);
    EditField(h,v+=vs,80,"#VAT#",Normal,VATVal,true,0);
    EditField(h2,v=vm,22,"Pay. Terms",Normal,PayDeal,false,PDSClass);
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      EditField(h2,v+=vs,80,"Trans. Date",Normal,TransDate,false,PasteCurDate);
    end;
    EnterSkip(Math);
    EditField(h2,v+=vs,80,"Due Date",Normal,DueDate,false,0);
    v = vm;
    EditField(h3,v,90,"Credit of Invoice",Normal,CredInv,false,APSClass);
    if (HasLanguages) then begin
      EditField(h4,v,80,"Language",Normal,LangCode,false,LangSClass);
    end;
    EditField(h3,v+=vs,90,"#Sort Code#",Normal,SortCode,false,0);
    if (HasObjects) then begin
      EditField(h4,v,80,"Objects",Normal,Objects,false,ObjSClass);
    end;
    EditField(h3,v+=vs,-40,"Bank Account",Normal,BankAcc,false,0);
    if (HasLocalization("POL")) then begin
      EditField(h2,v+=vs,80,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
    end;
    EditField(h2,v+=vs,-40,"Comment",Normal,Comment,false,0);
    if (HasModNL or HasIncomeAndExpenseBook or HasModTS) then begin
      if (HasVATZone or HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,330,false,tilenr,Math); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + 2*vs;
      end;
      BlockLoad(CYb);
      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        MatrixBegin(10,v,-50,-32,-,99);
      end else begin
        MatrixBegin(10,v,-27,-32,-,99);
      end;
      MatTypedRow(stp);
      MatOverStrike(ovst);
      flipnr = 0;
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kInvoiceRowTypeNormal,24,"Account",0,AccNumber,false,AccSClass);
      Flip(flipnr); flipnr = flipnr + 1;
      if (HasObjects) then begin
        MatCol(t=kInvoiceRowTypeNormal,90,"Objects",0,Objects,false,ObjSClass);
        MatCol(t,180,"Description",0,Comment,false,0);
      end else begin
        MatCol(t,90,"Description",0,Comment,false,0);
      end;
      MatCol(t,-130,"Amount",0,Sum,true,0);
      /*if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin// Edit ************************** Wednesday, 15 July 2015 10:11:01
        MatCol(t,-35,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-35,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;*/

      MatText(t=kInvoiceRowTypePrepayment,24,"Prepayment Number",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
      MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the #VAT# sum, Recipe holds the date of prepaym. */
      MatCol(t,-70,"",0,VATVal,true,0);

      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t = kInvoiceRowTypeNormal;
        if (HasAdvancedStock) then begin
          MatCol(t,pos,"Order Type",0,OrderType,false,0);
          MatCol(t,-360,"#Stock# Type",0,StockType,false,SetSClass);
        end else begin
          MatCol(t=1,pos,"Description",0,Comment,false,0);
        end;
        MatCol(t,-260,"Amount",0,Sum,true,0);
        MatCol(t,-190,"Item",0,Item,false,INSClass);
        MatCol(t,-130,"Qty",0,qty,true,0);
        if (HasModTS) then begin
          MatCol(t,-100,"Project",0,PRCode,false,PRSClass);
        end;
        if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
          MatCol(t,-30,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
        end else begin
          MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        end;
        MatText(3,270,"",true);
      end;
      InsertRowTest;
      DeleteRowTest;
      RowMenuBegin("");
      RowMenuItem(0,"Balance",'=','=',0,"BalanceVIDsm");
      EndRowMenu;
      EndMatrix;
      vs = 20;
//      v = 18;//canoot be set to 18 on windows
      if (flipnr>2) then begin
        for (f=1;f<flipnr;f=f+1) begin
          VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
          v = v + vs;
        end;
      end;
      EditField(-140,-20,-40,"Calculated #VAT#",ViewOnly,CalcVATVal,true,0);
      if (HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
        h1 = h + 20;
        v = 6;
        EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin  
            EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
          if (HasBase2) then begin  
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
          end;    
        end else begin
          EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
          EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
        end;
      end;
      if (HasVATZone) then begin
        Tile(tilenr,120,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 20;
        v = VATZoneButtonsLabelsENG(h,v,170,16);
      end;
      SpecialMenu("Balance",'=',0,"BalanceVIDsm");
      SpecialMenu("#Purchase Invoice# Status",'r',2,"VIInfoVIDsm");
      if (HasModNL) then begin
        SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromVI");
      end;
      if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
        SpecialMenu("Connect to Prepayment",' ',6,"ConnectToPrepayVIDsm");
      end;
      SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
      if (HasModCL) then begin
        SpecialMenu("Cash Out",' ',1,"DoCLOutFromVID");
      end;
    end else begin
      if (HasMultiCurrency or HasBase2) then begin
        EditField(h,v+=vs,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h,v+vs,50,"Base Cur. 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h,v+vs,50,"Base Cur.",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin  
            EditField(h,v+(vs*2),50,"Base Cur. 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
          if (HasBase2) then begin  
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
          end;    
        end else begin
          EditField(h,v+=vs,50,"Base Cur. 1",Normal,BaseRate1,true,0);
          EditField(h,v+=vs,50,"Base Cur. 2",Normal,BaseRate2,true,0);
        end;
      end;
      SpecialMenu("Invoice Status",'r',2,"VIInfoVIDsm");
      if (HasModNL) then begin
        SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromVI");
      end;
      if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
        SpecialMenu("Connect to Prepayment",' ',6,"ConnectToPrepayVIDsm");
      end;
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    SpecialMenu("#Credit Note#",' ',15,"CreateCreditNoteVIDsm");
    if (HasModCL) then begin
      SpecialMenu("Cash Out",' ',8,"DoCLOutFromVID");
    end;
    if (HasModNL and HasMultiCurrency) then begin
      SpecialMenu("Internal Invoice",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasModNL) then begin
      SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionVIsm");
    end;
  end else begin
    BlockLoad(CYb);
    vs = 20;
    Tile(0,94,false,"",InvDate);
    if (IsEnterprise) then begin
      h = 75; h2 = 260; h3 = 530;
    end else begin
      h = 90; h1 = 90; h2 = 270; h3 = 470; h4=-110;
    end;
    if (HasNumberSeries) then begin
      EditField(h,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,vm=(v=6),95,"No.",Normal,SerNr,false,0);
    end;
    EditField(h,v+=vs,95,"#Supplier#",Normal,VECode,false,VESClass);
    EnterSkip(PayVal);
    EditField(h2,v=vm,-40,"Name",Normal,VEName,false,0);
    if (IsEnterprise) then begin
      EditField(h2,vm=(v+=20),95,"Hold Amount",Normal,HoldSum,true,0);
    end else begin
      EditField(h2,v+=vs,80,"Invoice Date",Normal,InvDate,false,PasteCurDate);
      EditField(h3,v,90,"Reference",Normal,RefStr,false,0);
    end;
    CheckBox(h4=-100,v,0,"OK",OKFlag);
    if (IsEnterprise) then begin
      EditField(h,v+=vs,95,"TOTAL",Normal,PayVal,true,0);
      EditField(h2,v,95,"#VAT#",Normal,VATVal,true,0);
    end;
    tilenr = 1;
    TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
    TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
      if (HasLocalization("UKR")) then begin
        TileButton(tilenr,"#VAT# Rate"); tilenr = tilenr + 1;
      end;
      TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
      TileButton(tilenr,"Accounts"); tilenr = tilenr + 1;
      TileButton(tilenr,"Inv. Address"); tilenr = tilenr + 1;
    end;
    tilenr = 1;
    Tile(tilenr,90,false,tilenr,InvDate); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
      vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
      EditField(h1,vm=(v=6),82,"Invoice Date",Normal,InvDate,false,PasteCurDate);
      EditField(h1,v+=vs,25,"Payment Terms",Normal,PayDeal,false,PDSClass);//PDSClass
      EditField(h1,v+=vs,82,"Transaction Date",Normal,TransDate,false,PasteCurDate);
      EditField(h1,v+=vs,82,"Due Date",Normal,DueDate,false,0);
      if (HasLocalization("POL")) then begin
        EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
      end;
    end else begin
      EditField(h,v=6,80,"#Supp.# Inv. No.",Normal,InvoiceNr,false,0);
      EditField(h,v+=vs,80,"TOTAL",Normal,PayVal,true,0);
      EnterSkip(PayDeal);
      EditField(h,v+=vs,80,"#VAT#",Normal,VATVal,true,0);
    end;
    if (IsEnterprise) then begin
      EditField(h2,v=vm,135,"#Supp.# Inv. No.",Normal,InvoiceNr,false,0);
      EditField(h2,v+=vs,135,"Signers",Normal,OKPersons,false,UserSClass);
      EditField(h2,v+=vs,135,"Objects",Normal,Objects,false,ObjSClass);
      EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
    end else begin
      EditField(h2,v=6,22,"Pay. Terms",Normal,PayDeal,false,PDSClass);
      EnterSkip(Math);
      EditField(h2,v+=vs,80,"Trans. Date",Normal,TransDate,false,PasteCurDate);
      EditField(h2,v+=vs,80,"Due Date",Normal,DueDate,false,0);
    end;
    if (IsEnterprise) then begin
      EditField(h3,v=vm,82,"Receiving Date",Normal,RcvDate,false,PasteCurDate);
      EditField(h3,v+=vs,82,"Discount Date",Normal,RebDate,false,PasteCurDate);
      EditField(h3,v+=vs,82,"Sett. Discount",Normal,RebVal,true,0);
      EditField(h3,v+=vs,82,"Credit of Invoice",Normal,CredInv,false,APSClass);
    end else begin
      EditField(h3,v=6,90,"Credit of Invoice",Normal,CredInv,false,APSClass);
      EditField(h3,v+=vs,90,"Bank Account",Normal,BankAcc,false,0);
      EditField(h3,v+=vs,90,"#Sort Code#",Normal,SortCode,false,0);
      v = 6;
      if (HasLanguages) then begin
        EditField(h4,v,90,"Language",Normal,LangCode,false,LangSClass);
        v = v + vs;
      end;
      if (HasObjects) then begin
        EditField(h4,v,90,"Objects",Normal,Objects,false,ObjSClass);
        v = v + vs;
      end;
    end;
    EnterSkip(Math);
    if (HasAdvancedAccounting) then begin
      CheckBox(h4,v=6,0,"On Hold",Closed);
      if (StandardHansa==false) then begin
        CheckBox(h4,v+=16,0,"Prel. Booking",PrelBook);
      end;
    end;
    Tile(tilenr,130,true,tilenr,Math); tilenr = tilenr + 1;
    EditField(140,-21,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasWithholdingTax) then begin
      if (StandardHansa==false) then begin
        EditField(270,-20,70,"Withh. Tax",Normal,WithHoldingTax,true,0);
      end;
    end;
    if (HasExtTax) then begin
      EditField(410,-20,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end;
    EditField(-120,-20,70,"Calculated #VAT#",ViewOnly,CalcVATVal,true,0);
  //  SoftEditField(-144,-21,70,"Subtotal",ViewOnly,"NettVal",true,0,M4Val,255);
    EnterSkip(Math);
  //  CheckBox(20,-21,0,"OK",OKFlag);
    h=4;
    if (HasModNL) then begin
      if (IsEnterprise) then begin
        MatrixBegin(h,v=24,-50,-24,-,299);
      end else begin
        MatrixBegin(h,v=24,-27,-24,-,99);
      end;
      MatTypedRow(stp); //??
      MatOverStrike(ovst);
      flipnr = 0;
      Flip(flipnr); flipnr = flipnr + 1;
      //MatCol(t=kInvoiceRowTypeNormal,32,"A/C",0,AccNumber,false,AccSClass);// Edit ************************** Monday, 13 July 2015 11:01:38
      MatCol(t=kInvoiceRowTypeNormal,32,"Item",0,Item,false,INSClass);// Edit ************************** Monday, 13 July 2015 11:01:39
      /*if (HasObjects) then begin// Edit ************************** Wednesday, 15 July 2015 10:16:53
        MatCol(t,90,"Objects",0,Objects,false,ObjSClass);
      end;*/
      MatText(t=6,32,"Prepayment Number",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
      MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the #VAT# sum, Recipe holds the date of prepaym. */
      MatCol(t,-70,"",0,VATVal,true,0);

      MatText(t=kInvoiceRowTypeDownpayment,32,"Down Payment",true);
      MatColTL(t,122,"",0,-1,ViewOnly,0,Item,true,0);
      MatColTL(t,208,"",0,-1,ViewOnly,0,qty,true,0);
      MatCol(t,268,"",0,Comment,false,0);
//      MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
//      MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
      MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0);
      if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-100,"",0,AccNumber,false,AccSClass);
        MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-90,"",0,AccNumber,false,AccSClass);
        MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
      end;

      MatText(t=kInvoiceRowTypeRetention,32,"Retention",true);
      MatCol(t,100,"",0,Comment,false,0);
      if (HasProjects) then begin
        MatCol(t,-340,"Project",0,PRCode,false,PRSClass);
      end;
      MatCol(t,-210,"Account",0,AccNumber,false,AccSClass);
      MatCol(t,-110,"Sum",0,Sum,true,0);
      /*if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-30,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;*/
      MatText(t=kInvoiceRowTypeWithholdingTax,32,"Withholding Tax",true);
      MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
      MatCol(t,172,"",0,AccNumber,false,AccSClass);
      MatCol(t,292,"",0,Sum,true,0);
      MatCol(t,392,"",0,Comment,false,0);
      Flip(flipnr); flipnr = flipnr + 1;
      t = 1; pos = 180;
      /*if (HasAdvancedAccounting) then begin// Edit ************************** Wednesday, 15 July 2015 10:12:32
        MatCol(t,pos,"Short.",0,ACShort,false,ACShortSClass);
        pos = pos + 60;
      end;*/
      if (HasObjects) then begin	
      	
        //MatCol(t,90,"Objects",0,Objects,false,ObjSClass);
        MatCol(t,90,"Extras",0,Extras,false,ExtSClass);
        MatCol(t,150,"Project",0,Prj,false,ObjPrjSClass);// Edit ************************** Wednesday, 15 July 2015 10:28:18
        MatCol(t,230,"Expences",0,Exp,false,ObjExpSClass);// Edit ************************** Wednesday, 15 July 2015 10:28:19
        MatCol(t,290,"Supplier",0,Supp,false,ObjSuppSClass);// Edit ************************** Wednesday, 15 July 2015 10:28:19
        MatCol(t,350,"Foundation",0,Found,false,ObjFoundSClass);//Edit---------------Vitalii 14:15 04.08.2015
        MatCol(t,410,"Location",0,Loc,false,ObjLocSClass);// Edit ************************** Wednesday, 15 July 2015 10:28:19
      end;
      MatCol(t,470,"Suppl. Name",0,SupName,false,0);
      MatCol(t,600,"Description",0,Comment,false,0);
      MatCol(t,-80,"Amount",0,Sum,true,0);// Edit ************************** Wednesday, 15 July 2015 10:15:50
      /*if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-30,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;*/
    //  MatCol(t,-30,"TT",0,TaxTemplateCode,false,VATCodeSClass);
      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t=1;
        if (HasObjects) then begin	
        	MatCol(t,90,"Objects",0,Objects,false,ObjSClass);// Edit ************************** Wednesday, 15 July 2015 10:18:14
    		end;
        if (HasAdvancedStock) then begin
          //MatCol(t,pos,"Order Type",0,OrderType,false,0);
          //MatCol(t,-360,"#Stock# Type",0,StockType,false,SetSClass);
        end else begin
          MatCol(t=1,pos,"Description",0,Comment,false,0);
        end;
        MatCol(t,-260,"Amount",0,Sum,true,0);
        MatCol(t,-190,"A/C",0,AccNumber,false,AccSClass);// Edit ************************** Monday, 13 July 2015 11:01:21
        //MatCol(t,-190,"Item",0,Item,false,INSClass);// Edit ************************** Monday, 13 July 2015 11:01:23
        MatCol(t,-130,"Qty",0,qty,true,0);
        if (HasModTS) then begin
          MatCol(t,-100,"Project",0,PRCode,false,PRSClass);
        end;
       /* if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
          MatCol(t,-30,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
        end else begin
          MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        end;*/
        MatText(3,270,"",true);
      end;
      if (HasSimAccruals) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kInvoiceRowTypeNormal,140,"Description",0,Comment,false,0);
        MatCol(t,-260,"Amount",0,Sum,true,0);
        MatCol(t,-180,"#N/L# Accrual",0,PeriodCode,false,AutSimPerSClass);
        MatCol(t,-80,"#VAT#",0,VATVal,true,0);
      end;
      if (HasAdvancedStock or HasSerialNumbers) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kInvoiceRowTypeNormal,140,"Description",0,Comment,false,0);
        MatCol(t,-350,"Item",0,Item,false,INSClass);
        if (HasSerialNumbers) then begin
          MatColTL(t,-250,"Serial No.",0,-1,ViewOnly,-1,SerialNr,false,0);
        end;
        MatCol(t,-130,"Qty",0,qty,true,0);
        if (HasAdvancedStock) then begin
          MatColTL(t,-70,"Price Var.",0,-1,ViewOnly,-1,VarianceAmount,false,0);
        end;
      end;
      if (HasModAT2) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kInvoiceRowTypeNormal,140,"Description",0,Comment,false,0);
        MatCol(t,-300,"Asset No.",0,InventoryNr,false,AT2UnitSClass);
        MatCol(t,-150,"Asset Trans. Type",0,AssetTransType,false,SetSClass);
      end;
      InsertRowTest;
      DeleteRowTest;
//      RowMenuBegin("");
//      EndRowMenu;
      EndMatrix;
      vs = 20;
      v = 18;
      if (flipnr>2) then begin
        for (f=1;f<flipnr;f=f+1) begin
          VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
          v = v + vs;
        end;
      end;
    end;

    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
    if (IsEnterprise) then begin
      if (HasLocalization("SVK,UKR")) then begin
        Tile(tilenr,70,false,tilenr,VATFrRate); tilenr = tilenr + 1;
        vs = 20;
        EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
        EditField(h,v+vs,50,"Base Currency 1",Normal,VATBaseRate1,true,0);
        EditField(h,v+(vs*2),50,"Base Currency 2",Normal,VATBaseRate2,true,0);  
        EditField(h2=295,v,50,"#VAT# Rate",Normal,VATFrRate,true,0);
        RateField(h3=360,v,50,":",Normal,"VATToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"VATToRateB2",true,h3+60,v+14,"Base Currency 2",false);           
      end;
      Tile(tilenr,110,false,tilenr,PRCode); tilenr = tilenr + 1;
      vs = 20; h1 = 110; h2 = 290; h3 = 550; h4 = -100;
      if (StandardHansa==false) then begin
        EditField(h1,v=vm,82,"Factoring",Normal,VEFactoring,false,VESClass);
        EditField(h1,v+=vs,82,"Branch",ViewOnly,BranchID,false,0);
      end else begin
        EditField(h1,v=vm,82,"Branch",ViewOnly,BranchID,false,0);
      end;
      EditField(h1,v+=vs,82,"#Supp.# Cur. Sum",Normal,SupCurVal,false,0);
      EditField(h1,v+=20,82,"Statistical Value",Normal,StatVal,true,0);
      EditField(h1,v+=vs,-20,"Comment",Normal,Comment,false,0);
      EditField(h2,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
      if (HasSalesGroup) then begin
        EditField(h2,v+=vs,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
        EditField(h2+160,v,80,"Org. #Supp.#",ViewOnly,OrgVE,false,0);
      end;
      EditField(h2,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
      EditField(h2,v+=vs,80,"Creditors A/C",Normal,APAcc,false,AccSClass);
      CheckBox(h3,v=6,0,"#Supp.# Info on Trans.",APonTR);
      if (HasLocalization("PRT")==false) then begin
        CheckBox(h3,v+=16,0,"Self Billing",SelfBilling);
      end;
      if (HasLocalization("ARG")) then begin
        CheckBox(h3,v+=16,0,"Fiscal Invoice",FiscalFlag);
      end;
      Tile(tilenr,90,false,tilenr,POSerNr); tilenr = tilenr + 1;
      EditField(h1,v=vm,82,"P/Order No.",ViewOnly,POSerNr,false,0);
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,82,"P/O Process No.",Normal,POCQStatNr,false,POCQStatSClass);
        EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
        if (HasLocalization("ARG")) then begin
          EditField(h1,v+=vs,82,"CAE Expiry",Normal,CAEExpiry,false,PasteCurDate);
        end;
      end;
      EditField(h2,v=vm,135,"Bank Code",Normal,BankCode,false,BankSClass);
      EditField(h2,v+=vs,135,"Bank Account",Normal,BankAcc,false,VEBankAccSClass);
      EditField(h2,v+=vs,135,"#Sort Code#",Normal,SortCode,false,0);
      if (HasLocalization("ARG")) then begin
        EditField(h2,v+=vs,135,"CAE",Normal,CAE,false,0);
      end;
      v = vm;
      if (HasLocalization("ARG,BOL")) then begin
        EditField(h3,v,-20,"Tax Authority ID",Normal,TaxAuthID,false,0);
        EditField(h3,v+=vs,-20,"Control Code",Normal,TaxAuthIDCC,false,0);
      end;
      EditField(h3,v+=vs,-20,"Barcode",Normal,BarCode,false,0);
      EditField(h3,v+=vs,-20,"Payment Code",Normal,PaymentCode,false,PaymentCodeSClass);
  /*
    EditField(h2,v,30,"#Supp.# #VAT#-Code",Normal,VEVatCode,false,VATCodeSClass);
    EditField(h3,v,80,"Official Ser. No.",Normal,OfficialSerNr,false,0);
  */
      Tile(tilenr,250,false,tilenr,Addr1); tilenr = tilenr + 1;
      label = UserDefined("CUVc","InvAddr0");
      if (blank(label)) then begin label = "Invoice"; end;
      EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
      label = UserDefined("CUVc","InvAddr1");
      if (blank(label)) then begin label = "Address"; end;
      EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
      label = UserDefined("CUVc","InvAddr2");
      EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
      label = UserDefined("CUVc","InvAddr3");
      EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
      label = UserDefined("CUVc","InvAddr4");
      EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
      EditField(h,vm=(v+=vs),80,"Country",Normal,InvCountry,false,CountrySClass);
      if (HasApprovals) then begin
        SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*      
        ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
        RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
        RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
        RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
        RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
        RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
        RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/        
        v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
      end else begin
        v = VATZoneButtonsLabelsENG(h3=290,v=vm+20,170,16);
      end;
      EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
      EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
      if (HasLocalization("HRV,SVN")) then begin 
        EditField(h2,v+=vs,50,"Legal Form",ViewOnly,VELegalForm,false,0);
      end;
      EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
      EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
    end;
    SpecialMenu("Balance",'=',0,"BalanceVIDsm");
    SpecialMenu("To Excel",'E',20,"ExcelVIDsm");
    SpecialMenu("Acceptance/delivery report",'A',20,"AcceptDelVIDsm");
    if (HasModNL) then begin
      SpecialMenu("Invoice Status",'r',2,"VIInfoVIDsm");
    end;
    if (HasModTS) then begin
      SpecialMenu("Add Retention",' ',25,"RetentionLineVIDsm");
    end;
    if (HasWithholdingTax) then begin
      SpecialMenu("Add Withholding Tax",' ',26,"WithholdingLineVIDsm");
    end;
    if (HasEInvoicing) then begin
      SpecialMenu("Open E-#Purchase Invoice# pdf",' ',13,"OpenVEIVPDFDsm");
    end;
    if (HasModNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromVI");
    end;
    if (HasAdvancedAccounting) then begin
      SpecialMenu("Open Preliminary #NL# Trans.",' ',13,"OpenTRFromVI2");
    end;
    if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
      SpecialMenu("Connect to Prepayment",' ',6,"ConnectToPrepayVIDsm");
    end;
    if (HasModIN and HasAdvancedAccounting) then begin
      if (StandardHansa==false) then begin
        SpecialMenu("Not Reconciled POs",' ',11,"PUNotReconVIDsm");
      end;
      SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
    end;
    if (HasTaxMatrix) then begin
      SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixVIDsm");
    end;
    if (HasModCL) then begin
      SpecialMenu("Print Cash IN-OUT",' ',3,"PrintCashInOutVIDsm");
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"VISendforAcceptanceVIDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM) then begin
//      SpecialMenu("Activity",'c',4,"ActFromVIDsm");
    end;
    if (HasModAT2) then begin
      SpecialMenu("Asset",' ',7,"CreateAT2FromVI");
    end;
    if (HasModCL) then begin
      SpecialMenu("Cash Out",' ',8,"DoCLOutFromVID");
    end;
    SpecialMenu("#Credit Note#",' ',15,"CreateCreditNoteVIDsm");
    if ((HasModNL and HasMultiCurrency) and (StandardHansa==false)) then begin
      SpecialMenu("Internal Invoice",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("UKR")) then begin
      SpecialMenu("First Event",' ',10,"FirstEventVIDsm");
    end;
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasModNL) then begin
      SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionVIsm");
    end;
  end;
  EndWindow;
end;




window BudgetsHistLClass:1			//Edit----------------------Dima  13.07.2015
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Budgets History",BudgetsHistLClass,CGmlist,-);
  SpawnClass(BudgetsHistDClass);
  SetWRect(64,80,700,298);
  Sizeable(-1,-1,0,0);
  UseView(BudgetsHistVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,    "Project",PRCode,false,MainKey);
  RlCol(100,100,"Version",Version,false);
  RlColKey(145,145,"Date",TransDate,false,TransDate);
  RlColKey(210,210,"Name",PRName,false,PRName);
  RlColKey(-220,-220,"Cust.",CustCode,false,CustCode);
  RlColKey(-160,-160,"Rec. Date",CreateDate,false,CreateDate);
  RlCol(-85,-35,"Total",TotSum,true);
  SearchField("Search");
  EndWindow;
end;


window BudgetsHistDClass:1			//Edit----------------------Dima  13.07.2015
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,t,v,vm,vs;
  Integer tnr;

  WindowBegin("Project Budget",BudgetsHistDClass,CGview,-);
  SetWRect(20,80,640,410);
  Sizeable(-1,-1,0,0);
  UseView(BudgetsHistVc);
  vs=20; h=100; h2=260; h1=50; h3 = 600;
  Tile(0,90,false,"",PRCode);
  EditField(h,v=6,80, "Project",ViewOnly,PRCode,false,PRSClass);
  EditField(h2,v,200, "Description",ViewOnly,PRName,false,0);
  EditField(h3,v,100, "Record Date",ViewOnly,CreateDate,false,0);
  EditField(h,v+=vs,80, "Customer",ViewOnly,CustCode,false,CUSClass);
  EditField(h2,v,200, "Name",ViewOnly,CustName,false,0);
  EditField(h3,v,100, "Record Time",ViewOnly,CreateTime,false,0);
  EditField(h,v+=vs,80, "Trans. Date",ViewOnly,TransDate,false,PasteCurDate);
  EditField(h2,v,200, "Version",ViewOnly,Version,false,0);
  EditField(h3,v,100, "User",ViewOnly,User,false,0);
  EnterSkip(Math);
  tnr = 1;
  TileButton(tnr,"Items"); tnr = tnr + 1;
  TileButton(tnr,"Members"); tnr = tnr + 1;
  tnr = 1;
  Tile(tnr,120,true,tnr,Math); tnr = tnr + 1;
  v=6; h = 20;
  MatrixBegin(h,vm=(v+=16),-50,-56,-,999);
  MatTypedRow(stp);
  Flip(0);
  MatText(t=9,30,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t,-140,"Sum",0,Sum,true,0);
  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=17,30,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=18,30,"Quartal",true);// Edit ************************** Friday, 22 May 2015 10:12:52
  MatCol(t,100,"",0,Spec,false,0);// Edit ************************** Friday, 22 May 2015 10:13:17
  MatCol(1,30,"Item",0,ArtCode,false,CLCorspSClass);// Edit ************************** Thursday, 18 June 2015 17:57:24
  MatCol(1,100,"Extras",0,Extras,false,ExtSClass);
  MatCol(1,150,"Suppl",0,VECode,false,VESClass);
  MatCol(1,200,"Name",0,VEName,false,0);
  MatCol(1,h=-370,"Foundation",0,ExtraObj,true,ObjFoundSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,30,"Item",0,ArtCode,false,INSClass);
  MatCol(t,100,"Person",0,EMCode,false,UserSClass);
  MatCol(t,200,"Description",0,Comment,false,0);
  MatCol(t=1,h+=60,"Description",0,Comment,false,0);
  Flip(1);
  MatCol(t,-160,"Month Sum",0,MonthSum,true,0);
  MatCol(t,-80,"Quart Sum",0,Price,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,-285,"Price",0,Price,true,0);
  MatCol(t,-215,"%",0,Discount,true,0);
  MatCol(t,-175,"Sum",0,Sum,true,0);
  MatCol(t,-100,"Phase",0,PRStage,false,PRStageSClass);
  MatCol(t,-50,"Sign",0,PRStageSign,false,UserSClass);
  Flip(2);
  MatCol(t=1,-110,"Qty",0,Qty,true,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  if (IsEnterprise) then begin
    //v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
    EditField(63,-25,40,"Currency",ViewOnly,CurncyCode,false,CurncyCodeSClass);
    EditField(210,-45,80, "Sum Time",ViewOnly,SumTime,true,0);
    EditField(210,-25,80, "Sum Materials",ViewOnly,SumMaterial,true,0);
    EditField(400,-45,80, "Sum #Stocked#",ViewOnly,SumStocked,true,0);
    EditField(400,-25,80, "Sum Purchases",ViewOnly,SumOther,true,0);
  end;
  EditField(580,-45,80, "Budget Markup",ViewOnly,Markup,true,0);
  EditField(580,-25,80, "Total Sum",ViewOnly,TotSum,true,0);  
  
 
  Tile(tnr,200,false,tnr,Members); tnr = tnr + 1;

  h=100;
  EditField(h,vm=(v=6),-170,"Project Members",ViewOnly,Members,false,0);
  EditField(h,v+=vs,50,"Project Manager",ViewOnly,PRLeader,false,0);
  if (HasSalesman) then begin
    EditField(h2,v=vm+vs,50,"#Salesman#",ViewOnly,SalesMan,false,UserSClass);
  end;
  if (HasApprovals) then begin
    //SoftEditField(h3=570,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    ButtonFrame(h,v+=60,123,6,"Approval Status");
    RadioButton(h,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateNotRequested,0,"Not Requested",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
  end;

  EndWindow;
end;

window VILClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos;

  WindowBegin("#Purchase Invoices#",VILClass,CGmlist,-);
  SetWRect(20,80,900,350);
  Sizeable(-1,-1,0,0);
  SpawnClass(VIDClass);
  UseView(VIVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Invoice Date",InvDate,false,InvDate);
  pos = 191;
  if (HasmodPO) then begin
    RlColKey(pos,pos,"PO. No.",POSerNr,false,POSerNr);
    pos = pos + 60;
    RlColKey(pos,pos,"#Supp.# Inv. No.",InvoiceNr,false,InvoiceNr);
  end else begin
    RlColKey(pos,pos,"#Supp.# Inv. No.",InvoiceNr,false,InvoiceNr);
  end;
  if (HasLocalization("ARG,MEX")) then begin
    pos = pos + 120;
  end else begin
    pos = pos + 120;
  end;
  RlColKey(pos,pos,"#Supplier#",VECode,false,VECode);
  pos = pos + 70;
  RlColKey(pos,pos,"Name",VEName,false,VEName);
  //RlCol(-170,-170,"Salesman",SalesMan,false);
  RlColKey(-170,-170,"Salesman",SalesMan,false,SalesMan);//Edit----------------------Dima  07.08.2015
  if (HasMultiCurrency) then begin
    if (AcceptanceStatusColumnTest("VIVc")) then begin
      CalculatedColumn(-150,-150,"Appr.","VILClassAcceptanceStatus",false);
    end;
    RlColKey(-110,-110,"Total",PayVal,true,PayVal);
    RlCol(-39,-39,"",CredMark,true);
    RlCol(-30,-30,"Cur.",CurncyCode,true);
  end else begin
    RlColKey(-90,-90,"Total",PayVal,true,PayVal);
    RlCol(-10,-10,"",CredMark,true);
  end;
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Search");
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    RowMenuItem(0,"OK",'G','G',4312,"OKVILsm");
    RowMenuItem(1,"#Purchase Invoice# Status",'r','r',4300,"VIInfoVILsm");
    EndRowMenu;
  end else begin
    SpecialMenu("OK",'G',0,"OKVILsm");
    SpecialMenu("#Purchase Invoice# Status",'r',1,"VIInfoVILsm");
  end;
  EndWindow;
end;


window ImportIClass:1		// added ************ Dima, 19.11.2014
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs;
Integer i;
  WindowBegin("Update salesman in purchase invoices",ImportIClass,CGIcW,-);	//INImportIn()
  SetWRect(20,80,270,300);
  
  StaticText(50,20,"1. Export RHistVc register",false);
  StaticText(50,40,"2. Remove the first 9 rows(header) ",false);
  StaticText(50,60,"3. Import it with this function",false);

  EndWindow;
end;

window FixVIVcVClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Update Purch.Inv. Supplier Name",FixVIVcVClass,CGMnt,RcType);
  SetWRect(20,80,400,240);
  vs = 20;h = 130; v = 26;
  
  EndWindow;
end;

window FixTBBUrwObjectsVClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Update Objects in Budgets",FixTBBUrwObjectsVClass,CGMnt,RcType);
  SetWRect(20,80,400,240);
  vs = 20;h = 130; v = 26;
  
  EndWindow;
end;

window FixSuppliersVClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Update Suppliers",FixSuppliersVClass,CGMnt,RcType);
  SetWRect(20,80,400,240);
  vs = 20;h = 130; v = 26;
  
  EndWindow;
end;


window ContractsLClass:1		//Edit----------------------Dima  09.02.2016
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos;

  WindowBegin("Contracts",ContractsLClass,CGmlist,-);
  SetWRect(20,80,700,350);
  Sizeable(-1,-1,0,0);
  SpawnClass(ContractsDClass);
  UseView(ContractsVc);
  RecordList(4,17,-21,-39);

  RlColKey(4,4,"Code",SerNr,false,MainKey);
  RlColKey(70,70,"Supplier",VECode,false,VECode);
  RlColKey(120,120,"Name",VEName,false,VEName);
  RlColKey(-420,-420,"Number",Number,false,Number);
	RlCol(-340,-340,"StartDate",StartDate,false);
	RlCol(-270,-270,"EndDate",EndDate,false);
	RlColKey(-200,-200,"OK",OKFlag,false,OKFlag);
	RlColKey(-170,-170,"Approved",SignDate,false,SignDate);
	//RlColKey(500,500,"Description",Description,false,Description);
	RlColKey(-100,100,"Sum",TotalSum,false,TotalSum);

  SearchField("Search");
  EndWindow;
end;


window ContractsDClass:1		//Edit----------------------Dima  09.02.2016
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vs;

  h = 100;
  h2 = -170;
  vs = 25;
  WindowBegin("Contract",ContractsDClass,CGview,-);
  SetWRect(20,80,700,200);
	UseView(ContractsVc);
	//Sizeable(-1,-1,0,0);

	EditField(h,v=6,100,"Code",Normal,SerNr,false,0);
	EditField(h2,v,150,"Contract Number",Normal,Number,false,0);
	EditField(h,v+=vs,100,"Supplier",Normal,VECode,false,ObjSuppSClass);
	EditField(h+140,v,260,"Name",Normal,VEName,false,0);

	EditField(h,v+=30,400,"Description",Normal,Description,false,0);
  EditField(h,v+=30,400,"Description RUS",Normal,DescriptionRus,false,0);
  //EditFieldTL(h,v+=30,100,"Start Date",M4Date,Normal,0 ,StartDate,false,PasteCurDate);
	EditField(h,v+=30,100,"Start Date",Normal,StartDate,false,PasteCurDate);
	EditField(h+220,v,100,"Approval Date",Normal,SignDate,false,PasteCurDate);
	EditField(h,v+=vs,100,"End Date",Normal,EndDate,false,PasteCurDate);
	EditField(h+220,v,100,"Close Date",Normal,CloseDate,false,PasteCurDate);
	CheckBox(-100,v=90,0,"OK",OKFlag);
	CheckBox(-100,v+=vs,0,"Closed",Closed);

  EditField(h,v+=50,40,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
	EditField(h2+40,v,80,"Sum",Normal,TotalSum,false,0);

  
	EndWindow;
end;
 

window CUDClass:14
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,h5,l,v,vm,vm2,vs;
  string 255 label;
  record CUVc CUr;
  Integer wn,tilenr;
  record ModuleBlock Modb;

  BlockLoad(Modb);
  WindowBegin("Contact",CUDClass,CGview,-);
  DynamicWindow;
  SetWRect(20,80,800,441);
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  FormName(PrintCUD);

  wn = CurWindow;
  if (wn>0) then begin
    if (GetWindowClass(wn)=="CUDClass") then begin
      GetWindowRecord(wn,CUr);
    end;
  end;

  if (HasLocalization("EST,GBR,LVA")) then begin
    ActiveFieldOnNew("Code"); // dont change, otherwise automatic address lookup helper window wont show automatically //wns
                              // this should not be based on localization, but rather on if the
                              // address lookup is enabled, erik
  end else begin
    ActiveFieldOnNew("Name");
  end;
  if (HasMetroTestFeatures or GUIType!=kGUIMetro) then begin
    CommunicateButton;
  end;
  if (HasJewelleryInterface) then begin
    Tile(0,155,false,"",Code);
  end else begin
    Tile(0,95,false,"",Code);
  end;
  v = 6; h = 130; l=223; vs = 20; h1=410; h2 = 350; h3 = 430; h4 = 580; h5 = 460;
  EditField(h,v ,   95,"No.",Normal,Code,false,TSerSClass);
  EditField(h1,v,50,"Customer Category",Normal,CustCat,false,CCatSClass);
  //EditField(h,v+=vs,95,"Short",Normal,SearchKey,false,0);
  EditField(h1,v+=vs,50,"#Supplier# Category",Normal,VECat,false,VGSClass);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,95,"Title",Normal,Salutation1,false,0);
    EditField(h1,v,50,"Suffix",Normal,ANACode,false,0);
    EditField(h,v+=vs,h1-h+50,"First Name",Normal,Salutation2,false,0);
    EditField(h,v+=vs,h1-h+50,"Last Name",Normal,Salutation3,false,0);
    EditField(h,v+=vs,h1-h+50,"Display Name",Normal,Name,false,0);
  end else begin
    EditField(h,v,h1-h+50,"Name",Normal,Name,false,0);
  end;
  EditField(h,v+=vs,h1-h+50,"Name RUS",Normal,NameinDocument,false,0);
  CheckBox(h1+80,v=6,0,"C_ustomer",CUType);
  CheckBox(h1+80,v+=16,0,"#Supplier#",VEType);
  if (HasModHotel) then begin
    CheckBox(h1+80,v+=16,0,"Guest",GuestType);
  end;
  if (HasJewelleryInterface) then begin
    CheckBox(h1+80,v+=16,0,"No Mass Letters",NoLetterPosting);
    CheckBox(h1+80,v+=16,0,"No Mass Emailing",NoMailPosting);
    EditField(h1+120,v+=20,100,"Salesman",Normal,SalesMan,false,UserSClass);
  end;
  v=6;
  if (HasModHRM) then begin
    CheckBox(h1+180,v,0,"Employee",EmployeeType); v = v + 16;
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1+180,v,0,"Dealer",DealerType);
  end;
  CheckBox(h1+180,v+=16,0,"Lead",LeadType);
//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"CreditInfoCUDsm","Credit Info");
//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"UpdCustomerAddressCUDsm","Update Address");
  tilenr = 1;
  TileButton(tilenr,"Co_ntact"); tilenr = tilenr + 1;
  TileButton(tilenr,"Delivery"); tilenr = tilenr + 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Pricing"); tilenr = tilenr + 1;
  TileButton(tilenr,"Compan_y"); tilenr = tilenr + 1;
  TileButton(tilenr,"Accounts"); tilenr = tilenr + 1;
  TileButton(tilenr,"E-Records"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Web"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"C_omments"); tilenr = tilenr + 1;
  if (HasModHotel) then begin
    TileButton(tilenr,"Personal"); tilenr = tilenr + 1;
  end;
  if (StandardHansa==false) then begin
    if (GuiType==kGuiMetro) then begin//UGLY
      TileButton(tilenr,"Other"); tilenr = tilenr + 1;
    end else begin
      TileButton(tilenr,"User Defined"); tilenr = tilenr + 1;
    end;
  end;
  TileButton(tilenr,"Notes"); tilenr = tilenr + 1;
  if (CUr.CUType!=0 and HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,290,true,tilenr,InvAddr0); tilenr = tilenr + 1;
  v=6;
  //HalPushButton(h+120,v,h+120+100,v+20,"UpdCustomerAddressCUDsm","Update Address");
  v=v+10;
/*
  StaticText(h,v+13,"Invoice Address",false);
  label = UserDefined("CUVc","InvAddr0");
  EditField(h,v+=vs,-20,label,Normal,InvAddr0,false,0);
  label = UserDefined("CUVc","InvAddr1");
  EditField(h,v+=vs,-20,label,Normal,InvAddr1,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs,-20,label,Normal,InvAddr2,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs,-20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs,-20,label,Normal,InvAddr4,false,0);
*/


	EditField(h1,v,-20,"Beneficiary's bank",Normal,BeneficiaryBank,false,0);		//Edit----------------------Dima  09.02.2016
  EditField(h1,v+=vs,-20,"Routing number",Normal,RoutNum,false,0);
	EditField(h1,v+=vs,-20,"SWIFT",Normal,SWIFT,false,0);
	EditField(h1,v+=vs,-20,"Beneficiary",Normal,Beneficiary,false,0);
	EditField(h1,v+=vs,-20,"Beneficiary's account number",Normal,BeneficiaryAccNumber,false,0);
	EditField(h1,v+=vs,-20,"Correspondent Bank of the Beneficiary's Bank",Normal,CorrespBankOfBenef,false,0);
  EditField(h1,v+=vs,-20,"SWIFT Correspondent Bank",Normal,SWIFTCorrespBank,false,0);//Edit-------------------Vitalii 17:25 15.02.2016
	EditField(h1,v+=vs,-20,"Correspondent account number",Normal,CorrespondentAccNum,false,0);		//Edit----------------------Dima  09.02.2016

	v=v+30;

  //EditField(h,v+=vs,50,"Country",Normal,CountryCode,false,CountrySClass);//Edit-------------------Vitalii 16:18 18.02.2016
  EditField(h,v+=vs,50,"Nationality",Normal,Nationality,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h2-159,v,214,"",ViewOnly,InvCountryName,false,0);
    v = v + vs;
  end;  
  ButtonFrame(h2,v=v+20,100,2,"Sex");
  RadioButton(h2,v,0,0,"Male",Gender);
  RadioButton(h2,v+=17,1,0,"Female",Gender);
  
  StaticText(h+=-60,v+=30,"Address",false);
  EditField(h+=30,v+=vs,-20,"ENG",Normal,DelAddr0,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr2,false,0);
  EditField(h,v+=vs,-20,"RUS",Normal,DelAddr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0);
  h = h + 60;
  /*EditField(h1,v,-20,"Department",Normal,Department,false,0);
  EditField(h,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h1,v,-20,"Fax",Normal,Fax,false,0);
  EditField(h,v+=vs,150,"Alt Phone",Normal,AltPhone,false,0);
  EditField(h1,v,-20,"#Mobile#",Normal,Mobile,false,0);
  EditField(h,v+=vs,150,"Skype Name",Normal,SkypeName,false,0);
  EditField(h1,v,-20,"SIP",Normal,SIPCode,false,0);
  EditField(h,v+=vs,150,"E-mail",Normal,eMail,false,0);
  EditField(h1,v,-20,"Extension",Normal,Extension,false,0);
  EditField(h,v+=vs,150,"Primary Contact",Normal,Person,false,ContactSClass);
  EditField(h1,v,-20,"Web Site",Normal,wwwAddr,false,0);
  EditField(h,v+=vs,-20,"Classification",Normal,Classification,false,CClassSClass);
  */
  if (HasLocalization("CHN")) then begin
    EditField(h,v+=vs,150,"QQ Account Number",Normal,QQName,false,0);
    EditField(h1,v,-20,"Weibo Account Number",Normal,WeiboName,false,0);
  end;	
/*		//Edit----------------------Dima  09.02.2016
  RecordList2(10,v+=40,-30,-39,"ContactRelVc");
  RlColKey(4,4,"Code",ContactCode,false,ActCustContactCode);
  RlCol(55,55,"Title",ContactTitle,false);
  RlColKey(105,105,"Name",ContactName,false,ActCustContactName);
  RlCol(235,235,"Phone",ContactPhone,false);
  RlCol(335,335,"#Mobile#",ContactMobile,false);
  RlCol(435,435,"Job Title",JobTitle,false);
  RlCol(535,535,"E-mail",ContacteMail,false);
*/
//  RlCol(-1,-1,"",Invalid,true);
  Tile(tilenr,240,false,tilenr,DelCountry); tilenr = tilenr + 1;
  v=6;
  if (HasLocalization("GBR,LVA,EST,SWE")) then begin
    HalPushButton(h+120,v,h+120+100,v+20,"UpdDeliveryAddressCUDsm","Update Address");
  end;
  v=v+12;
  StaticText(h,v+13,"Delivery Address",false);
  label = UserDefined("CUVc","DelAddr0");
  EditField(h,v+=vs,-20,label,Normal,DelAddr0,false,0);
  label = UserDefined("CUVc","DelAddr1");
  EditField(h,v+=vs,-20,label,Normal,DelAddr1,false,0);
  label = UserDefined("CUVc","DelAddr2");
  EditField(h,v+=vs,-20,label,Normal,DelAddr2,false,0);
  label = UserDefined("CUVc","DelAddr3");
  EditField(h,v+=vs,-20,label,Normal,DelAddr3,false,0);
  label = UserDefined("CUVc","DelAddr4");
  EditField(h,v+=vs,-20,label,Normal,DelAddr4,false,0);
  EditField(h,v+=vs,50,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h2-159,v,203,"",ViewOnly,DelCountryName,false,0);
    v = v + vs;
  end;    
  EditField(h2+50,v,-20,"Order Comment",Normal,OrderComment,false,0);
  EditField(h,v+=vs,120,"Freight No.",Normal,FreightNr,false,0);
  EditField(h2+50,v,70,"Region",Normal,Region,false,RegionSClass);
  EditField(h,vm=(v+=vs),120,"Sales Del. Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h2+50,v,70,"Purchase Del. Terms",Normal,VEShipDeal,false,ShipDealSClass);
  EditField(h,v+=vs,120,"Sales Del. Mode",Normal,ShipMode,false,DMSClass);
  EditField(h2+50,v,70,"Purchase Del. Mode",Normal,VEShipMode,false,DMSClass);
  EditField(h,v+=vs,120,"Route",Normal,Sorting,false,DelRouteSClass);
/* these fields were used for securities trading, this module doesnt exist in hansa anymore */
/* Two of these fields are used in Russia and Ukraine */
//  EditField(h,vm=(v+=vs),120,"Securities Acc.",Normal,SecAccount,false,0);
//  EditField(h,v+=vs,120,"Bank Account",Normal,BankAccount,false,0);//xx
//  EditField(h,v+=vs,120,"Account Operator",Normal,AccOperator,false,BankSClass);//xx
//##  EditField(h,v+=vs ,70, "Com. Matrix",Normal,ComCode,false,ComSClass);
  ButtonFrame(h5+30,v=vm,150,2,"Delivery Date Based On");
  RadioButton(h5+30,v,0,0,"Current Date",DeliveryBasedOn);
  RadioButton(h5+30,v+=16,1,0,"Planned Delivery Date",DeliveryBasedOn);
  Tile(tilenr,190,false,tilenr,PayDeal); tilenr = tilenr + 1;
  EditField(h,v=6,25,"Sales Pay. Terms",Normal,PayDeal,false,PDSClass);
  EditField(h,v+=vs,80,"Sales Credit Limit",Normal,CreditLimit,true,0);
  EditField(h,v+=vs,80,"Sales Credit Limit Days",Normal,CreditLimitDays,false,0);
  EditField(h,v+=vs,80,"Their #Supp.# Code",Normal,TheirCode,false,0);
  EditField(h,v+=vs,80,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
//  EditField(h,v+=vs,80,"E-Invoice Address",Normal,ANACode,false,0);
  EditField(h,v+=2*vs,80,"Interest Rate",Normal,IntRate,false,0);
  EditField(h,v+=vs,80,"Creation Date",ViewOnly,DateCreated,false,0);
  EditField(h,v+=vs,80,"Main Partner",Normal,MainPartner,false,CUSClass);
  EditField(h2,v=6,25,"Purch. Pay. Terms",Normal,VEPayDeal,false,PDSClass);
  EditField(h2,v+=vs,80,"Purch. Credit Limit",Normal,VECreditLimit,true,0);
  EditField(h2,v+=vs,80,"Purch. Credit Limit Days",Normal,VECreditLimitDays,false,0);
  EditField(h2,v+=vs,80,"Their Customer Code",Normal,VECustID,false,0);
  EditField(h2,v+=vs,80,"Purch. Invoice From",Normal,VEInvoiceToCode,false,VESClass);
  EditField(h2,v+=vs,80,"Factoring",Normal,VEFactoring,false,VESClass);
  EditField(h2,v+=vs,80,"Min. Order Sum",Normal,MinOrdSum,false,0);
  EditField(h2,v+=vs,80,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,80,"Last Changed",Normal,DateChanged,false,0);
  CheckBox(h5,v=12,0,"Closed",blockedFlag);
  CheckBox(h5,v+=16,0,"On Hold",OnHoldFlag);
  CheckBox(h5,v+=16,0,"Reminders",RemndrFlag);
//  CheckBox(h5,v+=16,0,"Collection",ColectionFlag);
  CheckBox(h5,v+=16,0,"Interest",InterestFlag);
  CheckBox(h5,v+=16,0,"On Account",OnAccount);
  if (StandardHansa==false) then begin
    CheckBox(h5,v+=16,0,"No Factoring",NoFactoringFlag);
    CheckBox(h5,v+=16,0,"No Extra Tax",NoTax1);
    CheckBox(h5,v+=16,0,"Group Inv. Only",GroupInv);
    CheckBox(h5,v+=16,0,"Self Billing Customer",SelfBilling);
    CheckBox(h4,v=12,0,"EGO Customer",EGOFlag);
    CheckBox(h4,v+=16,0,"EDI Customer",EDIFlag);
    CheckBox(h4,v+=16,0,"Allow Login",AllowLogin);
//  CheckBox(h4,v+=16,0,"Allow FTP Access",FTPLogin);
    CheckBox(h4,v+=16,0,"Fiscal Invoices Only",FiscalFlag);
    CheckBox(h4,v+=16,0,"No Mass Letters",NoLetterPosting);
  end else begin
    CheckBox(h4,v=12,0,"No Mass Letters",NoLetterPosting);
  end;
  CheckBox(h4,v+=16,0,"No Mass Emailing",NoMailPosting);
  CheckBox(h4,v+=16,0,"No Environment Tax",NoRepa);
  if (StandardHansa==false) then begin
    CheckBox(h4,v+=16,0,"No Region Perceptions",NoTax2);
  end;
  if (HasLocalization("SWE")) then begin
    CheckBox(h4,v+=16,0,"F-Tax",FTax);
  end;
  Tile(tilenr,110,false,tilenr,PLCode); tilenr = tilenr + 1;
  EditField(h,v=6,  80,"Sales Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,80, "Price List",Normal,PLCode,false,PLDefSClass);
  EditField(h,v+=vs ,80, "Discount Matrix",Normal,RebCode,false,RebSClass);
  if (HasSalesman or HasSalesmanBonus) then begin
    EditField(h,v+=vs,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  end;
  EditField(h,v+=vs,80,"Default Items",Normal,CompItemCode,false,CompItemSClass);
  EditField(h2,v=6,80,"Purch. Currency",Normal,VECurncyCode,false,CurncyCodeSClass);
  EditField(h2,v+=2*vs ,80, "#Supp.# Disc. Matrix",Normal,VERebCode,false,RebSClass);
  if (HasSalesGroup) then begin
    EditField(h2,v+=vs,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
  end;
  ButtonFrame(h5,v=24,150,3,"Price Based On");
  RadioButton(h5,v,0,0,"Order Date",PriceBasedOn);
  RadioButton(h5,v+=16,1,0,"Planned Del. Date",PriceBasedOn);
  RadioButton(h5,v+=16,2,0,"#Despatch# Dates",PriceBasedOn);
  Tile(tilenr,180,false,tilenr,Comment); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs,-20,"Warning on Sales",Normal,WarnText1,false,0);
  EditField(h,v+=vs,-20,"Warning on Purchase",Normal,VEWarnText1,false,0);
  EditField(h,v+=vs,120,"#VAT Reg. No.#",Normal,VATNr,false,0);
  EditField(h2-20,v,120,"#Reg. No.# 1",Normal,RegNr1,false,0);
  ButtonFrame(h5+30,v+18,143,1,"Type");
  RadioButton(h5+30,v+18,0,0,"Company",CustType);
  RadioButton(h5+110,v+18,1,0,"Person",CustType);
  v = v + vs;
  EditField(h,v,120,"Country #VAT Reg. No.#",Normal,CountryVATNr,false,0);
  EditField(h2-20,v,120,"#Reg. No. 2#",Normal,RegNr2,false,RegDefSClass);
  EditField(h,v+=vs,120,"#VAT No.# Check Date",Normal,VATNrCheckDate,false,PasteCurDate);
  EditField(h2-20,v,120,"GLN",Normal,RecipientGLN,false,0);
  if (HasLocalization("HRV,SVN")) then begin 
    EditField(h,v+=vs,120,"Legal Form",Normal,LegalForm,false,CULegalFormSClass);
  end;
  EditField(h,v+=vs,20,"Sales #VAT# Code",Normal,VATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h+135,v,50,"Sales Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
  end;
  HalPushButton(h2-10,v,h2-10+100,v+20,"UpdCustomerAddressCUDsm","Update Address");
  EditField(h,v+=vs,20,"Purch. #VAT# Code",Normal,VEVATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h+135,v,50,"Purch. Tax Temp.",Normal,VETaxTemplateCode,false,TaxTemplateSClass);
  end;
  EditField(h,v+=vs,50,"Language",Normal,LangCode,false,LangSClass);
  if (HasLocalization("ARG")) then begin
    ButtonFrame(h+125,v+=20,177,4,"Tax Condition ");
    RadioButton(h+125,v,2,0,"Unscripted",TaxCondition);
    RadioButton(h+125,v+=16,0,0,"Local",TaxCondition);
    RadioButton(h+125,v+=16,1,0,"Multilateral Agreement",TaxCondition);
    RadioButton(h+125,v+=16,3,0,"Simplified Taxpaying Regimen",TaxCondition);
  end;  
  if (HasLocalization("BRA")) then begin
    EditField(h,v+=vs,120,"SUFRAMA Reg. No.",Normal,SuframaRegNr,false,0);
  end;
//  EditField(h,v+=vs,120,"Channel",Normal,WebServiceChannel,false,SetSClass);
  v = 130;
  v = VATZoneButtonsLabelsENG(h5+30,v,170,16);
  Tile(tilenr,130,false,tilenr,AccAP); tilenr = tilenr + 1;
  EditField(h,v=6,80,"Creditor A/C",Normal,AccAP,false,AccSClass);
  EditField(h,v+=vs,80,"Cost A/C",Normal,AccCost,false,AccSClass);
  EditField(h,v+=vs,80,"Cred. On Acc. A/C",Normal,OnAccAccAP,false,AccSClass);
  EditField(h,v+=vs,120,"Sales Objects",Normal,Objects,false,ObjSClass);
  EditField(h,v+=vs,120,"Purch. Objects",Normal,VEObjects,false,ObjSClass);
  EditField(h,v+=vs,50,"Payment Code",Normal,PaymentCode,false,PaymentCodeSClass);
  if (HasLocalization("HRV,HUN,SRB,SLV,SVN")) then begin
    ButtonFrame(h,v+=40,150,3,"Post Receipt #VAT#");
    RadioButton(h,v,0,0,"Default",IPBookVAT);
    RadioButton(h,v+=16,1,0,"Post #VAT#",IPBookVAT);
    RadioButton(h,v+=16,2,0,"Do not post #VAT#",IPBookVAT);
  end;
  EditField(h1,v=6,200,"IBAN Code",Normal,IBANCode,false,0);
  EditField(h1,v+=vs,-20,"Account Operator",Normal,AccOperator,false,BankSClass);
  EditField(h1,v+=vs,-20,"Bank Account",Normal,BankAccount,false,0);
  EditField(h1,v+=vs,-20,"Bank Account 2",Normal,Bank,false,0);
  EditField(h1,v+=vs,80,"#Sort Code#",Normal,SortCode,false,0);
  if (HasWithholdingTax) then begin
    EditField(h1,v+=vs,120,"Withholding Payment Modes",Normal,WithPayMode,false,PMSClass);
  end;
  if (HasLocalization("HRV,HUN,SRB,SLV,SVN")) then begin
    ButtonFrame(h1,v+=40,150,3,"Post Payment #VAT#");
    RadioButton(h1,v,0,0,"Default",OPBookVAT);
    RadioButton(h1,v+=16,1,0,"Post #VAT#",OPBookVAT);
    RadioButton(h1,v+=16,2,0,"Do not post #VAT#",OPBookVAT);
  end;  
  Tile(tilenr,170,false,tilenr,ANACode); tilenr = tilenr + 1;
  StaticText(h,v=20,"E-Invoices",true);
  EditField(h,vm=(v+=10),80,"E-Invoice Account",Normal,ANACode,false,0);
  EditField(h,v+=vs,80,"Alt. E-Invoice Account",Normal,eInvAlternativeAccount,false,0);

  ButtonFrame(h,v+=40,163,1,"Receiving Preference");
  RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Default",eInvRcvPref);
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"Electronic Invoice",eInvRcvPref);
  if (HasLocalization("FIN")==false) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paper Invoice",eInvRcvPref);
  end;  
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternal,0,"Internal Company",eInvRcvPref);
    EditField(h+130,v,30,"",Normal,eInvRcvToCompanyCode,false,Companies2SClass);
  end;
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceNone,0,"No Receiving",eInvRcvPref);
  EndFrame;
  if (HasLocalization("EST")) then begin
    ButtonFrame(h,v+=40,143,1,"Alternative Channel");
    RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Not used",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"Electronic Invoice",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paper Invoice",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"E-mail",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Internet Bank",eInvAltRcvPref);
    EndFrame;
  end;
  vm2 = v;

  CheckBox(h1,v=vm,0,"Don't Send Electronic Invoices",eInvStop);
  if (HasLocalization("FIN")==false) then begin
    CheckBox(h1,v+=16,0,"Electronic Invoices with pdf files",eInvAttachPDF);
    ButtonFrame(h1,v+=44,143,3,"Postage for Paper Invoice");
  end else begin
    ButtonFrame(h1,v+=60,143,3,"Postage for Paper Invoice");
  end;
  RadioButton(h1,v,2,0,"Default",eInvPostage);
  RadioButton(h1,v+=16,0,0,"Priority",eInvPostage);
  RadioButton(h1,v+=16,1,0,"Economy",eInvPostage);
  if (HasLocalization("EST")) then begin
    CheckBox(h1,v+=84,0,"Electronic Invoices in short notes",eInvShortNote);
  end;
  StaticText(h,v=(vm2+40),"E-Purchase Orders",true);
  ButtonFrame(h,v+=20,163,3,"Receiving Preference");
  RadioButton(h,v,kPORcvPreferenceNone,0,"None",ePORcvPref);
  RadioButton(h,v+=16,kPORcvPreferenceDefault,0,"Default",ePORcvPref);
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kPORcvPreferenceInternal,0,"Internal Company",ePORcvPref);
    EditField(h+130,v,30,"",Normal,ePORcvToCompanyCode,false,Companies2SClass);
  end;
  EndFrame;

  if (StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,WebConf); tilenr = tilenr + 1;
    EditField(h,vm=(v=6),120,"Web Conference",Normal,WebConf,true,0);
    EditField(h1,v,150,"Main Classification",Normal,MainDispGroup,false,WebNGProductCatSClass);
    EditField(h,v+=vs,120,"Web Start Page",Normal,WebStartPage,false,0);
    EditField(h1,v,150,"Display on the Web",Normal,WebDisplays,false,WebDisplaySClass);
    EditField(h,v+=vs,120,"Freight Code",Normal,FreightCode,false,WebFreightSClass);
    EditField(h1,v,150,"Web Object Type",Normal,WebOTCode,false,OTSClass);
  end;
  Tile(tilenr,170,false,tilenr,Comment0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Comment",Normal,Comment0,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"Courtesy Title",Normal,Title,false,CourtesyTitlesSClass);
  EditField(h,v+=vs,-20,"Job Title",Normal,JobDesc,false,JobTitleSClass);
  EditField(h,v+=vs,-20,"Salutation 1",Normal,Salutation1,false,0);
  EditField(h,v+=vs,-20,"Salutation 2",Normal,Salutation2,false,0);
  EditField(h,v+=vs,-20,"Salutation 3",Normal,Salutation3,false,0);
  if (HasModHotel) then begin
    Tile(tilenr,250,false,tilenr,DocType); tilenr = tilenr + 1;
    EditField(h,v=6,100,"Doc. Type",Normal,DocType,false,CUDocTypeSClass);
    EditField(h2,v,-20,"ID",Normal,PassportNr,false,0);
    EditField(h2,v+=vs,-20,"Name in Document",Normal,NameinDocument,false,0);
//  EditFieldTL(h,vm=(v+=20),100,"Nationality",M4StrSet,Normal,423,Nationality,false,StrSetSClass);
    EditField(h,vm=(v+=20),100,"Nationality",Normal,Nationality,false,CountrySClass);
    EditField(h,v+=20,100,"Birthday",Normal,BirthDate,false,PasteCurDate);
    EditField(h,v+=20,100,"Place of Birth",Normal,BirthPlace,false,0);
    EditField(h,v+=20,100,"Country of Birth",Normal,BirthCountry,false,CountrySClass);
    EditField(h,v+=20,100,"Profession",Normal,Profesion,false,0);
    EditField(h,v+=20,100,"Newspaper",Normal,Newspaper,false,NewspaperSClass);
    EditField(h,v+=20,100,"Passphrase",Normal,Passphrase,false,0);
    EditField(h,v+=vs,100,"Tour Operator",Normal,TourOperator,false,CUSClass);
    EditField(h,v+=vs,100,"Agent",Normal,Agent,false,CUSClass);
    EditField(h,v+=vs,100,"Def. Pay. Mode",Normal,DefGuestPayMode,false,PMSClass);
    EditField(h,v+=vs,100,"Def. Booking Org.",Normal,BookOrigin,false,BookOrgSClass);
    EditField(h,v+=vs,300,"Diet Remarks",Normal,DietRemarks,false,0);
    EditField(h,v+=vs,300,"Req. Remarks",Normal,RequirementRemarks,false,0);

    ButtonFrame(h2,v=vm+20,100,2,"Sex");
    RadioButton(h2,v,0,0,"Male",Gender);
    RadioButton(h2,v+=17,1,0,"Female",Gender);

    CheckBox(h2+130,v=vm+20,0,"Smoker",Smoking);
    CheckBox(h2+130,v+=17,0,"Blacklisted",Blacklist);

    ButtonFrame(h2,vm=(v+=40),100,4,"Marital Status");
    RadioButton(h2,v,0,0,"Single",MarStatus);
    RadioButton(h2,v+=17,1,0,"Married",MarStatus);
    RadioButton(h2,v+=17,2,0,"Divorced",MarStatus);
    RadioButton(h2,v+=17,3,0,"Widowed",MarStatus);

    ButtonFrame(h2=h2+130,v=vm,100,3,"Age Status");
    RadioButton(h2,v,1,0,"Child",AgeStatus);
    RadioButton(h2,v+=17,0,0,"Adult",AgeStatus);
    RadioButton(h2,v+=17,2,0,"Pensioner",AgeStatus);
  end;

  if (StandardHansa==false) then begin
    Tile(tilenr,270,false,tilenr,UserStr1); tilenr = tilenr + 1;
    v=6;h=180;
    label = UserDefined("CUVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v,-20,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("CUVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("CUVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("CUVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("CUVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("CUVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserVal1,false,0);
    end;
    label = UserDefined("CUVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserVal2,false,0);
    end;
    label = UserDefined("CUVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserVal3,false,0);
    end;
    label = UserDefined("CUVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,false,PasteCurDate);
    end;
    label = UserDefined("CUVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,false,PasteCurDate);
    end;
    label = UserDefined("CUVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,false,PasteCurDate);
    end;

    EditField(h,v+=vs,-20,"Address Books",Normal,AddressBooks,false,0);
  end;

  Tile(tilenr,500,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Notes",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (CUr.CUType!=0 and HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$CUDCLass_BIChart");
  end;

  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    if (UserCanReport("CustPSRn","",true)) then begin
      SpecialMenu("Customer Status",'e',0,"CUStatusCUDsm");
    end;
    if (UserCanReport("VEPSRn","",true)) then begin
      SpecialMenu("#Supplier# Status",'u',4,"VEStatusVEDsm");
    end;
    SpecialMenu("Link Existing Contact",' ',1,"AddContactCUDsm");
    SpecialMenu("New Contact",' ',1,"NewContactCUDsm");
    SpecialMenu("Activity",'c',2,"NewActCUDsm");
  end else begin
    if (UserCanReport("CustPSRn","",true)) then begin
      SpecialMenu("Customer Status",'e',0,"CUStatusCUDsm");
    end;
    if (UserCanReport("VEPSRn","",true)) then begin
      SpecialMenu("#Supplier# Status",'u',4,"VEStatusVEDsm");
    end;
    SpecialMenu("Link Existing Contact",' ',1,"AddContactCUDsm");
    SpecialMenu("Remove Linked Contact",' ',1,"DelContactCUDsm");
    SpecialMenu("Edit Linked Contact Data",' ',1,"EditContactCUDsm");
    SpecialMenu("Update Contact Persons",' ',6,"UpdContactAddrCUDsm");
    if (HasLocalization("ARG")) then begin
      SpecialMenu("Open Regional Perceptions",' ',1,"RPCUTaxDsm");
      SpecialMenu("Open #Supplier# Withholdings",' ',1,"WHVEDsm");
    end; //EMZ
    if (GuiType==kGuiCocoa) then begin
      SpecialMenu("Copy to local address book",' ',7,"CopyToLocalAddressBookDsm");
    end;
    if (GuiType==kGuiiPhone) then begin
      SpecialMenu("Change Password",' ',1,"ChangePasswdCUDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//    SpecialMenu("Activity",'c',2,"NewActCUDsm");
    SpecialMenu("Contact",' ',1,"NewContactCUDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("E-mail",'m',5,"NewMailCUDsm");
    end;
    SpecialMenu("Objects",' ',1,"CreateObjectCUDsm");
    SpecialMenu("Random Password Mail",' ',3,"RandomPassMailCUDsm");
  end;
  EndWindow;
end;

window CreateVIfromTBBUVClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Create Purchase Invoices from Project Budgets for month",CreateVIfromTBBUVClass,CGMnt,RcType);
  SetWRect(20,80,400,240);
  vs = 20;h = 150; v = 10;
  EditFieldTL(h,v,120,"Date for new Invoices",M4Date,Normal,0,d1,false,PasteCurDate);
  ButtonFrame(h=37,v+=40,120,2,"Select month for new Invoices");
  RadioButton(h,v,0,0,"Current",flags[1]);
  RadioButton(h,v+=16,1,255,"Previous",flags[1]);
  
  EndWindow;
end;

//Excel Reports ------------------------------------------------------------------------------------------------

window BudgetObjectsRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Budgets' Objects",BudgetObjectsRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f3,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=20,120,"Objects",Normal,f1,false,ObjSClass);
		EditField(h,v+=20,120,"Projects",Normal,f2,false,PRSClass);
		CheckBox(h+140,v,0,"without vendors",flags[5]);
		HalPushButton(h=50,v+=20,h+110,v+=20,"RunBudgetObjectsRn","Run Budgets' Objects");
	EndWindow;
end;

window ProjectFoundRClass:1
	wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Project Foundation Statistics",ProjectFoundRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=vs,120,"Foundation",Normal,f1,false,ObjFoundSClass);
		EditField(h,v+=vs,120,"Location",Normal,ObjStr,false,ObjLocSClass);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunProjectFoundRn","Run");
	EndWindow;
end;

window BudgetTotalRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Budget Total",BudgetTotalRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=vs,120,"Location",Normal,ObjStr,false,ObjLocSClass);
		CheckBox(h+140,v,0,"for print",flags[5]);
		
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunBudgetTotalRn","Run");
	EndWindow;
end;

window BudTotFoundRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Foundations Budgets Total 2016",BudTotFoundRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",ViewOnly,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunBudTotFoundRn","Run");
	EndWindow;
end;

window FoundPeopleStatRClass:1
	wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Foundation People Statistics 2016",FoundPeopleStatRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",ViewOnly,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=vs,120,"Foundation",Normal,f1,false,ObjFoundSClass);
		CheckBox(h+140,v,0,"without suppliers",flags[6]);
		//CheckBox(h+140,v,0,"only 4000 group",flags[5]);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunFoundPeopleStatRn","Run");
	EndWindow;
end;

window ProjFoundStatRClass:1
	wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Project Foundation Statistics 2016",ProjFoundStatRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=vs,120,"Foundation",Normal,f1,false,ObjFoundSClass);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunProjFoundStatRn","Run");
	EndWindow;
end;

window PrjSumRClass:1
	wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Project Summary 2016",PrjSumRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunPrjSumRn","Run");
	EndWindow;
end;

window ProjectStatRClass:1
	wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Project Statistics 2016",ProjectStatRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=vs,120,"Project",Normal,f1,false,PRSClass);
		//CheckBox(h+140,v,0,"for print",flags[5]);
    EditField(h+100,v+=vs,20,"Number of projects in one line",Normal,f3,false,0);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunProjectStatRn","Run");
	EndWindow;
end;

window ProjectFactRClass:1
	wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Projects Facts",ProjectFactRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=vs,120,"Group",Normal,f1,false,ITSClass);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunProjectFactRn","Run");
	EndWindow;
end;

window ExtSClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad,iPhone")
begin
  real v;
  Integer mwn;
  Boolean contf;
  
  WindowBegin("Paste Object",ExtSClass,CGslist,ObjView);
  DynamicWindow;
  SpawnClass(ObjDClass);
  UseView(ObjVc);
  Sizeable(-1,-1,0,0);
  SetWRect(220,80,600,298);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,    "Object",Code,false,ActSbstOTCode);
  RlColKey(201,201,"Name",Comment,false,ActSbstComment);
  SearchField("Search");
  EndWindow;
end;

window ProjectFactRClass:1
	wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
real h,v,vs,h1;
	WindowBegin("Projects Facts",ProjectFactRClass,CGother,RcType);
		SetWRect(20,80,400,250);
		v = 20; vs = 20; h = 120;
		EditField(h,v,120,"Year",Normal,f2,false,0);
		StaticText(h-6,v+32,"Quartals",true);
		CheckBox(h,v+=vs,0,"I",flags[1]);
		CheckBox(h+35,v,0,"II",flags[2]);
		CheckBox(h+70,v,0,"III",flags[3]);
		CheckBox(h+105,v,0,"IV",flags[4]);
		EditField(h,v+=vs,120,"Group",Normal,f1,false,ITSClass);
		HalPushButton(h=50,v+=vs,h+110,v+=vs,"RunProjectFactRn","Run");
	EndWindow;
end;

window FixVIVcDateRClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Change date in Purch.Inv.",FixVIVcDateRClass,CGRcW,RcType);
    SetWRect(20,80,400,240);
    vs = 20;h = 130; v = 26;
  
  EndWindow;
end;
