external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);
external function string 255 StrReplace(string,string,string);
external function integer GetQuartal(date);
external procedure GetObjs(string,string,var string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 50 TimeToString(time,string,boolean);
external function string 255 MonthName(Date);
external function val AbsoluteVal(val);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPMRow(string,var row PMBlock);
external function roundmode SetRoundModeD(Integer);

procedure ArraysCollect(record RcVc RepSpec, var array string ArtArrayWithoutGroups, var array string ProjArray, var array string ArtArrayWithGroups, var boolean PrjFoundf, var vector boolean isMotherProjVect)
BEGIN
	record ITVc ITr;
	record INVc INr;
	record PRVc PRr;
  record ObjVc Objr;
	integer i,j,k,kw,kwo,oldcomp;
	boolean TrHs,testf,foundf;
	string 100 tstr;
	
  PrjFoundf = true;
	kw = 0;
  resetloop(ITr);
  while(loopmain(ITr,1,true)) begin
    if ((RepSpec.f2=="2016" and right(ITr.Code,3)=="_16") or
        (RepSpec.f2=="2017" and right(ITr.Code,3)=="_17") or
        (RepSpec.f2=="2018" and right(ITr.Code,3)=="_18")) then begin
      ArtArrayWithGroups[kw] = ITr.Code;
      kw = kw + 1;
      resetloop(INr);
      INr.Group = ITr.Code;
      TrHs = true;
      while(loopkey("Group",INr,1,TrHs)) begin
        testf = true;
        if (INr.Group!=ITr.Code) then begin testf = false; TrHs = false; end;
        if (blank(INr.Objects)) then begin testf = false; end;
        if ((RepSpec.f2=="2016" and right(INr.Objects,3)!="_16") or
            (RepSpec.f2=="2017" and right(INr.Objects,3)!="_17") or
            (RepSpec.f2=="2018" and right(INr.Objects,3)!="_18")) then begin testf = false; end;
        if (testf) then begin
          tstr = INr.Objects;
          foundf = false;
          for (i=0;i<ArtArrayWithoutGroups.length;i=i+1) begin
            if (ArtArrayWithoutGroups[i]==tstr) then begin
              foundf = true;
            end;
          end; 
          if (!foundf) then begin
            ArtArrayWithoutGroups[kwo] = INr.Objects;
            kwo = kwo + 1;
            ArtArrayWithGroups[kw] = INr.Objects;
            kw = kw + 1;
          end;
        end;
      end;
    end;
  end;
	oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
  end;
  k = 0;
  resetloop(PRr);
  while(loopmain(PRr,1,true)) begin
		if ((GetYear(PRr.StartDate) & ""==RepSpec.f2) or (GetYear(PRr.EndDate) & ""==RepSpec.f2)) then begin
      switch (PRr.Code) begin
        case "2016.998":
          if (RepSpec.flags[5]==0) then begin
            goto L1;
          end;
        case "2017.998":
        if (RepSpec.flags[5]==0) then begin
          goto L1;
        end;
        case "2018.998":
        if (RepSpec.flags[5]==0) then begin
          goto L1;
        end;
      end;
			ProjArray[k] = PRr.Code;
			if blank(PRr.MotherCode) or (PRr.MotherCode=="") then begin
				isMotherProjVect[ProjArray[k]] = true;
			end else begin
				isMotherProjVect[ProjArray[k]] = false;
			end;
			k = k + 1;
L1:	end;
	end;
  resetcompany(oldcomp);
  
	if (k==0) then begin
		PrjFoundf = false;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(array string ArtArrayWithoutGroups, var array string ExtArr, var array string ArtSuppl, array string ProjArray, record RcVc RepSpec,
					var vector val QuartVect)
BEGIN
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record ITVc ITr;
  record INVc INr;
	record TRVc TRr;
	record MainVc Mainr;
	row TBBUVc TBBUrw;
	row TRVc TRrw;
	integer i,k,j,mtrw,PAi,ASi,EAi,oldcomp;
	boolean TrHs,testf,kTestf,TrHs2;
	string 20 group,extras,suppl;
  vector boolean SupplInArr,ExtInArr;
  val tmpval;
  record VIVc VIr;
  record OPVc OPr;
  record PDVc PDr;
  record BaseCurBlock bcur;
  record OPrsVc OPrsr;
  row VIVc VIrw;
  row OPVc OPrw,VIOPrw;
  row PMBlock PMrw;
  val sum,fr,to1,to2,br1,br2,opsum,trsum,paidsum;
  string 10 vicur,tstr;
  vector boolean ProjInArr,ArtInArr;
	
  ASi = 0;
  EAi = 0;
  for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
    ProjInArr[ProjArray[PAi]] = true;
  end;
  for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
    ArtInArr[ArtArrayWithoutGroups[j]] = true;
  end;
  
  oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
  end;
	for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin 
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
      if ((GetYear(PRr.StartDate) & ""==RepSpec.f2) or (GetYear(PRr.EndDate) & ""==RepSpec.f2)) then begin
				TBBUr.PRCode = PRr.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
					k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
            if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
              k = 1;
            end;
						kTestf = false;
						if ((RepSpec.flags[1]==1) and (k==1)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[2]==1) and (k==2)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[3]==1) and (k==3)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[4]==1) and (k==4)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[1]==1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
							kTestf = true;
						end;
						if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode) and nonblank(TBBUrw.ExtraObj) and (TBBUrw.ExtraObj==RepSpec.f1 or blank(RepSpec.f1)))) then begin
							if nonblank(TBBUrw.VECode) and !SupplInArr[TBBUrw.VECode] then begin
								SupplInArr[TBBUrw.VECode] = true;
								ArtSuppl[ASi] = TBBUrw.VECode;
								ASi = ASi + 1;
							end;
              if nonblank(TBBUrw.Extras) and !ExtInArr[TBBUrw.Extras] then begin
								ExtInArr[TBBUrw.Extras] = true;
								ExtArr[EAi] = TBBUrw.Extras;
								EAi = EAi + 1;
							end;
              INr.Objects = TBBUrw.ArtCode;
              if ReadfirstKey("Objects",INr,1,true) then begin
                ITr.Code = INr.Group;
              end else begin
                ITr.Code = TBBUrw.ArtCode;
              end;
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
              if nonblank(RepSpec.f4) then begin
                tmpval = TBBUrw.MonthSum;
              end else begin
                tmpval = TBBUrw.Sum;
              end;
              QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]] = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]] + tmpval;
              QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]] = QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]] + tmpval;
              
              QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";T"]                 = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";T"] + tmpval;
              QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";T"]                 = QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";T"] + tmpval;
              
              QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]]                       = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]] + tmpval;
              QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]]                       = QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & ProjArray[PAi]] + tmpval;
              
              QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";T"]                                       = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";T"] + tmpval;
              QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";T"]                                       = QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";T"] + tmpval;
              
              QuartVect[k & ";" & TBBUrw.ArtCode &                       ";" & ProjArray[PAi]]                       = QuartVect[k & ";" & TBBUrw.ArtCode &                       ";" & ProjArray[PAi]] + tmpval;
              QuartVect[    ";" & TBBUrw.ArtCode &                       ";" & ProjArray[PAi]]                       = QuartVect[    ";" & TBBUrw.ArtCode &                       ";" & ProjArray[PAi]] + tmpval;
              
              QuartVect[k & ";" & TBBUrw.ArtCode &                       ";T"]                                       = QuartVect[k & ";" & TBBUrw.ArtCode &                       ";T"] + tmpval;
              QuartVect[    ";" & TBBUrw.ArtCode &                       ";T"]                                       = QuartVect[    ";" & TBBUrw.ArtCode &                       ";T"] + tmpval;
              
              QuartVect[k & ";" & group &                                ";" & ProjArray[PAi]]                       = QuartVect[k & ";" & group &                                ";" & ProjArray[PAi]] + tmpval;
              QuartVect[    ";" & group &                                ";" & ProjArray[PAi]]                       = QuartVect[    ";" & group &                                ";" & ProjArray[PAi]] + tmpval;
              
              QuartVect[k & ";T;" & ProjArray[PAi]]                                                                  = QuartVect[k & ";T;" & ProjArray[PAi]] + tmpval;
              QuartVect[    ";T;" & ProjArray[PAi]]                                                                  = QuartVect[    ";T;" & ProjArray[PAi]] + tmpval;
              
              if nonblank(PRr.MotherCode) and (PRr.MotherCode!="") then begin
                QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & PRr.MotherCode] = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & PRr.MotherCode] + tmpval;
                QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & PRr.MotherCode] = QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ":" & TBBUrw.VECode & ";" & PRr.MotherCode] + tmpval;
                
                QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & PRr.MotherCode]                       = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & PRr.MotherCode] + tmpval;
                QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & PRr.MotherCode]                       = QuartVect[    ";" & TBBUrw.ArtCode & ":" & TBBUrw.VECode & ";" & PRr.MotherCode] + tmpval;
                
                QuartVect[k & ";" & TBBUrw.ArtCode &                       ";" & PRr.MotherCode]                       = QuartVect[k & ";" & TBBUrw.ArtCode &                       ";" & PRr.MotherCode] + tmpval;
                QuartVect[    ";" & TBBUrw.ArtCode &                       ";" & PRr.MotherCode]                       = QuartVect[    ";" & TBBUrw.ArtCode &                       ";" & PRr.MotherCode] + tmpval;
                
                QuartVect[k & ";" & group &                                ";" & PRr.MotherCode]                       = QuartVect[k & ";" & group &                                ";" & PRr.MotherCode] + tmpval;
                QuartVect[    ";" & group &                                ";" & PRr.MotherCode]                       = QuartVect[    ";" & group &                                ";" & PRr.MotherCode] + tmpval;
                
                QuartVect[k & ";T;" & PRr.MotherCode]                                                                  = QuartVect[k & ";T;" & PRr.MotherCode] + tmpval;
                QuartVect[    ";T;" & PRr.MotherCode]                                                                  = QuartVect[    ";T;" & PRr.MotherCode] + tmpval;
              end;
						end;
					end; 
				end;
			end;
		end;
	end;
  resetcompany(oldcomp);
  
  if (RepSpec.flags[7]==0) then begin
    resetloop(TRr);
    TRr.TransDate = RepSpec.sStartDate;
    TrHs = true;
    while (loopkey("TransDate",TRr,1,TrHs)) begin
      if (TRr.TransDate > RepSpec.sEndDate) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        k = 0;
        k = GetQuartal(TRr.TransDate);
        if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
          k = 1;
        end;
        mtrw = matrowcnt(TRr);
        for (i=0;i<mtrw;i=i+1) begin
          matrowget(TRr,i,TRrw);
          if (TRrw.ovst==0 and (mid(TRrw.AccNumber,0,1)=="5") and setinset(RepSpec.f1,TRrw.Objects)) then begin
            for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
              PRr.Code = ProjArray[PAi];
              ReadFirstMain(PRr,1,true);
              if(setinset(PRr.Objects,TRrw.Objects)) then begin
                for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
                  if (setinset(ArtArrayWithoutGroups[j],TRrw.Objects)) then begin
                    INr.Objects = ArtArrayWithoutGroups[j];
                    ReadfirstKey("Objects",INr,1,true);
                    group = INr.Group;
                    extras = "";
                    GetObjs("EXTRA",TRrw.Objects,extras);
                    if nonblank(extras) and !ExtInArr[extras] then begin
                      ExtInArr[extras] = true;
                      ExtArr[EAi] = extras;
                      EAi = EAi + 1;
                    end;
                    suppl = "";
                    GetObjs("SUPPL",TRrw.Objects,suppl);
                    if nonblank(suppl) and !SupplInArr[suppl] then begin
                      SupplInArr[suppl] = true;
                      ArtSuppl[ASi] = suppl;
                      ASi = ASi + 1;
                    end;
                    QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & ProjArray[PAi]]   = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & ProjArray[PAi]]   = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    
                    QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";T"]                   = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";T"] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";T"]                   = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";T"] - TRrw.CredVal + TRrw.DebVal;
                    
                    QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl &                ";" & ProjArray[PAi]]   = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl &                ";" & ProjArray[PAi]]   = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    
                    QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl &                ";T"]                   = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl & ";T"] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl &                ";T"]                   = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl & ";T"] - TRrw.CredVal + TRrw.DebVal;
                    
                    QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] &                              ";" & ProjArray[PAi]]   = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] &                              ";" & ProjArray[PAi]]   = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    
                    QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] &                              ";T"]                   = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ";T"] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] &                              ";T"]                   = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ";T"] - TRrw.CredVal + TRrw.DebVal;
                    
                    QuartVect[k & "Fact;" & group &                                                 ";" & ProjArray[PAi]]   = QuartVect[k & "Fact;" & group & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;" & group &                                                 ";" & ProjArray[PAi]]   = QuartVect[    "Fact;" & group & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    
                    QuartVect[k & "Fact;T;" & ProjArray[PAi]]                                                               = QuartVect[k & "Fact;T;" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[    "Fact;T;" & ProjArray[PAi]]                                                               = QuartVect[    "Fact;T;" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    
                    if nonblank(PRr.MotherCode) and (PRr.MotherCode!="") then begin
                      QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & PRr.MotherCode] = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & extras & ":" & suppl & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      
                      QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl &                ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl &                ";" & PRr.MotherCode] = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ":" & suppl & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      
                      QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] &                              ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & ArtArrayWithoutGroups[j] & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] &                              ";" & PRr.MotherCode] = QuartVect[    "Fact;" & ArtArrayWithoutGroups[j] & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      
                      QuartVect[k & "Fact;" & group &                                                 ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & group & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect[    "Fact;" & group &                                                 ";" & PRr.MotherCode] = QuartVect[    "Fact;" & group & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      
                      QuartVect[k & "Fact;T;" & PRr.MotherCode]                                                             = QuartVect[k & "Fact;T;" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect[    "Fact;T;" & PRr.MotherCode]                                                             = QuartVect[    "Fact;T;" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end else begin
    blockload(bcur);
    resetloop(VIr);
    VIr.InvDate = RepSpec.sStartDate;
    TrHs = true;
    while (loopkey("InvDate",VIr,1,TrHs)) begin
      testf = true;
      if (VIr.InvDate>RepSpec.sEndDate) then begin TrHs = false; testf = false; end;
      if (VIr.OKFlag==0) then begin testf = false; end;
      if (VIr.Invalid==1) then begin testf = false; end;
      if (testf and nonblank(RepSpec.f1)) then begin
        mtrw = matrowcnt(VIr);
        testf = false;
        for (i=0;i<mtrw;i=i+1) begin
          matrowget(VIr,i,VIrw);
          if (VIrw.Found==RepSpec.f1) then begin
            testf = true;
            i = mtrw;
          end;
        end;
      end;
      if (testf) then begin
        sum = 0;
        paidsum = 0;
        PDr.Code = VIr.PayDeal;
        if (ReadFirstMain(PDr,1,true)) then begin
          if (PDr.PDType==kInvoiceTypeCash) then begin
            if (VIr.CurncyCode==bcur.BaseCur1) then begin
              sum = VIr.PayVal;
              paidsum = VIr.PayVal;
            end else begin
              TRr.Number = VIr.SerNr;
              TRr.IntYc = VIYc;
              if (ReadFirstMain(TRr,2,true)) then begin
                mtrw = matrowcnt(TRr);
                for (i=0;i<mtrw;i=i+1) begin
                  matrowget(TRr,i,TRrw);
                  if (TRrw.ovst==0 and (TRrw.AccNumber==PDr.pdCashAcc)) then begin
                    sum = AbsoluteVal(TRrw.CredVal - TRrw.DebVal);
                    paidsum = VIr.PayVal;
                    i = mtrw;
                  end;
                end;
              end;
            end;
          end;
        end;
        if (sum==0) then begin
          resetloop(OPrsr);
          OPrsr.VINr = VIr.SerNr;
          TrHs2 = true;
          while (LoopKey("VIKey",OPrsr,1,TrHs2)) begin
            if (OPrsr.VINr<>VIr.SerNr) then begin TrHs2 = false; end;
            if (TrHs2) then begin
              if (OPrsr.TransType==kOPrsTransTypePayment) then begin
                OPr.SerNr = OPrsr.TransNr;
                if (ReadFirstMain(OPr,1,true)) then begin
                  if ((OPr.DoneFlag!=0) and (OPr.TransDate==OPrsr.TransDate)) then begin
                    mtrw = MatRowCnt(OPr);
                    GetPMRow(OPr.PayMode,PMrw);
                    for (i=0;i<mtrw;i=i+1) begin
                      MatRowGet(OPr,i,VIOPrw);
                      if ((VIOPrw.ovst==0) and (VIOPrw.VISerNr==VIr.SerNr) and (VIOPrw.stp==kPaymentRowTypeNormal)) then begin
                        i = mtrw;
                      end;
                    end;
                    opsum = 0;
                    for (i=0;i<mtrw;i=i+1) begin
                      MatRowGet(OPr,i,OPrw);
                      if ((OPrw.ovst==0) and (OPrw.BankCurncy==VIOPrw.BankCurncy) and (OPrw.stp==kPaymentRowTypeNormal)) then begin
                        opsum = opsum + OPrw.BankVal;
                      end;
                    end;
                    TRr.Number = OPr.SerNr;
                    TRr.IntYc = OPYc;
                    if (ReadFirstMain(TRr,2,true)) then begin
                      mtrw = matrowcnt(TRr);
                      trsum = 0;
                      for (j=0;j<mtrw;j=j+1) begin
                        matrowget(TRr,j,TRrw);
                        if (TRrw.ovst==0 and (TRrw.AccNumber==PMrw.AccNr) and (TRrw.Curncy==VIOPrw.BankCurncy)) then begin
                          trsum = trsum + AbsoluteVal(TRrw.CredVal - TRrw.DebVal);
                        end;
                      end;
                    end;
                    sum = sum + VIOPrw.BankVal/opsum*trsum;
                    paidsum = paidsum + VIOPrw.RecVal;
                  end;
                end;
              end;
            end;
          end;
        end;
        if (sum==0) then begin
          fr = 0;
          to1 = 0;
          to2 = 0;
          br1 = 0;
          br2 = 0;
          tstr = VIr.CurncyCode;
          GetFullCurncyRate(tstr,VIr.TransDate,fr,to1,to2,br1,br2);
          if (fr==0) or (fr==blankval) then begin fr = VIr.FrRate; end;
          if (br1==0) or (br1==blankval) then begin br1 = VIr.BaseRate1; end;
          if (br2==0) or (br2==blankval) then begin br2 = VIr.BaseRate2; end;
          if (to1==0) or (to1==blankval) then begin to1 = VIr.ToRateB1; end;
          if (to2==0) or (to2==blankval) then begin to2 = VIr.ToRateB2; end;
          sum = MulRateToBase1(tstr,VIr.PayVal,fr,to1,to2,br1,br2,SetRoundModeD(2));
          paidsum = VIr.PayVal;
        end;
        if (paidsum<VIr.PayVal) then begin
          fr = 0;
          to1 = 0;
          to2 = 0;
          br1 = 0;
          br2 = 0;
          tstr = VIr.CurncyCode;
          GetFullCurncyRate(tstr,VIr.TransDate,fr,to1,to2,br1,br2);
          if (fr==0) or (fr==blankval) then begin fr = VIr.FrRate; end;
          if (br1==0) or (br1==blankval) then begin br1 = VIr.BaseRate1; end;
          if (br2==0) or (br2==blankval) then begin br2 = VIr.BaseRate2; end;
          if (to1==0) or (to1==blankval) then begin to1 = VIr.ToRateB1; end;
          if (to2==0) or (to2==blankval) then begin to2 = VIr.ToRateB2; end;
          sum = sum + MulRateToBase1(tstr,(VIr.PayVal - paidsum),fr,to1,to2,br1,br2,SetRoundModeD(2));
        end;
        k = 0;
        k = GetQuartal(TRr.TransDate);
        if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
          k = 1;
        end;
        mtrw = matrowcnt(VIr);
        for (i=0;i<mtrw;i=i+1) begin
          matrowget(VIr,i,VIrw);
          PRr.Objects = VIrw.Prj;
          ReadFirstKey("Objects",PRr,1,true);
          if ((VIrw.Found==RepSpec.f1) or blank(RepSpec.f1)) and (ArtInArr[VIrw.Exp]) and (ProjInArr[PRr.Code]) then begin
            INr.Objects = VIrw.Exp;
            ReadfirstKey("Objects",INr,1,true);
            group = INr.Group;
            if nonblank(VIrw.Extras) and !ExtInArr[VIrw.Extras] then begin
              ExtInArr[VIrw.Extras] = true;
              ExtArr[EAi] = VIrw.Extras;
              EAi = EAi + 1;
            end;
            if nonblank(VIrw.Supp) and !SupplInArr[VIrw.Supp] then begin
              SupplInArr[VIrw.Supp] = true;
              ArtSuppl[ASi] = VIrw.Supp;
              ASi = ASi + 1;
            end;
            tmpval = VIrw.Sum/VIr.PayVal*sum;
            
            QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.Code] = QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.Code] + tmpval;
            QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.Code] = QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.Code] + tmpval;
            
            QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";T"]           = QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";T"] + tmpval;
            QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";T"]           = QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";T"] + tmpval;
            
            QuartVect[k & "Fact;" & VIrw.Exp & ":"                     & VIrw.Supp & ";" & PRr.Code] = QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Supp & ";" & PRr.Code] + tmpval;
            QuartVect[    "Fact;" & VIrw.Exp & ":"                     & VIrw.Supp & ";" & PRr.Code] = QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Supp & ";" & PRr.Code] + tmpval;
            
            QuartVect[k & "Fact;" & VIrw.Exp & ":"                     & VIrw.Supp & ";T"]           = QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Supp & ";T"] + tmpval;
            QuartVect[    "Fact;" & VIrw.Exp & ":"                     & VIrw.Supp & ";T"]           = QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Supp & ";T"] + tmpval;
            
            QuartVect[k & "Fact;" & VIrw.Exp &                                       ";" & PRr.Code] = QuartVect[k & "Fact;" & VIrw.Exp & ";" & PRr.Code] + tmpval;
            QuartVect[    "Fact;" & VIrw.Exp &                                       ";" & PRr.Code] = QuartVect[    "Fact;" & VIrw.Exp & ";" & PRr.Code] + tmpval;
            
            QuartVect[k & "Fact;" & VIrw.Exp &                                       ";T"]           = QuartVect[k & "Fact;" & VIrw.Exp & ";T"] + tmpval;
            QuartVect[    "Fact;" & VIrw.Exp &                                       ";T"]           = QuartVect[    "Fact;" & VIrw.Exp & ";T"] + tmpval;
            
            QuartVect[k & "Fact;" & group &                                          ";" & PRr.Code] = QuartVect[k & "Fact;" & group & ";" & PRr.Code] + tmpval;
            QuartVect[    "Fact;" & group &                                          ";" & PRr.Code] = QuartVect[    "Fact;" & group & ";" & PRr.Code] + tmpval;
            
            QuartVect[k & "Fact;T;" &                                                      PRr.Code] = QuartVect[k & "Fact;T;" & PRr.Code] + tmpval;
            QuartVect[    "Fact;T;" &                                                      PRr.Code] = QuartVect[    "Fact;T;" & PRr.Code] + tmpval;
            
            if nonblank(PRr.MotherCode) and (PRr.MotherCode!="") then begin
              QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.MotherCode] + tmpval;
              QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.MotherCode] = QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Extras & ":" & VIrw.Supp & ";" & PRr.MotherCode] + tmpval;
              
              QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Supp &                     ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & VIrw.Exp & ":" & VIrw.Supp & ";" & PRr.MotherCode] + tmpval;
              QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Supp &                     ";" & PRr.MotherCode] = QuartVect[    "Fact;" & VIrw.Exp & ":" & VIrw.Supp & ";" & PRr.MotherCode] + tmpval;
              
              QuartVect[k & "Fact;" & VIrw.Exp &                                       ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & VIrw.Exp & ";" & PRr.MotherCode] + tmpval;
              QuartVect[    "Fact;" & VIrw.Exp &                                       ";" & PRr.MotherCode] = QuartVect[    "Fact;" & VIrw.Exp & ";" & PRr.MotherCode] + tmpval;
              
              QuartVect[k & "Fact;" & group &                                          ";" & PRr.MotherCode] = QuartVect[k & "Fact;" & group & ";" & PRr.MotherCode] + tmpval;
              QuartVect[    "Fact;" & group &                                          ";" & PRr.MotherCode] = QuartVect[    "Fact;" & group & ";" & PRr.MotherCode] + tmpval;
              
              QuartVect[k & "Fact;T;" &                                                      PRr.MotherCode] = QuartVect[k & "Fact;T;" & PRr.MotherCode] + tmpval;
              QuartVect[    "Fact;T;" &                                                      PRr.MotherCode] = QuartVect[    "Fact;T;" & PRr.MotherCode] + tmpval;
            end;
            
          end;
        end;
      end;
    end;
  end;
  ExtArr[EAi] = "";
  ArtSuppl[ASi] = "";
  
	RETURN;
END;

global
function string 4 QuartalIntToStr(integer q)
begin
  string 5 tstr;
  integer i;
  
  tstr = "Q";
  for (i=0;i<q;i=i+1) begin
    tstr = tstr & "I";
  end;
  tstr = StrReplace(tstr,"IIII","IV");
  QuartalIntToStr = tstr;
  return;
end;

global
procedure FoundPeopleStatRn(record RcVc RepSpec, var string fnserv, var string md5str, var boolean PrjFoundf)
BEGIN
//RepSpec.f1 - Foundation
	record BaseCurBlock BCb;
	record ITVc ITr;
  record INVc INr;
	record ObjVc Objr;
	array string 10 ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups,ArtSuppl,ExtArr;
	vector val QuartVect;
	vector boolean isMotherProjVect,SupplInArr;
	integer i,j,k,l,m,quartCount,Qi,TSi;
	string 10 group,nextgroup;
	string 100 tstr;
	integer suppCount1,suppCount2,combcnt,pos;
	boolean ExtPrinted,SupPrinted;
	array integer quartToPrint;
  val value,planrow,factrow;
  array string 100 combarr;
  vector boolean combExist;
  
	array string 10 sheetNames;
	array val sheetColls;
	array integer sheetCollsOutLvl;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr,
			style1,style2,style3,style4,style5,style6,style7,style8,style9,style10,style11,style12,style13;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
  array string 225 mas;
	
  ArraysCollect(RepSpec,ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups,PrjFoundf,isMotherProjVect);
	if (PrjFoundf) then begin
		DataCollect(ArtArrayWithoutGroups,ExtArr,ArtSuppl,ProjArray,RepSpec,QuartVect);
    GetVectorTags(QuartVect,combarr);
    combcnt = combarr.length; 
    for (i=0;i<combcnt;i=i+1) begin
      pos = 0;
      ExtractObjWithSeparator(";",combarr[i],false,pos,tstr);
      ExtractObjWithSeparator(";",combarr[i],false,pos,tstr);
      combExist[tstr] = true;
    end;
    
    reportName = "FoundPeopleStatRn";
		if(windowsmode==1)then begin
			fileToSave = DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end else begin
			fileToSave = "/" & DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end;
		BlockLoad(BCb);
		quartCount = RepSpec.flags[1] + RepSpec.flags[2] + RepSpec.flags[3] + RepSpec.flags[4];
		qtyOfSheets = quartCount;
		if (RepSpec.flags[4]==1) then begin
			i = 4;
		end;
		if (RepSpec.flags[3]==1) then begin
			i = 3;
		end;
		if (RepSpec.flags[2]==1) then begin
			i = 2;
		end;
		if (RepSpec.flags[1]==1) then begin
			i = 1;
		end;
		quartToPrint[0] = i;
		i = 0;
		for (i=1;i<quartCount;i=i+1) begin
			quartToPrint[i] = quartToPrint[0] + i;
		end;
    Qi = 0;
    if qtyOfSheets>1 then begin
      qtyOfSheets = qtyOfSheets + 1;
      if nonblank(RepSpec.f1) then begin
        tstr = RepSpec.f1;
      end else begin
        tstr = "All foundations";
      end;
      sheetNames[Qi] = tstr & "-Projects-TOT";
      Qi = 1;
    end;
    for (i=0;i<quartCount;i=i+1) begin
      if nonblank(RepSpec.f4) then begin
        sheetNames[i + Qi] = tstr & "-Projects-" & MonthName(RepSpec.sStartDate);
      end else begin
        sheetNames[i + Qi] = tstr & "-Projects-" & QuartalIntToStr(quartToPrint[i]);
      end;
    end;
    
		colnum = 0;
		sheetColls[colnum] = 1.85546875;
		colnum = colnum + 1;
		sheetColls[colnum] = 3;
		colnum = colnum + 1;
    sheetColls[colnum] = 7;
		colnum = colnum + 1;
		sheetColls[colnum] = 31.5703125;
		colnum = colnum + 1;
    sheetColls[colnum] = 5.28515625;
    colnum = colnum + 1;
    sheetColls[colnum] = 25.85546875;
    colnum = colnum + 1;
    sheetColls[colnum] = 5.28515625;
    colnum = colnum + 1;
    sheetColls[colnum] = 0.85546875;
    colnum = colnum + 1;
		for (i=0;i<ProjArray.length + 1;i=i+1) begin
			sheetColls[colnum] = 12;
			colnum = colnum + 1;
      sheetColls[colnum] = 12;
      sheetCollsOutLvl[colnum] = 1;
			colnum = colnum + 1;
		end;
    sheetColls[colnum] = 12;
    sheetCollsOutLvl[colnum] = 1;
    colnum = colnum + 1;
    sheetColls[colnum] = 7;
    sheetCollsOutLvl[colnum] = 1;
    colnum = colnum + 1;
		
		colnum = 0;
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		sheetnum = 1;
		qtyMergeCell = 0;
    XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
    if quartCount>1 then begin
      SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
      BeginSheetData(sheetnum,fileToSave);
        rownum = 1;
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,18.75);
          style = 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Foundation People Statistics " & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,6);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 4;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 5;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          StringCell(sheetnum,fileToSave,colnum,rownum,style,": " & RepSpec.sStartDate & " - " & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,6);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 6;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 7;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          StringCell(sheetnum,fileToSave,colnum,rownum,style,": " & BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,6);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,30);
          style = 8;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 27;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 9;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          if nonblank(RepSpec.f1) then begin
            tstr = RepSpec.f1 & " - Total";
          end else begin
            tstr = "All foundations - Total";
          end;
          if (RepSpec.flags[1]==1) then begin
            tstr = tstr & "(Q1-";
          end else begin
            if (RepSpec.flags[2]==1) then begin
              tstr = tstr & "(Q2-";
            end else begin
              if (RepSpec.flags[3]==1) then begin
                tstr = tstr & "(Q3-";
              end else begin
                if (RepSpec.flags[4]==1) then begin
                  tstr = tstr & "(Q4-";
                end;
              end;
            end;
          end;
          if (RepSpec.flags[4]==1) then begin
            tstr = tstr & "Q4)";
          end else begin
            if (RepSpec.flags[3]==1) then begin
              tstr = tstr & "Q3)";
            end else begin
              if (RepSpec.flags[2]==1) then begin
                tstr = tstr & "Q2)";
              end else begin
                if (RepSpec.flags[1]==1) then begin
                  tstr = tstr & "Q1)";
                end;
              end;
            end;
          end;
          style = 38;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,tstr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 39;
          qtyOfEmpStr = ProjArray.length*2 + 3;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 10;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"H.No.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 10;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Name",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 37;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          for (i=0;i<ProjArray.length;i=i+1) begin
            if isMotherProjVect[ProjArray[i]] then begin
              if (i==0) then begin
                style = 103;
              end else begin
                style = 104;
              end;
            end else begin
              if mod(StringToInt(right(ProjArray[i],1)),2)==1 then begin
                style = 105;
              end else begin
                style = 106;
              end;
            end;
            mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
            StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            if isMotherProjVect[ProjArray[i]] then begin
              style = 104;
            end else begin
              if mod(StringToInt(right(ProjArray[i],1)),2)==1 then begin
                style = 105;
              end else begin
                style = 106;
              end;
            end;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
            qtyMergeCell = qtyMergeCell + 1;
          end;
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
          style = 107;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 108;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 109;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
          qtyMergeCell = qtyMergeCell + 1;
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,4);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 34;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          style = 16;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 17;
          qtyOfEmpStr = ProjArray.length*2 - 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 85;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 86;
          qtyOfEmpStr = 3;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 34;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          for (i=0;i<ProjArray.length;i=i+1) begin
            style = 41;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 42;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          end;
          style = 82;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 40;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 83;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Override",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 84;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,9.95);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 34;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
          if combExist[ArtArrayWithGroups[i]] then begin
            m = 1;
            while !combExist[ArtArrayWithGroups[i+m]] and (m+i<ArtArrayWithGroups.length) begin
              m = m + 1;
            end;
            INr.Objects = ArtArrayWithGroups[i+m];
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              nextgroup = ITr.Code;
            end else begin
              nextgroup = ArtArrayWithGroups[i+m];
            end;
            INr.Objects = ArtArrayWithGroups[i];
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end else begin
              ITr.Code = ArtArrayWithGroups[i];
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end;
            if ArtArrayWithGroups[i]==group then begin
              colnum = 1;
              BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                style = 81;
                tstr = StrReplace(group,"_16","000");
                tstr = StrReplace(tstr,"_17","000");
                tstr = StrReplace(tstr,"_18","000");
                StringCell(sheetnum,fileToSave,colnum,rownum,style,tstr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                style = 11;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 11;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 34;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                colnum = colnum + 1;
                planrow = 0;
                factrow = 0;
                for (j=0;j<ProjArray.length;j=j+1) begin
                  style = 23;
                  value = QuartVect[";" & group & ";" & ProjArray[j]];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
                  if isMotherProjVect[ProjArray[j]] then begin
                    planrow = planrow + value;
                  end;
                  style = 12;
                  value = QuartVect["Fact;" & group & ";" & ProjArray[j]];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
                  if isMotherProjVect[ProjArray[j]] then begin
                    factrow = factrow + value;
                  end;
                end;
                style = 43;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                style = 66;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                style = 63;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                style = 91;
                if (planrow == 0) then begin
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                end else begin
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                end;
                style = 71;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              EndRow(sheetnum,fileToSave,rownum);
            end else begin
              colnum = 1;
              planrow = QuartVect[";" & ArtArrayWithGroups[i] & ";T"];
              factrow = QuartVect["Fact;" & ArtArrayWithGroups[i] & ";T"];
              BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                style = 3;
                if ((Right(ArtArrayWithGroups[i],1)=="0") or
                    (Right(ArtArrayWithGroups[i],2)=="99") or
                    (Right(ArtArrayWithGroups[i],4)=="0_16") or
                    (Right(ArtArrayWithGroups[i],5)=="99_16") or
                    (Right(ArtArrayWithGroups[i],4)=="0_17") or
                    (Right(ArtArrayWithGroups[i],5)=="99_17") or
                    (Right(ArtArrayWithGroups[i],4)=="0_18") or
                    (Right(ArtArrayWithGroups[i],5)=="99_18")) then begin
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                  colnum = colnum + 1;
                end else begin
                  colnum = colnum + 1;
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                end;
                colnum = colnum + 1;
                Objr.Code = ArtArrayWithGroups[i];
                readfirstmain(Objr,1,true);
                StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                style = 11;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 34;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                colnum = colnum + 1;
                for (j=0;j<ProjArray.length;j=j+1) begin
                  style = 48;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[";" & ArtArrayWithGroups[i] & ";" & ProjArray[j]]);
                  style = 49;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["Fact;" & ArtArrayWithGroups[i] & ";" & ProjArray[j]]);
                end;
                style = 53;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                style = 69;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                style = 89;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                style = 93;
                if (planrow == 0) then begin
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                end else begin
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                end;
                style = 71;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              EndRow(sheetnum,fileToSave,rownum);
              
              SupPrinted = false;
              for (k=0;k<ArtSuppl.length;k=k+1) begin
                if combExist[ArtArrayWithGroups[i] & ":" & ArtSuppl[k]] then begin
                    if (blank(ArtSuppl[k]) and SupPrinted) or nonblank(ArtSuppl[k]) then begin
                    planrow = QuartVect[";" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";T"];
                    factrow = QuartVect["Fact;" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";T"];
                    if ((planrow != blankval) and (planrow != 0)) or ((factrow != blankval) and (factrow != 0)) then begin
                      colnum = 1;
                      SupPrinted = true;
                      //if nonblank(ArtSuppl[k]) then begin
                        BeginRow(sheetnum,fileToSave,rownum,1,blankval);
                      //end else begin
                        //BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                      //end;
                        style = 3;
                        if ((Right(ArtArrayWithGroups[i],1)=="0") or
                            (Right(ArtArrayWithGroups[i],2)=="99") or
                            (Right(ArtArrayWithGroups[i],4)=="0_16") or
                            (Right(ArtArrayWithGroups[i],5)=="99_16") or
                            (Right(ArtArrayWithGroups[i],4)=="0_17") or
                            (Right(ArtArrayWithGroups[i],5)=="99_17") or
                            (Right(ArtArrayWithGroups[i],4)=="0_18") or
                            (Right(ArtArrayWithGroups[i],5)=="99_18")) then begin
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                          colnum = colnum + 1;
                        end else begin
                          colnum = colnum + 1;
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        end;
                        colnum = colnum + 1;
                        Objr.Code = ArtArrayWithGroups[i];
                        readfirstmain(Objr,1,true);
                        StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        style = 11;
                        if nonblank(ArtSuppl[k]) then begin
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtSuppl[k],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                          Objr.Code = ArtSuppl[k];
                          readfirstmain(Objr,1,true);
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        end else begin
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                          style = 34;
                        end;
                        qtyOfEmpStr = 1;
                        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        colnum = colnum + 1;
                        for (j=0;j<ProjArray.length;j=j+1) begin
                          style = 48;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[";" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                          style = 49;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["Fact;" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                        end;
                        style = 53;
                        NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                        style = 69;
                        NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                        style = 89;
                        NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                        style = 93;
                        if (planrow == 0) then begin
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        end else begin
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                        end;
                        style = 71;
                        qtyOfEmpStr = 1;
                        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                      EndRow(sheetnum,fileToSave,rownum);
                    end;
                    ExtPrinted = false;
                    for (l=0;l<ExtArr.length;l=l+1) begin
                      if combExist[ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k]] then begin
                        if (blank(ExtArr[l]) and ExtPrinted) or nonblank(ExtArr[l]) then begin
                          planrow = QuartVect[";" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";T"];
                          factrow = QuartVect["Fact;" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";T"];
                          if ((planrow != blankval) and (planrow != 0)) or ((factrow != blankval) and (factrow != 0)) then begin
                            ExtPrinted = true;
                            colnum = 3;
                            BeginRow(sheetnum,fileToSave,rownum,2,blankval);
                              style = 102;
                              StringCell(sheetnum,fileToSave,colnum,rownum,style,ExtArr[l],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                              Objr.Code = ExtArr[l];
                              if ExtArr[l]=="" then begin
                                Objr.Code = ArtArrayWithGroups[i];
                              end;
                              readfirstmain(Objr,1,true);
                              StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                              style = 36;
                              if nonblank(ArtSuppl[k]) then begin
                                StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtSuppl[k],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                                Objr.Code = ArtSuppl[k];
                                readfirstmain(Objr,1,true);
                                StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                              end else begin
                                qtyOfEmpStr = 2;
                                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                              end;
                              style = 35;
                              qtyOfEmpStr = 1;
                              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                              colnum = colnum + 1;
                              for (j=0;j<ProjArray.length;j=j+1) begin
                                style = 46;
                                NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[";" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                                style = 47;
                                NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["Fact;" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                              end;
                              style = 52;
                              NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                              style = 68;
                              NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                              style = 95;
                              NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                              style = 96;
                              if (planrow == 0) then begin
                                qtyOfEmpStr = 1;
                                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                              end else begin
                                NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                              end;
                              style = 71;
                              qtyOfEmpStr = 1;
                              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                            EndRow(sheetnum,fileToSave,rownum);
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
              if ArtArrayWithGroups[i+m]==nextgroup then begin
                colnum = 5;
                BeginRow(sheetnum,fileToSave,rownum,0,10);
                  if nonblank(nextgroup) then begin
                    style = 11;
                  end else begin
                    style = 80;
                  end;
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  if nonblank(nextgroup) then begin
                    style = 34;
                  end else begin
                    style = 27;
                  end;
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  colnum = colnum + 1;
                  style = 64;
                  qtyOfEmpStr = ProjArray.length*2 + 4;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                EndRow(sheetnum,fileToSave,rownum);
              end;
            end;
          end;
        end;
        colnum = 4;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 2;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL COST",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          colnum = colnum + 4;
          planrow = 0;
          factrow = 0;
          for (j=0;j<ProjArray.length;j=j+1) begin
            style = 23;
            value = QuartVect[";T;" & ProjArray[j]];
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
            if isMotherProjVect[ProjArray[j]] then begin
              planrow = planrow + value;
            end;
            style = 12;
            value = QuartVect["Fact;T;" & ProjArray[j]];
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
            if isMotherProjVect[ProjArray[j]] then begin
              factrow = factrow + value;
            end;
          end;
          style = 43;
          NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
          style = 100;
          NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,9.95);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 3;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 2;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"People Tot Number",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          colnum = colnum + 5;
          style = 13;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 14;
          qtyOfEmpStr = ProjArray.length*2 - 3;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 15;
          NumericCell(sheetnum,fileToSave,colnum,rownum,style,ArtSuppl.length - 1);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 9;
        BeginRow(sheetnum,fileToSave,rownum,0,2.5);
          style = 30;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 31;
          qtyOfEmpStr = ProjArray.length*2 - 3;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 32;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
      EndSheetData(sheetnum,fileToSave);
      MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
      EndSheet(sheetnum,fileToSave,0);
      qtyMergeCell = 0;
      sheetnum = sheetnum + 1;
    end;
    for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
      TSi = 0;
      ClearVector(SupplInArr)
      SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
      BeginSheetData(sheetnum,fileToSave);
        rownum = 1;
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Foundation People Statistics " & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,6);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 4;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 5;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          StringCell(sheetnum,fileToSave,colnum,rownum,style," " & RepSpec.sStartDate & " - " & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,6);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 6;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 7;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          StringCell(sheetnum,fileToSave,colnum,rownum,style," " & BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,6);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,30);
          style = 8;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 27;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 9;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          if nonblank(RepSpec.f1) then begin
            tstr = RepSpec.f1 & " - Budget";
          end else begin
            tstr = "All foundations - Budget";
          end;
          style = 25;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,tstr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 26;
          qtyOfEmpStr = ProjArray.length*2 + 3;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 10;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"H.No.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Name",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 37;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          for (i=0;i<ProjArray.length;i=i+1) begin
            if isMotherProjVect[ProjArray[i]] then begin
              if (i==0) then begin
                style = 103;
              end else begin
                style = 104;
              end;
            end else begin
              if mod(StringToInt(right(ProjArray[i],1)),2)==1 then begin
                style = 105;
              end else begin
                style = 106;
              end;
            end;
            mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
            StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            if isMotherProjVect[ProjArray[i]] then begin
              style = 104;
            end else begin
              if mod(StringToInt(right(ProjArray[i],1)),2)==1 then begin
                style = 105;
              end else begin
                style = 106;
              end;
            end;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
            qtyMergeCell = qtyMergeCell + 1;
          end;
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
          style = 60;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 58;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 98;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
          qtyMergeCell = qtyMergeCell + 1;
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,4);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 34;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          style = 16;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 17;
          qtyOfEmpStr = ProjArray.length*2 - 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 61;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 57;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 99;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 34;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          colnum = colnum + 1;
          for (i=0;i<ProjArray.length;i=i+1) begin
            style = 41;
            if nonblank(RepSpec.f4) then begin
              StringCell(sheetnum,fileToSave,colnum,rownum,style,MonthName(RepSpec.sStartDate),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            end else begin
              StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            end;
            style = 42;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          end;
          style = 62;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 59;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 101;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Override",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 84;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 71;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,9.95);
          style = 11;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 34;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
          if combExist[ArtArrayWithGroups[i]] then begin
            m = 1;
            while !combExist[ArtArrayWithGroups[i+m]] and (m+i<ArtArrayWithGroups.length) begin
              m = m + 1;
            end;
            INr.Objects = ArtArrayWithGroups[i+m];
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              nextgroup = ITr.Code;
            end else begin
              nextgroup = ArtArrayWithGroups[i+m];
            end;
            INr.Objects = ArtArrayWithGroups[i];
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end else begin
              ITr.Code = ArtArrayWithGroups[i];
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end;
            if ArtArrayWithGroups[i]==group then begin
              colnum = 1;
              BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                style = 81;
                tstr = StrReplace(group,"_16","000");
                tstr = StrReplace(tstr,"_17","000");
                tstr = StrReplace(tstr,"_18","000");
                StringCell(sheetnum,fileToSave,colnum,rownum,style,tstr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                style = 2;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                style = 11;
                qtyOfEmpStr = 2;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 34;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                colnum = colnum + 1;
                planrow = 0;
                factrow = 0;
                style = 22;
                for (j=0;j<ProjArray.length;j=j+1) begin
                  value = QuartVect[quartToPrint[Qi] & ";" & group & ";" & ProjArray[j]];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
                  if isMotherProjVect[ProjArray[j]] then begin
                    planrow = planrow + value;
                  end;
                  value = QuartVect[quartToPrint[Qi] & "Fact;" & group & ";" & ProjArray[j]];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
                  if isMotherProjVect[ProjArray[j]] then begin
                    factrow = factrow + value;
                  end;
                end;
                style = 23;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                style = 50;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                style = 63;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                style = 91;
                if (planrow == 0) then begin
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                end else begin
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                end;
                style = 71;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              EndRow(sheetnum,fileToSave,rownum);
            end else begin
              colnum = 1;
              planrow = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ";T"];
              factrow = QuartVect[quartToPrint[Qi] & "Fact;" & ArtArrayWithGroups[i] & ";T"];
              BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                style = 3;
                if ((Right(ArtArrayWithGroups[i],1)=="0") or
                    (Right(ArtArrayWithGroups[i],2)=="99") or
                    (Right(ArtArrayWithGroups[i],4)=="0_16") or
                    (Right(ArtArrayWithGroups[i],5)=="99_16") or
                    (Right(ArtArrayWithGroups[i],4)=="0_17") or
                    (Right(ArtArrayWithGroups[i],5)=="99_17") or
                    (Right(ArtArrayWithGroups[i],4)=="0_18") or
                    (Right(ArtArrayWithGroups[i],5)=="99_18")) then begin
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                  colnum = colnum + 1;
                end else begin
                  colnum = colnum + 1;
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                end;
                colnum = colnum + 1;
                Objr.Code = ArtArrayWithGroups[i];
                readfirstmain(Objr,1,true);
                StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                style = 11;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 34;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                colnum = colnum + 1;
                for (j=0;j<ProjArray.length;j=j+1) begin
                  style = 20;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ";" & ProjArray[j]]);
                  style = 18;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & "Fact;" & ArtArrayWithGroups[i] & ";" & ProjArray[j]]);
                end;
                style = 78;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                style = 72;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                style = 89;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                style = 93;
                if (planrow == 0) then begin
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                end else begin
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                end;
                style = 71;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              EndRow(sheetnum,fileToSave,rownum);
              
              SupPrinted = false;
              for (k=0;k<ArtSuppl.length;k=k+1) begin
                if combExist[ArtArrayWithGroups[i] & ":" & ArtSuppl[k]] then begin
                  if (blank(ArtSuppl[k]) and SupPrinted) or nonblank(ArtSuppl[k]) then begin
                    planrow = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";T"];
                    factrow = QuartVect[quartToPrint[Qi] & "Fact;" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";T"];
                    if ((planrow != blankval) and (planrow != 0)) or ((factrow != blankval) and (factrow != 0)) then begin
                      if nonblank(ArtSuppl[k]) and !SupplInArr[ArtSuppl[k]] then begin
                        SupplInArr[ArtSuppl[k]] = true;
                        TSi = TSi + 1;
                      end;
                      colnum = 1;
                      SupPrinted = true;
                        BeginRow(sheetnum,fileToSave,rownum,1,blankval);
                        style = 3;
                        if ((Right(ArtArrayWithGroups[i],1)=="0") or
                            (Right(ArtArrayWithGroups[i],2)=="99") or
                            (Right(ArtArrayWithGroups[i],4)=="0_16") or
                            (Right(ArtArrayWithGroups[i],5)=="99_16") or
                            (Right(ArtArrayWithGroups[i],4)=="0_17") or
                            (Right(ArtArrayWithGroups[i],5)=="99_17") or
                            (Right(ArtArrayWithGroups[i],4)=="0_18") or
                            (Right(ArtArrayWithGroups[i],5)=="99_18")) then begin
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                          colnum = colnum + 1;
                        end else begin
                          colnum = colnum + 1;
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        end;
                        colnum = colnum + 1;
                        Objr.Code = ArtArrayWithGroups[i];
                        readfirstmain(Objr,1,true);
                        StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        style = 11;
                        if nonblank(ArtSuppl[k]) then begin
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtSuppl[k],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                          Objr.Code = ArtSuppl[k];
                          readfirstmain(Objr,1,true);
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        end else begin
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        end;
                        style = 34;
                        qtyOfEmpStr = 1;
                        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        colnum = colnum + 1;
                        for (j=0;j<ProjArray.length;j=j+1) begin
                          style = 20;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                          style = 18;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & "Fact;" & ArtArrayWithGroups[i] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                        end;
                        style = 78;
                        NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                        style = 72;
                        NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                        style = 89;
                        NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                        style = 93;
                        if (planrow == 0) then begin
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        end else begin
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                        end;
                        style = 71;
                        qtyOfEmpStr = 1;
                        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                      EndRow(sheetnum,fileToSave,rownum);
                    end;
                    ExtPrinted = false;
                    for (l=0;l<ExtArr.length;l=l+1) begin
                      if combExist[ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k]] then begin
                        if (blank(ExtArr[l]) and ExtPrinted) or nonblank(ExtArr[l]) then begin
                          planrow = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";T"];
                          factrow = QuartVect[quartToPrint[Qi] & "Fact;" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";T"];
                          if ((planrow != blankval) and (planrow != 0)) or ((factrow != blankval) and (factrow != 0)) then begin
                            ExtPrinted = true;
                            colnum = 3;
                            BeginRow(sheetnum,fileToSave,rownum,2,blankval);
                              style = 102;
                              StringCell(sheetnum,fileToSave,colnum,rownum,style,ExtArr[l],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                              Objr.Code = ExtArr[l];
                              if ExtArr[l]=="" then begin
                                Objr.Code = ArtArrayWithGroups[i];
                              end;
                              readfirstmain(Objr,1,true);
                              style = 33;
                              StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                              style = 36;
                              if nonblank(ArtSuppl[k]) then begin
                                StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtSuppl[k],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                                Objr.Code = ArtSuppl[k];
                                readfirstmain(Objr,1,true);
                                StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                              end else begin
                                qtyOfEmpStr = 2;
                                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                              end;
                              style = 35;
                              qtyOfEmpStr = 1;
                              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                              colnum = colnum + 1;
                              for (j=0;j<ProjArray.length;j=j+1) begin
                                style = 65;
                                NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                                style = 19;
                                NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & "Fact;" & ArtArrayWithGroups[i] & ":" & ExtArr[l] & ":" & ArtSuppl[k] & ";" & ProjArray[j]]);
                              end;
                              style = 77;
                              NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
                              style = 73;
                              NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
                              style = 95;
                              NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow - planrow);
                              style = 96;
                              if (planrow == 0) then begin
                                qtyOfEmpStr = 1;
                                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                              end else begin
                                NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(factrow - planrow)/planrow);
                              end;
                              style = 71;
                              qtyOfEmpStr = 1;
                              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                            EndRow(sheetnum,fileToSave,rownum);
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
              if ArtArrayWithGroups[i+m]==nextgroup then begin
                colnum = 5;
                BeginRow(sheetnum,fileToSave,rownum,0,10);
                  if nonblank(nextgroup) then begin
                    style = 11;
                  end else begin
                    style = 80;
                  end;
                  qtyOfEmpStr = 2;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  if nonblank(nextgroup) then begin
                    style = 34;
                  end else begin
                    style = 27;
                  end;
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  colnum = colnum + 1;
                  style = 64;
                  qtyOfEmpStr = ProjArray.length*2 + 4;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                EndRow(sheetnum,fileToSave,rownum);
              end;
            end;
          end;
        end;
        colnum = 4;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 2;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL COST",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          colnum = colnum + 4;
          style = 24;
          planrow = 0;
          factrow = 0;
          for (j=0;j<ProjArray.length;j=j+1) begin
            value = QuartVect[quartToPrint[Qi] & ";T;" & ProjArray[j]];
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
            if isMotherProjVect[ProjArray[j]] then begin
              planrow = planrow + value;
            end;
            value = QuartVect[quartToPrint[Qi] & "Fact;T;" & ProjArray[j]];
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,value);
            if isMotherProjVect[ProjArray[j]] then begin
              factrow = factrow + value;
            end;
          end;
          style = 23;
          NumericCell(sheetnum,fileToSave,colnum,rownum,style,planrow);
          style = 12;
          NumericCell(sheetnum,fileToSave,colnum,rownum,style,factrow);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,9.95);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 4;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 2;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"People Tot Number",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          colnum = colnum + 4;
          style = 13;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 14;
          qtyOfEmpStr = ProjArray.length*2 - 3;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 15;
          NumericCell(sheetnum,fileToSave,colnum,rownum,style,TSi);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 9;
        BeginRow(sheetnum,fileToSave,rownum,0,2.5);
          style = 30;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 31;
          qtyOfEmpStr = ProjArray.length*2 - 3;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 32;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
      EndSheetData(sheetnum,fileToSave);
      MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
      EndSheet(sheetnum,fileToSave,0);
      sheetnum = sheetnum + 1;
      qtyMergeCell = 0;
    end;

		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
		ConvertToXLSX(fileToSave);
		MilliSleep(2000);
		fnserv = fileToSave;
    md5str = GetFileMD5(fnserv);
	end;
	RETURN;
END;