remote procedure ProjectFoundRn(record RcVc,var string,var string,var boolean);
remote function boolean OTCodeMatch(string,string);
remote function boolean GetPartFileToArea(string,var area);
remote procedure DeleteXLSXJunk(string);
remote procedure BackupXLSX(string);
remote procedure RecoverXLSX(string);

global
procedure RunProjectFoundRn()
begin
	record ObjVc Objr;
	record OTVc OTr;
	string 255 filename,tstr,fnserv,md5strServ,md5strCli;
	string 10 tmpDate;
	area tmparea;
	record RcVc RepSpec;
	integer wn,transCNT;
	boolean PrjFoundf,testf,EOF,err;
  
	transCNT = 5;
  wn = curwindow;
	deselectwindow(wn,true);
	getwindowrecord(wn,RepSpec);
	PrjFoundf = true;
	testf = true;
	if (blank(RepSpec.f2)) then begin
		MessageBox(0,"Input Year!");
		testf = false;
	end else begin
		if len(RepSpec.f2)!=4 then  begin
			MessageBox(0,"Incorrect Year!");
			testf = false;
		end;
	end;
	if ((RepSpec.flags[1]==0) and (RepSpec.flags[2]==0) and (RepSpec.flags[3]==0) and (RepSpec.flags[4]==0) and testf) then begin
		MessageBox(0,"Select at least one Quartal!");
		testf = false;
	end;
	if ((((RepSpec.flags[1]==1) and (RepSpec.flags[2]==0) and ((RepSpec.flags[3]==1) or (RepSpec.flags[4]==1))) or (((RepSpec.flags[1]==1) or (RepSpec.flags[2]==1)) and (RepSpec.flags[3]==0) and (RepSpec.flags[4]==1))) and testf) then begin
		MessageBox(0,"Incorrect selection of Quartals!");
		testf = false;
	end;
	if (blank(RepSpec.f1) and testf) then begin
		MessageBox(0,"Input Foundation!");
		testf = false;
	end;
	if (nonblank(RepSpec.f1) and testf) then begin
		if !OTCodeMatch(RepSpec.f1,"FOUND") then begin
			testf = false;
			MessageBox(0,"Incorrect Foundation!");
		end;
	end;
	if (nonblank(RepSpec.ObjStr) and testf) then begin
		if !OTCodeMatch(RepSpec.ObjStr,"LOCAT") then begin
			testf = false;
			MessageBox(0,"Incorrect Location!");
		end;
	end;
	if testf then begin
		tmpDate = "";
		if (RepSpec.flags[4]==1) then begin
			tmpDate = "1/10/";
		end;
		if (RepSpec.flags[3]==1) then begin
			tmpDate = "1/7/";
		end;
		if (RepSpec.flags[2]==1) then begin
			tmpDate = "1/4/";
		end;
		if (RepSpec.flags[1]==1) then begin
			tmpDate = "1/1/";
		end;
		tmpDate = tmpDate & RepSpec.f2;
		RepSpec.sStartDate = StringToDate(tmpDate);
		
		tmpDate = "";
		if (RepSpec.flags[1]==1) then begin
			tmpDate = "31/3/";
		end;
		if (RepSpec.flags[2]==1) then begin
			tmpDate = "30/6/";
		end;
		if (RepSpec.flags[3]==1) then begin
			tmpDate = "30/9/";
		end;
		if (RepSpec.flags[4]==1) then begin
			tmpDate = "31/12/";
		end;
		tmpDate = tmpDate & RepSpec.f2;
		RepSpec.sEndDate = StringToDate(tmpDate);
		tstr = RepSpec.f1;
		if nonblank(RepSpec.ObjStr) then begin
			tstr = tstr & "-" & RepSpec.ObjStr;
		end;
		tstr = tstr & "-Projects-" & DateToString(RepSpec.sEndDate,"DD MM YYYY") & "-filled in on " & DateToString(CurrentDate,"DD MM YYYY");
		filename = SaveFileDialog(tstr,"","xlsx");
		if ((filename!=tstr) and nonblank(filename)) then begin
			ProjectFoundRn(RepSpec,fnserv,md5strServ,PrjFoundf);
			if (PrjFoundf) then begin
				if(fileexists(filename))then begin
					delete_file(filename);
				end;
				BackupXLSX(fnserv);
        testf = true;
        err = false;
        while (testf) begin
          while (!EOF) begin
            EOF = GetPartFileToArea(fnserv,tmparea);
            writeareatofile(tmparea,filename,1);
          end;
          md5strCli = GetFileMD5(filename);
          if (md5strCli!=md5strServ) then begin
            err = true;
            RecoverXLSX(fnserv);
            transCNT = transCNT - 1;
            if (transCNT==0) then begin
              testf = false;
            end;
          end else begin
            testf = false;
          end;
        end;
        DeleteXLSXJunk(fnserv);
        CloseWindow(wn);
        if (err) then begin 
          Messagebox(0,"Communication problems! Try again later.");
        end else begin
          Messagebox(0,"Done!");
        end;
			end else begin
				MessageBox(0,"Projects for specified period not found!");
			end;
		end;
	end;
	return;
end;