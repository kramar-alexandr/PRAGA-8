remote procedure BudTotFoundRn(record RcVc,var string,var string);
remote function boolean GetPartFileToArea(string,var area);
remote procedure DeleteXLSXJunk(string);
remote procedure BackupXLSX(string);
remote procedure RecoverXLSX(string,string);
external function integer GetMonthNum(string);

global
procedure BudTotFound2019RClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2019";
	PutWindowRecord(wn,RepSpec);
	
	return;
end;

global
procedure BudTotFound2020RClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2020";
	PutWindowRecord(wn,RepSpec);
	
	return;
end;


global
procedure BudTotFound2018RClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2018";
	PutWindowRecord(wn,RepSpec);
	
	return;
end;

global
function Boolean BudTotFound2019RClassOnOpenWindow(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2019";
	PutWindowRecord(wn,RepSpec);

	return;
end;

global
function Boolean BudTotFound2020RClassOnOpenWindow(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2020";
	PutWindowRecord(wn,RepSpec);

	return;
end;

global
function Boolean BudTotFound2018RClassOnOpenWindow(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2018";
	PutWindowRecord(wn,RepSpec);

	return;
end;

global
procedure BudTotFound2017RClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2017";
	PutWindowRecord(wn,RepSpec);
	
	return;
end;

global
function Boolean BudTotFound2017RClassOnOpenWindow(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2017";
	PutWindowRecord(wn,RepSpec);

	return;
end;

global
procedure BudTotFoundRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2016";
	PutWindowRecord(wn,RepSpec);
	
	return;
end;

global
function Boolean BudTotFoundRClassOnOpenWindow(integer wn)
begin
	record RcVc RepSpec;
	
	GetWindowRecord(wn,RepSpec);
	RepSpec.f2 = "2016";
	PutWindowRecord(wn,RepSpec);

	return;
end;

global
procedure RunBudTotFoundRn()
begin
	string 255 filename,tstr,fnserv,md5strServ,md5strCli;
	area tmparea;
	record RcVc RepSpec;
	integer wn,transCNT;
	boolean testf,EOF,err;
	string 10 tmpDate;
	
	transCNT = 5;
  wn = curwindow;
	deselectwindow(wn,true);
	getwindowrecord(wn,RepSpec);
	testf = true;
	if (blank(RepSpec.f2)) then begin
		MessageBox(0,"Input Year!");
		testf = false;
	end else begin
		if len(RepSpec.f2)!=4 then  begin
			MessageBox(0,"Incorrect Year!");
			testf = false;
		end;
	end;
  if nonblank(RepSpec.f1) then begin
    RepSpec.f1 = GetMonthNum(RepSpec.f1);
    if (RepSpec.f1=="0") then begin
      MessageBox(0,"Incorrect month!");
      testf = false;
    end else begin
      RepSpec.sStartDate = StringToDate("1/" & RepSpec.f1 & "/" & RepSpec.f2);
      RepSpec.sEndDate = StringToDate(DaysInMonth(StringToInt(RepSpec.f2),StringToInt(RepSpec.f1)) & "/" & RepSpec.f1 & "/" & RepSpec.f2);
    end;
  end else begin
    if ((RepSpec.flags[1]==0) and (RepSpec.flags[2]==0) and (RepSpec.flags[3]==0) and (RepSpec.flags[4]==0) and testf) then begin
      MessageBox(0,"Select at least one quartal or month!");
      testf = false;
    end;
    if ((((RepSpec.flags[1]==1) and (RepSpec.flags[2]==0) and ((RepSpec.flags[3]==1) or (RepSpec.flags[4]==1))) or (((RepSpec.flags[1]==1) or (RepSpec.flags[2]==1)) and (RepSpec.flags[3]==0) and (RepSpec.flags[4]==1))) and testf) then begin
      MessageBox(0,"Incorrect selection of Quartals!");
      testf = false;
    end;
    if testf then begin
      tmpDate = "";
      if (RepSpec.flags[4]==1) then begin
        tmpDate = "1/10/";
      end;
      if (RepSpec.flags[3]==1) then begin
        tmpDate = "1/7/";
      end;
      if (RepSpec.flags[2]==1) then begin
        tmpDate = "1/4/";
      end;
      if (RepSpec.flags[1]==1) then begin
        tmpDate = "1/1/";
      end;
      tmpDate = tmpDate & RepSpec.f2;
      RepSpec.sStartDate = StringToDate(tmpDate);
      
      tmpDate = "";
      if (RepSpec.flags[1]==1) then begin
        tmpDate = "31/3/";
      end;
      if (RepSpec.flags[2]==1) then begin
        tmpDate = "30/6/";
      end;
      if (RepSpec.flags[3]==1) then begin
        tmpDate = "30/9/";
      end;
      if (RepSpec.flags[4]==1) then begin
        tmpDate = "31/12/";
      end;
      tmpDate = tmpDate & RepSpec.f2;
      RepSpec.sEndDate = StringToDate(tmpDate);
    end;
  end;
  if testf then begin
		tstr = tstr & "Foundations Budgets Total " & RepSpec.f2 & " Report";
		tstr = tstr & " filled in on " & DateToString(CurrentDate,"DD MM YYYY");
		filename = SaveFileDialog(tstr,"","xlsx");
		if ((filename!=tstr) and nonblank(filename)) then begin
			BudTotFoundRn(RepSpec,fnserv,md5strServ);
			if(fileexists(filename))then begin
				delete_file(filename);
			end;
			BackupXLSX(fnserv);
      testf = true;
      err = false;
      while (testf) begin
        while (!EOF) begin
          EOF = GetPartFileToArea(fnserv,tmparea);
          writeareatofile(tmparea,filename,1);
        end;
        md5strCli = GetFileMD5(filename);
        if (md5strCli!=md5strServ) then begin
          err = true;
          RecoverXLSX(fnserv,"BudTotFound");
          transCNT = transCNT - 1;
          if (transCNT==0) then begin
            testf = false;
          end;
        end else begin
          testf = false;
        end;
      end;
      DeleteXLSXJunk(fnserv);
      CloseWindow(wn);
      if (err) then begin 
        Messagebox(0,"Communication problems! Try again later.");
      end else begin
        Messagebox(0,"Done!");
      end;
		end;
	end;
	return;
end;