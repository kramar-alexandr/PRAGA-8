external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);
external function string 255 StrReplace(string,string,string);
external function integer GetQuartal(date);
external procedure GetObjs(string,string,var string);
external function string 4 QuartalIntToStr(integer);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 50 TimeToString(time,string,boolean);
external function string 255 MonthName(Date);

procedure ArraysCollect(record RcVc RepSpec, var array string ArtArrayWithoutGroups, var array string ProjArray, var vector string ProjNamesVect, var array string ArtArrayWithGroups, var boolean PrjFoundf, var vector boolean isMotherProjVect)
BEGIN
	record ITVc ITr;
	record INVc INr;
	record PRVc PRr,PR2r;
	integer i,j,k,kw,kwo;
	boolean TrHs,testf,foundf;
	string 100 tstr;
	
	kw = 0;
	
	while(loopmain(ITr,1,true)) begin
    if (RepSpec.f2=="2016" and right(ITr.Code,3)=="_16") or (RepSpec.f2!="2016" and right(ITr.Code,3)!="_16") then begin
      ArtArrayWithGroups[kw] = ITr.Code;
      kw = kw + 1;
      resetloop(INr);
      INr.Group = ITr.Code;
      TrHs = true;
      while(loopkey("Group",INr,1,TrHs)) begin
        testf = true;
        if (INr.Group!=ITr.Code) then begin testf = false; TrHs = false; end;
        if (blank(INr.Objects)) then begin testf = false; end;
        if (RepSpec.f2=="2016" and right(INr.Objects,3)!="_16") then begin testf = false; end;
        if (RepSpec.f2!="2016" and right(INr.Objects,3)=="_16") then begin testf = false; end;
        if (testf) then begin
          tstr = INr.Objects;
          foundf = false;
          for (i=0;i<ArtArrayWithoutGroups.length;i=i+1) begin
            if (ArtArrayWithoutGroups[i]==tstr) then begin
              foundf = true;
            end;
          end; 
          if (!foundf) then begin
            ArtArrayWithoutGroups[kwo] = INr.Objects;
            kwo = kwo + 1;
            ArtArrayWithGroups[kw] = INr.Objects;
            kw = kw + 1;
          end;
        end;
      end;
    end;
	end;
	k = 0;
	while(loopmain(PRr,1,true)) begin
		switch (PRr.Code) begin
      case "2016.998":
        if (RepSpec.flags[6]==0) then begin
          goto L1;
        end;
    end;
		if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) and ((nonblank(RepSpec.f1) and (RepSpec.f1 == PRr.Code)) or blank(RepSpec.f1)) then begin
			ProjArray[k] = PRr.Code;
			ProjNamesVect[PRr.Code] = PRr.Name;
			k = k + 1;
			if blank(PRr.MotherCode) or (PRr.MotherCode == "") then begin
				isMotherProjVect[PRr.Code] = true;
        if nonblank(RepSpec.f1) then begin
          while(loopmain(PR2r,1,true)) begin
            if (PR2r.MotherCode==RepSpec.f1) then begin
              ProjArray[k] = PR2r.Code;
              ProjNamesVect[PR2r.Code] = PR2r.Name;
              isMotherProjVect[PR2r.Code] = false;
              k = k + 1;
            end;
          end;
        end;
			end else begin
				isMotherProjVect[PRr.Code] = false;
			end;
		end;
L1:end;
	if (k==0) then begin
		PrjFoundf = false;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(array string ArtArrayWithoutGroups, array string ExtArr,var array string ProjArray,var array string ProjArray2, record RcVc RepSpec,
					var vector val QuartVect)
BEGIN
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record INVc INr;
	record TRVc TRr;
	record MainVc Mainr;
	record ObjVc Objr;
	row TBBUVc TBBUrw;
	row TRVc TRrw;
	integer i,j,k,l,mtrw,PAi,EAi;
	boolean TrHs,testf,kTestf;
	string 20 group,extras;
  array string 20 prjobjs;
  vector boolean ExtInArr;
  array string 10 tempProjArray;
  string 5 tstr;
  val tempVal;
	
  EAi = 0;
	for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin 
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
      prjobjs[PAi] = PRr.Objects;
			if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
				TBBUr.PRCode = PRr.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
					k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
            if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
              k = 1;
            end;
						kTestf = false;
						if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
							kTestf = true;
						end;
						if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))) then begin
							if nonblank(TBBUrw.Extras) and !ExtInArr[TBBUrw.Extras] then begin
								ExtInArr[TBBUrw.Extras] = true;
								ExtArr[EAi] = TBBUrw.Extras;
								EAi = EAi + 1;
							end;
              INr.Objects = TBBUrw.ArtCode;
              ReadfirstKey("Objects",INr,1,true);
              group = INr.Group;
              if nonblank(RepSpec.f4) then begin
                tempVal = TBBUrw.MonthSum;
              end else begin
                tempVal = TBBUrw.Sum;
              end;
              QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";" & ProjArray[PAi]] = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";" & ProjArray[PAi]] + tempVal;
              QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";T"]            = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";T"]            + tempVal;
              QuartVect[k & ";" & TBBUrw.ArtCode & ";" & ProjArray[PAi]]                 = QuartVect[k & ";" & TBBUrw.ArtCode & ";" & ProjArray[PAi]]                 + tempVal;
              QuartVect[k & ";" & group &         ";" & ProjArray[PAi]]                 = QuartVect[k & ";" & group &         ";" & ProjArray[PAi]]                 + tempVal;
              QuartVect[k & ";" &                "T;" & ProjArray[PAi]]                 = QuartVect[k & ";" &                "T;" & ProjArray[PAi]]                 + tempVal;
              QuartVect[k & ";" & TBBUrw.ArtCode & ";T"]                                 = QuartVect[k & ";" & TBBUrw.ArtCode & ";T"]                                 + tempVal;
              QuartVect[k & ";" & group &         ";T"]                                 = QuartVect[k & ";" & group &         ";T"]                                 + tempVal;
              QuartVect[k & ";" &                "T;T"]                                 = QuartVect[k & ";" &                "T;T"]                                 + tempVal;
              if nonblank(PRr.MotherCode) and (PRr.MotherCode!="") then begin
                QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";" & PRr.MotherCode] = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";" & PRr.MotherCode] + tempVal;
                QuartVect[k & ";" & TBBUrw.ArtCode & ";" & PRr.MotherCode]                 = QuartVect[k & ";" & TBBUrw.ArtCode & ";" & PRr.MotherCode]                 + tempVal;
                QuartVect[k & ";" & group &         ";" & PRr.MotherCode]                 = QuartVect[k & ";" & group &         ";" & PRr.MotherCode]                 + tempVal;
                QuartVect[k & ";" &                "T;" & PRr.MotherCode]                 = QuartVect[k & ";" &                "T;" & PRr.MotherCode]                 + tempVal;
              end;
              if (RepSpec.f2=="2016") then begin
                switch (ProjArray[PAi]) begin
                  case "2016.004":
                    tstr = "sT2";
                  case "2016.007":
                    tstr = "sT2";
                  case "2016.998":
                    tstr = "sT1";
                  otherwise
                    tstr = "sT3";
                end;
                QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";" & tstr] = QuartVect[k & ";" & TBBUrw.ArtCode & ":" & TBBUrw.Extras & ";" & tstr] + tempVal;
                QuartVect[k & ";" & TBBUrw.ArtCode & ";" & tstr]                      = QuartVect[k & ";" & TBBUrw.ArtCode & ";" & tstr]                      + tempVal;
                QuartVect[k & ";" & group &         ";" & tstr]                      = QuartVect[k & ";" & group &         ";" & tstr]                      + tempVal;
                QuartVect[k & ";" &                "T;" & tstr]                      = QuartVect[k & ";" &                "T;" & tstr]                      + tempVal;
              end;
						end;
					end; 
				end;
			end;
		end;
	end;
  
	TRr.TransDate = RepSpec.sStartDate;
	TrHs = true;
	while (loopkey("TransDate",TRr,1,TrHs)) begin
		if (TRr.TransDate > RepSpec.sEndDate) then begin
			TrHs = false;
		end;
		if (TrHs) then begin
			k = 0;
			k = GetQuartal(TRr.TransDate);
      if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
        k = 1;
      end;
			mtrw = matrowcnt(TRr);
			for (i=0;i<mtrw;i=i+1) begin
				matrowget(TRr,i,TRrw);
				if (TRrw.ovst==0 and (mid(TRrw.AccNumber,0,1)=="5")) then begin
					for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
            PRr.Code = ProjArray[PAi];
            ReadFirstMain(PRr,1,true);
						if(setinset(prjobjs[PAi],TRrw.Objects)) then begin
							for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
								if (setinset(ArtArrayWithoutGroups[j],TRrw.Objects)) then begin
                  INr.Objects = ArtArrayWithoutGroups[j];
                  ReadfirstKey("Objects",INr,1,true);
                  group = INr.Group;
									extras = "";
                  GetObjs("EXTRA",TRrw.Objects,extras);
                  if nonblank(extras) and !ExtInArr[extras] then begin
                    ExtInArr[extras] = true;
                    ExtArr[EAi] = extras;
                    EAi = EAi + 1;
                  end;
                  QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";" & ProjArray[PAi]] = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                  QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";T"]            = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";T"]            - TRrw.CredVal + TRrw.DebVal;
                  QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";" & ProjArray[PAi]]                = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";" & ProjArray[PAi]]                - TRrw.CredVal + TRrw.DebVal;
                  QuartVect[k & "F;" & group &                   ";" & ProjArray[PAi]]                = QuartVect[k & "F;" & group &                   ";" & ProjArray[PAi]]                - TRrw.CredVal + TRrw.DebVal;
                  QuartVect[k &                               "F;T;" & ProjArray[PAi]]                = QuartVect[k &                               "F;T;" & ProjArray[PAi]]                - TRrw.CredVal + TRrw.DebVal;
                  QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";T"]                                = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";T"]                                - TRrw.CredVal + TRrw.DebVal;
                  QuartVect[k & "F;" & group &                   ";T"]                                = QuartVect[k & "F;" & group &                   ";T"]                                - TRrw.CredVal + TRrw.DebVal;
                  QuartVect[k &                               "F;T;T"]                                = QuartVect[k &                               "F;T;T"]                                - TRrw.CredVal + TRrw.DebVal;
                  if nonblank (PRr.MotherCode) and (PRr.MotherCode!="") then begin
                    QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";" & PRr.MotherCode] = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";" & PRr.MotherCode] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";" & PRr.MotherCode]                = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";" & PRr.MotherCode]                - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[k & "F;" & group &                   ";" & PRr.MotherCode]                = QuartVect[k & "F;" & group &                   ";" & PRr.MotherCode]                - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[k &                               "F;T;" & PRr.MotherCode]                = QuartVect[k &                               "F;T:" & PRr.MotherCode]                - TRrw.CredVal + TRrw.DebVal;
                  end;
                  if (RepSpec.f2=="2016") then begin
                    switch (ProjArray[PAi]) begin
                      case "2016.004":
                        tstr = "sT2";
                      case "2016.007":
                        tstr = "sT2";
                      case "2016.998":
                        tstr = "sT1";
                      otherwise
                        tstr = "sT3";
                    end;
                    QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";" & tstr] = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ":" & extras & ";" & tstr] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";" & tstr]                     = QuartVect[k & "F;" & ArtArrayWithoutGroups[j] & ";" & tstr]                     - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[k & "F;" & group &                   ";" & tstr]                     = QuartVect[k & "F;" & group &                   ";" & tstr]                     - TRrw.CredVal + TRrw.DebVal;
                    QuartVect[k &                               "F;T;" & tstr]                     = QuartVect[k &                               "F;T;" & tstr]                     - TRrw.CredVal + TRrw.DebVal;
                  end;
                end;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
  ExtArr[EAi] = "";
  EAi = EAi + 1;
  for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
    ProjArray2[PAi] = ProjArray[PAi];
  end;
  if blank(RepSpec.f1) and (RepSpec.f2=="2016") then begin
    PAi = 0;
    if (RepSpec.flags[6]==1) then begin
      ProjArray[PAi] = "2016.998";
      PAi = PAi + 1;
      ProjArray[PAi] = "sT1";
      PAi = PAi + 1;
    end;
    ProjArray[PAi] = "2016.004";
    PAi = PAi + 1;
    ProjArray[PAi] = "2016.007";
    PAi = PAi + 1;
    ProjArray[PAi] = "sT2";
    PAi = PAi + 1;
    for (i=0;i<ProjArray2.length;i=i+1) begin
      testf = true;
      switch (ProjArray2[i]) begin
        case "2016.004":
          testf = false;
        case "2016.007":
          testf = false;
        case "2016.998":
          testf = false;
      end;
      if (testf) then begin
        ProjArray[PAi] = ProjArray2[i];
        PAi = PAi + 1;
      end;
    end;
    ProjArray[PAi] = "sT3";
  end;
	RETURN;
END;

global
procedure ProjectStatRn(record RcVc RepSpec, var string fnserv, var string md5str, var boolean PrjFoundf)
BEGIN
	record BaseCurBlock BCb;
	record ITVc ITr;
	record INVc INr;
	record ObjVc Objr;
	array string 10 ArtArrayWithoutGroups,ArtArrayWithGroups,ProjArray,ProjArray2,ExtArr;
	vector val QuartVect;
	vector boolean isMotherProjVect;
	vector string 255 ProjNamesVect;
	integer i,j,k,l,m,Wi,PAi,quartCount,prjInRow,PAlen,Qi,incWi,pos,combcnt;
	string 10 group,nextgroup,tstr;
	boolean lastBigRow,ArtExtNonBlank,ExtPrinted;
  array integer quartToPrint;
  val bud,fact,totbud,totfact;
  string 100 tstr2;
  array string 100 combarr;
  vector boolean combExist;
  
	array string 10 sheetNames;
	array val sheetColls;
	array integer sheetCollsOutLvl;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
	array string 225 mas;
  area areatofile;

  ArraysCollect(RepSpec,ArtArrayWithoutGroups,ProjArray,ProjNamesVect,ArtArrayWithGroups,PrjFoundf,isMotherProjVect);
	if (PrjFoundf) then begin
		DataCollect(ArtArrayWithoutGroups,ExtArr,ProjArray,ProjArray2,RepSpec,QuartVect);
    
    GetVectorTags(QuartVect,combarr);
    combcnt = combarr.length; 
    for (i=0;i<combcnt;i=i+1) begin
      pos = 0;
      ExtractObjWithSeparator(";",combarr[i],false,pos,tstr);
      ExtractObjWithSeparator(";",combarr[i],false,pos,tstr);
      combExist[tstr] = true;
    end;
		
    reportName = "ProjectStatRn";
		if(windowsmode==1)then begin
      fileToSave = DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end else begin
			fileToSave = "/" & DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end;
		deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
		BlockLoad(BCb);
		if nonblank(RepSpec.f1) then begin
      sheetNames[0] = RepSpec.f1 & "-TOT";
    end else begin
      sheetNames[0] = "Projects-TOT";
      for (i=1;i<=ProjArray2.length;i=i+1) begin
        sheetNames[i] = ProjArray2[i-1] & "-TOT";
      end;
    end;
		qtyOfSheets = sheetNames.length;
		quartCount = RepSpec.flags[1] + RepSpec.flags[2] + RepSpec.flags[3] + RepSpec.flags[4];
		
    if (RepSpec.flags[4]==1) then begin
			i = 4;
		end;
		if (RepSpec.flags[3]==1) then begin
			i = 3;
		end;
		if (RepSpec.flags[2]==1) then begin
			i = 2;
		end;
		if (RepSpec.flags[1]==1) then begin
			i = 1;
		end;
		quartToPrint[0] = i;
		for (i=1;i<quartCount;i=i+1) begin
			quartToPrint[i] = quartToPrint[0] + i;
		end;
    
		prjInRow = StringToInt(RepSpec.f3);
		if (ProjArray.length + 1) < prjInRow then begin
      prjInRow = ProjArray.length;
			if blank(RepSpec.f1) then begin
        prjInRow = prjInRow + 1;
      end;
		end;
		
		colnum = 0;
		sheetColls[colnum] = 2.140625;
		colnum = colnum + 1;
    sheetColls[colnum] = 5.85546871;
		colnum = colnum + 1;
		sheetColls[colnum] = 21.28515625;
		colnum = colnum + 1;
		sheetColls[colnum] = 3.42578125;
		colnum = colnum + 1;
		for (k=0;k<prjInRow;k=k+1) begin
			for (i=0;i<quartCount;i=i+1) begin
				sheetColls[colnum] = 9.7109371;
				colnum = colnum + 1;
        sheetColls[colnum] = 9.7109371;
        if quartCount>1 then begin
          sheetCollsOutLvl[colnum] = RepSpec.flags[5];
        end;
        colnum = colnum + 1;
			end;
      if quartCount>1 then begin
        sheetColls[colnum] = 10.5703125;
        colnum = colnum + 1;
        sheetColls[colnum] = 10.5703125;
        sheetCollsOutLvl[colnum] = RepSpec.flags[5];
        colnum = colnum + 1;
      end;
			sheetColls[colnum] = 10.5703125;
      if quartCount>1 then begin
        sheetCollsOutLvl[colnum] = RepSpec.flags[5];
      end;
			colnum = colnum + 1;
			sheetColls[colnum] = 6.140625;
      if quartCount>1 then begin
        sheetCollsOutLvl[colnum] = RepSpec.flags[5];
      end;
			colnum = colnum + 1;
			if k != (prjInRow - 1) then begin
				sheetColls[colnum] = 1.7109371;
        colnum = colnum + 1;
			end;
		end;
		colnum = 0;
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		sheetnum = 1;
		qtyMergeCell = 0;
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
		SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
      Wi = 0;
      rownum = 1;
      colnum = 1;
      BeginRow(sheetnum,fileToSave,rownum,0,19.5);
        style = 17;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Project Statistics " & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        qtyOfEmpStr = (quartCount*2 + 5)*prjInRow + 2;
        if quartCount<2 then begin
          qtyOfEmpStr = qtyOfEmpStr - 2*prjInRow;
        end;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
      rownum = rownum + 1;
      colnum = 1;
      BeginRow(sheetnum,fileToSave,rownum,0,blankval);
        style = 1;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 2;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,":" & RepSpec.sStartDate & "-" & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
      EndRow(sheetnum,fileToSave,rownum);
      BeginRow(sheetnum,fileToSave,rownum,0,8);
      EndRow(sheetnum,fileToSave,rownum);
      colnum = 1;
      BeginRow(sheetnum,fileToSave,rownum,0,blankval);
        style = 3;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 4;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,":USD",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
      EndRow(sheetnum,fileToSave,rownum);
      PAlen = ProjArray.length - 1;
      while (Wi <= PAlen) begin
        if ((ProjArray.length - mod((ProjArray.length - Wi),prjInRow))/Wi == 1) then begin
          prjInRow = ProjArray.length - Wi;
        end;
        if (ProjArray.length<prjInRow) then begin
          prjInRow = ProjArray.length;
        end;
        if nonblank(RepSpec.f1) then begin
          if prjInRow>ProjArray.length then begin
            prjInRow = ProjArray.length;
          end;
        end;
        incWi = prjInRow;
        rownum = rownum + 1;
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,4);
          for (k=0;k<prjInRow;k=k+1) begin
            PAi = Wi + k;
            if left(ProjArray[PAi],2)=="sT" then begin
              incWi = k + 1;
              k = prjInRow;
              style = 12;
            end else begin
              style = 46;
            end;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if left(ProjArray[PAi],2)=="sT" then begin
              style = 13;
            end else begin
              style = 47;
            end;
            qtyOfEmpStr = quartCount*2 + 3;
            if quartCount<2 then begin
              qtyOfEmpStr = qtyOfEmpStr - 2;
            end;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 83;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          end;
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          for (k=0;k<prjInRow;k=k+1) begin
            PAi = Wi + k;
            mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
            if left(ProjArray[PAi],2)=="sT" then begin
              k = prjInRow;
              style = 105;
            end else begin
              if isMotherProjVect[ProjArray[PAi]] then begin
                style = 107;
              end else begin
                style = 109;
              end;
            end;
            if left(ProjArray[PAi],2)=="sT" then begin
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"Subtotal",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            end else begin
              StringCell(sheetnum,fileToSave,colnum,rownum,style,StrReplace(ProjArray[PAi],RepSpec.f2 & ".","") & " - " & ProjNamesVect[ProjArray[PAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            end;
            if left(ProjArray[PAi],2)=="sT" then begin
              style = 106;
            end else begin
              if isMotherProjVect[ProjArray[PAi]] then begin
                style = 108;
              end else begin
                style = 110;
              end;
            end;
            qtyOfEmpStr = quartCount*2 + 3;
            if quartCount<2 then begin
              qtyOfEmpStr = qtyOfEmpStr - 2;
            end;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
            qtyMergeCell = qtyMergeCell + 1;
            style = 83;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          end;
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,4);
          for (k=0;k<prjInRow;k=k+1) begin
            PAi = Wi + k;
            if left(ProjArray[PAi],2)=="sT" then begin
              k = prjInRow;
              style = 14;
            end else begin
              if isMotherProjVect[ProjArray[PAi]] then begin
                style = 48;
              end else begin
                style = 43;
              end;
            end;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if left(ProjArray[PAi],2)=="sT" then begin
              style = 15;
            end else begin
              if isMotherProjVect[ProjArray[PAi]] then begin
                style = 49;
              end else begin
                style = 44;
              end;
            end;
            qtyOfEmpStr = quartCount*2 + 3;
            if quartCount<2 then begin
              qtyOfEmpStr = qtyOfEmpStr - 2;
            end;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 83;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          end;
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,8);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          for (k=0;k<prjInRow;k=k+1) begin
            PAi = Wi + k;
            if left(ProjArray[PAi],2)=="sT" then begin
              k = prjInRow;
              style = 40;
            end else begin
              style = 50;
            end;
            for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
              if nonblank(RepSpec.f4) then begin
                StringCell(sheetnum,fileToSave,colnum,rownum,style,MonthName(RepSpec.sStartDate),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              end else begin
                StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              end;
              if left(ProjArray[PAi],2)=="sT" then begin
                style = 41;
              end else begin
                style = 52;
              end;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              if left(ProjArray[PAi],2)=="sT" then begin
                style = 42;
              end else begin
                style = 51;
              end;
            end;
            if quartCount>1 then begin
              if left(ProjArray[PAi],2)=="sT" then begin
                style = 38;
              end else begin
                style = 33;
              end;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              if left(ProjArray[PAi],2)=="sT" then begin
                style = 39;
              end else begin
                style = 56;
              end;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            end;
            style = 37;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 18;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            colnum = colnum + 1;
          end;
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,8);
        EndRow(sheetnum,fileToSave,rownum);
        for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
          if combExist[ArtArrayWithGroups[i]] then begin
            m = 1;
            while !combExist[ArtArrayWithGroups[i+m]] and (m+i<ArtArrayWithGroups.length) begin
              m = m + 1;
            end;
            INr.Objects = ArtArrayWithGroups[i+m];
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              nextgroup = ITr.Code;
            end else begin
              nextgroup = ArtArrayWithGroups[i+m];
            end;
            INr.Objects = ArtArrayWithGroups[i];
            ReadfirstKey("Objects",INr,1,true);
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end else begin
              ITr.Code = ArtArrayWithGroups[i];
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end;
            if ArtArrayWithGroups[i]==group then begin
              colnum = 1;
              BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                style = 7;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,StrReplace(group,"_16","000"),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 8;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                for (k=0;k<prjInRow;k=k+1) begin
                  PAi = Wi + k;
                  totbud = 0;
                  totfact = 0;
                  for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                    if left(ProjArray[PAi],2)=="sT" then begin
                      k = prjInRow;
                      style = 66;
                    end else begin
                      style = 64;
                    end;
                    bud = QuartVect[quartToPrint[Qi] & ";" & group & ";" & ProjArray[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                    totbud = totbud + bud;
                    if left(ProjArray[PAi],2)=="sT" then begin
                      style = 79;
                    end else begin
                      style = 89;
                    end;
                    fact = QuartVect[quartToPrint[Qi] & "F;" & group & ";" & ProjArray[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                    totfact = totfact + fact;
                  end;
                  if quartCount>1 then begin
                    if left(ProjArray[PAi],2)=="sT" then begin
                      style = 67;
                    end else begin
                      style = 58;
                    end;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                    if left(ProjArray[PAi],2)=="sT" then begin
                      style = 81;
                    end else begin
                      style = 89;
                    end;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                  end;
                  style = 73;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                  style = 75;
                  if (totfact == 0) then begin
                    qtyOfEmpStr = 1;
                    EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  end else begin
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                  end;
                  colnum = colnum + 1;
                end;
              EndRow(sheetnum,fileToSave,rownum);
            end else begin
              colnum = 1;
              BeginRow(sheetnum,fileToSave,rownum,RepSpec.flags[5],blankval);
                style = 5;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                Objr.Code = ArtArrayWithGroups[i];
                readfirstmain(Objr,1,true);
                style = 6;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                for (k=0;k<prjInRow;k=k+1) begin
                  PAi = Wi + k;
                  if left(ProjArray[PAi],2)=="sT" then begin
                    style = 77;
                  end else begin
                    style = 70;
                  end;
                  totbud = 0;
                  totfact = 0;
                  for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                    bud = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ";" & ProjArray[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                    totbud = totbud + bud;
                    if left(ProjArray[PAi],2)=="sT" then begin
                      k = prjInRow;
                      style = 80;
                    end else begin
                      style = 90;
                    end;
                    fact = QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ";" & ProjArray[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                    totfact = totfact + fact;
                    if left(ProjArray[PAi],2)=="sT" then begin
                      style = 78;
                    end else begin
                      style = 71;
                    end;
                  end;
                  if quartCount>1 then begin
                    if left(ProjArray[PAi],2)=="sT" then begin
                      style = 72;
                    end else begin
                      style = 59;
                    end;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                    if left(ProjArray[PAi],2)=="sT" then begin
                      style = 82;
                    end else begin
                      style = 92;
                    end;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                  end;
                  style = 74;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                  style = 76;
                  if (totbud == 0) then begin
                    qtyOfEmpStr = 1;
                    EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  end else begin
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                  end;
                  colnum = colnum + 1;
                end;
              EndRow(sheetnum,fileToSave,rownum);
              ExtPrinted = false;
              for (j=0;j<ExtArr.length;j=j+1) begin
                if (blank(ExtArr[j]) and ExtPrinted) or nonblank(ExtArr[j]) then begin
                  if combExist[ArtArrayWithGroups[i] & ":" & ExtArr[j]] then begin
                    ArtExtNonBlank = false;
                    for (k=0;k<prjInRow;k=k+1) begin
                      for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                        l = Wi + k;
                        if QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray[l]]!=0 or QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray[l]]!=0 then begin
                          ArtExtNonBlank = true;
                        end;
                      end;
                      if left(ProjArray[l],2)=="sT" then begin
                        k = prjInRow;
                      end;
                    end;
                    if ArtExtNonBlank then begin
                      ExtPrinted = true;
                      colnum = 2;
                      BeginRow(sheetnum,fileToSave,rownum,RepSpec.flags[5]*2,blankval);
                        style = 98;
                        StringCell(sheetnum,fileToSave,colnum,rownum,style,ExtArr[j],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        Objr.Code = ExtArr[j];
                        if ExtArr[j]=="" then begin
                          Objr.Code = ArtArrayWithGroups[i];
                        end;
                        readfirstmain(Objr,1,true);
                        style = 99;
                        StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        style = 96;
                        qtyOfEmpStr = 1;
                        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        for (k=0;k<prjInRow;k=k+1) begin
                          PAi = Wi + k;
                          if left(ProjArray[PAi],2)=="sT" then begin
                            k = prjInRow;
                            style = 100;
                          end else begin
                            style = 93;
                          end;
                          totbud = 0;
                          totfact = 0;
                          for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                            bud = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray[PAi]];
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                            totbud = totbud + bud;
                            if left(ProjArray[PAi],2)=="sT" then begin
                              style = 102;
                            end else begin
                              style = 60;
                            end;
                            fact = QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray[PAi]];
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                            totfact = totfact + fact;
                            if left(ProjArray[PAi],2)=="sT" then begin
                              style = 101;
                            end else begin
                              style = 94;
                            end;
                          end;
                          if quartCount>1 then begin
                            if left(ProjArray[PAi],2)=="sT" then begin
                              style = 103;
                            end else begin
                              style = 95;
                            end;
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                            if left(ProjArray[PAi],2)=="sT" then begin
                              style = 104;
                            end else begin
                              style = 60;
                            end;
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                          end;
                          style = 62;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                          style = 61;
                          if (totbud == 0) then begin
                            qtyOfEmpStr = 1;
                            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                          end else begin
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                          end;
                          colnum = colnum + 1;
                        end;
                      EndRow(sheetnum,fileToSave,rownum);
                    end;
                  end;
                end;
              end;
              if ArtArrayWithGroups[i+m]==nextgroup or blank(ArtArrayWithGroups[i+m]) then begin
                colnum = 5;
                BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                  style = 32;
                  for (k=0;k<prjInRow;k=k+1) begin
                    PAi = Wi + k;
                    if left(ProjArray[PAi],2)=="sT" then begin
                      k = prjInRow;
                    end;
                    qtyOfEmpStr = quartCount*2 + 4;
                    if quartCount<2 then begin
                      qtyOfEmpStr = qtyOfEmpStr - 2;
                    end;
                    EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                    colnum = colnum + 1;
                  end;
                EndRow(sheetnum,fileToSave,rownum);
              end;
            end;
          end;
        end;
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 10;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL COST :",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          for (k=0;k<prjInRow;k=k+1) begin
            PAi = Wi + k;
            totbud = 0;
            totfact = 0;
            for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
              style = 11;
              bud = QuartVect[quartToPrint[Qi] & ";T;" & ProjArray[PAi]];
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
              totbud = totbud + bud;
              if left(ProjArray[PAi],2)=="sT" then begin
                k = prjInRow;
                style = 79;
              end else begin
                style = 97;
              end;
              fact = QuartVect[quartToPrint[Qi] & "F;T;" & ProjArray[PAi]];
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
              totfact = totfact + fact;
            end;
            if quartCount>1 then begin
              if left(ProjArray[PAi],2)=="sT" then begin
                style = 67;
              end else begin
                style = 79;
              end;
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
              if left(ProjArray[PAi],2)=="sT" then begin
                style = 81;
              end else begin
                style = 79;
              end;
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
            end;
            colnum = colnum + 3;
          end;
        EndRow(sheetnum,fileToSave,rownum);
        rownum = rownum + 2;

        Wi = Wi + incWi;
      end;
      if blank(RepSpec.f1) then begin
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,4);
          style = 12;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 13;
          qtyOfEmpStr = quartCount*2 + 3;
          if quartCount<2 then begin
            qtyOfEmpStr = qtyOfEmpStr - 2;
          end;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 45;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
          style = 105;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL - Budget - " & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 106;
          qtyOfEmpStr = quartCount*2 + 3;
          if quartCount<2 then begin
            qtyOfEmpStr = qtyOfEmpStr - 2;
          end;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
          qtyMergeCell = qtyMergeCell + 1;
          style = 45;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,4);
          style = 14;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 15;
          qtyOfEmpStr = quartCount*2 + 3;
          if quartCount<2 then begin
            qtyOfEmpStr = qtyOfEmpStr - 2;
          end;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 45;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,8);
        EndRow(sheetnum,fileToSave,rownum);
        colnum = 5;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 40;
          for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
            StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 41;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 42;
          end;
          if quartCount>1 then begin
            style = 38;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Gr.Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 39;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Gr.Tot-F",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          end;
          style = 37;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 18;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        EndRow(sheetnum,fileToSave,rownum);
        BeginRow(sheetnum,fileToSave,rownum,0,8);
        EndRow(sheetnum,fileToSave,rownum);
        for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
          if combExist[ArtArrayWithGroups[i]] then begin
            m = 1;
            while !combExist[ArtArrayWithGroups[i+m]] and (m+i<ArtArrayWithGroups.length) begin
              m = m + 1;
            end;
            INr.Objects = ArtArrayWithGroups[i+m];
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              nextgroup = ITr.Code;
            end else begin
              nextgroup = ArtArrayWithGroups[i+m];
            end;
            INr.Objects = ArtArrayWithGroups[i];
            ReadfirstKey("Objects",INr,1,true);
            if ReadfirstKey("Objects",INr,1,true) then begin
              ITr.Code = INr.Group;
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end else begin
              ITr.Code = ArtArrayWithGroups[i];
              ReadFirstMain(ITr,1,true);
              group = ITr.Code;
            end;
            if ArtArrayWithGroups[i]==group then begin
              colnum = 1;
              BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                style = 7;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,StrReplace(group,"_16","000"),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 8;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                totbud = 0;
                totfact = 0;
                for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                  style = 11;
                  bud = QuartVect[quartToPrint[Qi] & ";" & group & ";T"];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                  totbud = totbud + bud;
                  style = 28;
                  fact = QuartVect[quartToPrint[Qi] & "F;" & group & ";T"];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                  totfact = totfact + fact;
                end;
                if quartCount>1 then begin
                  style = 16;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                  style = 30;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                end;
                style = 22;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                style = 24;
                if (totbud == 0) then begin
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                end else begin
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                end;
              EndRow(sheetnum,fileToSave,rownum);
            end else begin
              colnum = 1;
              BeginRow(sheetnum,fileToSave,rownum,RepSpec.flags[5],blankval);
                style = 5;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                Objr.Code = ArtArrayWithGroups[i];
                readfirstmain(Objr,1,true);
                style = 6;
                StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                colnum = colnum + 1;
                style = 26;
                totbud = 0;
                totfact = 0;
                for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                  bud = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ";T"];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                  totbud = totbud + bud;
                  style = 29;
                  fact = QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ";T"];
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                  totfact = totfact + fact;
                  style = 27;
                end;
                if quartCount>1 then begin
                  style = 21;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                  style = 31;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                end;
                style = 23;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                style = 25;
                if (totbud == 0) then begin
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                end else begin
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                end;
              EndRow(sheetnum,fileToSave,rownum);
              ExtPrinted = false;
              for (j=0;j<ExtArr.length;j=j+1) begin
                if (blank(ExtArr[j]) and ExtPrinted) or nonblank(ExtArr[j]) then begin
                  if combExist[ArtArrayWithGroups[i] & ":" & ExtArr[j]] then begin
                    ArtExtNonBlank = false;
                    for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                      if QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";T"]!=0 or QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";T"]!=0 then begin
                        ArtExtNonBlank = true;
                      end;
                    end;
                    if ArtExtNonBlank then begin
                      ExtPrinted = true;
                      colnum = 2;
                      BeginRow(sheetnum,fileToSave,rownum,RepSpec.flags[5]*2,blankval);
                        style = 98;
                        StringCell(sheetnum,fileToSave,colnum,rownum,style,ExtArr[j],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        Objr.Code = ExtArr[j];
                        if ExtArr[j]=="" then begin
                          Objr.Code = ArtArrayWithGroups[i];
                        end;
                        readfirstmain(Objr,1,true);
                        style = 99;
                        StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                        style = 96;
                        qtyOfEmpStr = 1;
                        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        style = 100;
                        totbud = 0;
                        totfact = 0;
                        for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                          bud = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";T"];
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                          totbud = totbud + bud;
                          style = 102;
                          fact = QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";T"];
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                          totfact = totfact + fact;
                          style = 101;
                        end;
                        if quartCount>1 then begin
                          style = 103;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                          style = 104;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                        end;
                        style = 62;
                        NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                        style = 61;
                        if (totbud == 0) then begin
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                        end else begin
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                        end;
                      EndRow(sheetnum,fileToSave,rownum);
                    end;
                  end;
                end;
              end;
              if ArtArrayWithGroups[i+m]==nextgroup or blank(ArtArrayWithGroups[i+m]) then begin
                colnum = 5;
                BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                  style = 32;
                  qtyOfEmpStr = quartCount*2 + 4;
                  if quartCount<2 then begin
                    qtyOfEmpStr = qtyOfEmpStr - 2;
                  end;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                EndRow(sheetnum,fileToSave,rownum);
              end;
            end;
          end;
        end;
        colnum = 1;
        BeginRow(sheetnum,fileToSave,rownum,0,blankval);
          style = 10;
          qtyOfEmpStr = 2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL COST :",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          totbud = 0;
          totfact = 0;
          for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
            style = 11;
            bud = QuartVect[quartToPrint[Qi] & ";T;T"];
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
            totbud = totbud + bud;
            style = 28;
            fact = QuartVect[quartToPrint[Qi] & "F;T;T"];
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
            totfact = totfact + fact;
          end;
          if quartCount>1 then begin
            style = 16;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
            style = 30;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
          end;
        EndRow(sheetnum,fileToSave,rownum);
      end;
    EndSheetData(sheetnum,fileToSave);
		MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
		EndSheet(sheetnum,fileToSave,0);
    
    if blank(RepSpec.f1) then begin
      cleararray(sheetColls);
      cleararray(sheetCollsOutLvl);
      colnum = 0;
      sheetColls[colnum] = 2.140625;
      colnum = colnum + 1;
      sheetColls[colnum] = 5.85546871;
      colnum = colnum + 1;
      sheetColls[colnum] = 21.28515625;
      colnum = colnum + 1;
      sheetColls[colnum] = 3.42578125;
      colnum = colnum + 1;
      for (i=0;i<quartCount;i=i+1) begin
        sheetColls[colnum] = 9.7109371;
        colnum = colnum + 1;
        sheetColls[colnum] = 9.7109371;
        if quartCount>1 then begin
          sheetCollsOutLvl[colnum] = RepSpec.flags[5];
        end;
        colnum = colnum + 1;
      end;
      if quartCount>1 then begin
        sheetColls[colnum] = 10.5703125;
        colnum = colnum + 1;
        sheetColls[colnum] = 10.5703125;
        sheetCollsOutLvl[colnum] = RepSpec.flags[5];
        colnum = colnum + 1;
      end;
      sheetColls[colnum] = 10.5703125;
      if quartCount>1 then begin
        sheetCollsOutLvl[colnum] = RepSpec.flags[5];
      end;
      colnum = colnum + 1;
      sheetColls[colnum] = 6.140625;
      if quartCount>1 then begin
        sheetCollsOutLvl[colnum] = RepSpec.flags[5];
      end;

      for (PAi=0;PAi<ProjArray2.length;PAi=PAi+1) begin
        sheetnum = sheetnum + 1;
        cleararray(mergeCell);
        qtyMergeCell = 0;
        SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
        BeginSheetData(sheetnum,fileToSave);
          rownum = 1;
          colnum = 1;
          BeginRow(sheetnum,fileToSave,rownum,0,19.5);
            style = 17;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Project Statistics " & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            qtyOfEmpStr = (quartCount*2 + 5) + 2;
            if quartCount<2 then begin
              qtyOfEmpStr = qtyOfEmpStr - 2;
            end;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          EndRow(sheetnum,fileToSave,rownum);
          rownum = rownum + 1;
          colnum = 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            style = 1;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 2;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,":" & RepSpec.sStartDate & "-" & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          EndRow(sheetnum,fileToSave,rownum);
          BeginRow(sheetnum,fileToSave,rownum,0,8);
          EndRow(sheetnum,fileToSave,rownum);
          colnum = 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            style = 3;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 4;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,":USD",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          EndRow(sheetnum,fileToSave,rownum);
          rownum = rownum + 1;
          colnum = 5;
          BeginRow(sheetnum,fileToSave,rownum,0,4);
            style = 46;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if left(ProjArray2[PAi],2)=="sT" then begin
              style = 13;
            end else begin
              style = 47;
            end;
            qtyOfEmpStr = quartCount*2 + 3;
            if quartCount<2 then begin
              qtyOfEmpStr = qtyOfEmpStr - 2;
            end;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 83;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          EndRow(sheetnum,fileToSave,rownum);
          colnum = 5;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
            if isMotherProjVect[ProjArray2[PAi]] then begin
              style = 107;
            end else begin
              style = 109;
            end;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,StrReplace(ProjArray2[PAi],RepSpec.f2 & ".","") & " - " & ProjNamesVect[ProjArray2[PAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            if isMotherProjVect[ProjArray2[PAi]] then begin
              style = 108;
            end else begin
              style = 110;
            end;
            qtyOfEmpStr = quartCount*2 + 3;
            if quartCount<2 then begin
              qtyOfEmpStr = qtyOfEmpStr - 2;
            end;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
            qtyMergeCell = qtyMergeCell + 1;
            style = 83;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          EndRow(sheetnum,fileToSave,rownum);
          colnum = 5;
          BeginRow(sheetnum,fileToSave,rownum,0,4);
            if isMotherProjVect[ProjArray2[PAi]] then begin
              style = 48;
            end else begin
              style = 43;
            end;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            if isMotherProjVect[ProjArray2[PAi]] then begin
              style = 49;
            end else begin
              style = 44;
            end;
            qtyOfEmpStr = quartCount*2 + 3;
            if quartCount<2 then begin
              qtyOfEmpStr = qtyOfEmpStr - 2;
            end;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 83;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          EndRow(sheetnum,fileToSave,rownum);
          BeginRow(sheetnum,fileToSave,rownum,0,8);
          EndRow(sheetnum,fileToSave,rownum);
          colnum = 5;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            style = 50;
            for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
              StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              if left(ProjArray2[PAi],2)=="sT" then begin
                style = 41;
              end else begin
                style = 52;
              end;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              if left(ProjArray2[PAi],2)=="sT" then begin
                style = 42;
              end else begin
                style = 51;
              end;
            end;
            if quartCount>1 then begin
              style = 33;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
              if left(ProjArray2[PAi],2)=="sT" then begin
                style = 39;
              end else begin
                style = 56;
              end;
              StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            end;
            style = 37;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 18;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          EndRow(sheetnum,fileToSave,rownum);
          BeginRow(sheetnum,fileToSave,rownum,0,8);
          EndRow(sheetnum,fileToSave,rownum);
          for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
            if combExist[ArtArrayWithGroups[i]] then begin
              m = 1;
              while !combExist[ArtArrayWithGroups[i+m]] and (m+i<ArtArrayWithGroups.length) begin
                m = m + 1;
              end;
              INr.Objects = ArtArrayWithGroups[i+m];
              if ReadfirstKey("Objects",INr,1,true) then begin
                ITr.Code = INr.Group;
                ReadFirstMain(ITr,1,true);
                nextgroup = ITr.Code;
              end else begin
                nextgroup = ArtArrayWithGroups[i+m];
              end;
              INr.Objects = ArtArrayWithGroups[i];
              ReadfirstKey("Objects",INr,1,true);
              if ReadfirstKey("Objects",INr,1,true) then begin
                ITr.Code = INr.Group;
                ReadFirstMain(ITr,1,true);
                group = ITr.Code;
              end else begin
                ITr.Code = ArtArrayWithGroups[i];
                ReadFirstMain(ITr,1,true);
                group = ITr.Code;
              end;
              if ArtArrayWithGroups[i]==group then begin
                colnum = 1;
                BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                  style = 7;
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,StrReplace(group,"_16","000"),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  style = 8;
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                  colnum = colnum + 1;
                  totbud = 0;
                  totfact = 0;
                  for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                    style = 64;
                    bud = QuartVect[quartToPrint[Qi] & ";" & group & ";" & ProjArray2[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                    totbud = totbud + bud;
                    style = 89;
                    fact = QuartVect[quartToPrint[Qi] & "F;" & group & ";" & ProjArray2[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                    totfact = totfact + fact;
                  end;
                  if quartCount>1 then begin
                    style = 58;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                    style = 89;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                  end;
                  style = 73;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                  style = 75;
                  if (totbud == 0) then begin
                    qtyOfEmpStr = 1;
                    EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  end else begin
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                  end;
                EndRow(sheetnum,fileToSave,rownum);
              end else begin
                colnum = 1;
                BeginRow(sheetnum,fileToSave,rownum,RepSpec.flags[5],blankval);
                  style = 5;
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                  qtyOfEmpStr = 1;
                  EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  Objr.Code = ArtArrayWithGroups[i];
                  readfirstmain(Objr,1,true);
                  style = 6;
                  StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                  colnum = colnum + 1;
                  style = 70;
                  totbud = 0;
                  totfact = 0;
                  for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                    bud = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ";" & ProjArray2[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                    totbud = totbud + bud;
                    style = 90;
                    fact = QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ";" & ProjArray2[PAi]];
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                    totfact = totfact + fact;
                    style = 71;
                  end;
                  if quartCount>1 then begin
                    style = 59;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                    style = 92;
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                  end;
                  style = 74;
                  NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                  style = 76;
                  if (totbud == 0) then begin
                    qtyOfEmpStr = 1;
                    EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  end else begin
                    NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                  end;
                EndRow(sheetnum,fileToSave,rownum);
                ExtPrinted = false;
                for (j=0;j<ExtArr.length;j=j+1) begin
                  if (blank(ExtArr[j]) and ExtPrinted) or nonblank(ExtArr[j]) then begin
                    if combExist[ArtArrayWithGroups[i] & ":" & ExtArr[j]] then begin
                      ArtExtNonBlank = false;
                      for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                        if QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray2[PAi]]!=0 or QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray2[PAi]]!=0 then begin
                          ArtExtNonBlank = true;
                        end;
                      end;
                      if ArtExtNonBlank then begin
                        ExtPrinted = true;
                        colnum = 2;
                        BeginRow(sheetnum,fileToSave,rownum,RepSpec.flags[5]*2,blankval);
                          style = 98;
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,ExtArr[j],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                          Objr.Code = ExtArr[j];
                          if ExtArr[j]=="" then begin
                            Objr.Code = ArtArrayWithGroups[i];
                          end;
                          readfirstmain(Objr,1,true);
                          style = 99;
                          StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
                          style = 96;
                          qtyOfEmpStr = 1;
                          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                          style = 93;
                          totbud = 0;
                          totfact = 0;
                          for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
                            bud = QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray2[PAi]];
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
                            totbud = totbud + bud;
                            if left(ProjArray2[PAi],2)=="sT" then begin
                              style = 102;
                            end else begin
                              style = 60;
                            end;
                            fact = QuartVect[quartToPrint[Qi] & "F;" & ArtArrayWithGroups[i] & ":" & ExtArr[j] & ";" & ProjArray2[PAi]];
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
                            totfact = totfact + fact;
                            style = 94;
                          end;
                          if quartCount>1 then begin
                            style = 95;
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
                            style = 60;
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact);
                          end;
                          style = 62;
                          NumericCell(sheetnum,fileToSave,colnum,rownum,style,totfact - totbud);
                          style = 61;
                          if (totbud == 0) then begin
                            qtyOfEmpStr = 1;
                            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                          end else begin
                            NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(totfact - totbud)/totbud);
                          end;
                        EndRow(sheetnum,fileToSave,rownum);
                      end;
                    end;
                  end;
                end;
                if ArtArrayWithGroups[i+m]==nextgroup or blank(ArtArrayWithGroups[i+m]) then begin
                  colnum = 5;
                  BeginRow(sheetnum,fileToSave,rownum,0,blankval);
                    style = 32;
                    qtyOfEmpStr = quartCount*2 + 4;
                    if quartCount<2 then begin
                      qtyOfEmpStr = qtyOfEmpStr - 2;
                    end;
                    EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                  EndRow(sheetnum,fileToSave,rownum);
                end;
              end;
            end;
          end;
          colnum = 1;
          BeginRow(sheetnum,fileToSave,rownum,0,blankval);
            style = 10;
            qtyOfEmpStr = 2;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL COST :",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            totbud = 0;
            totfact = 0;
            for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
              style = 11;
              bud = QuartVect[quartToPrint[Qi] & ";T;" & ProjArray2[PAi]];
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,bud);
              totbud = totbud + bud;
              style = 97;
              fact = QuartVect[quartToPrint[Qi] & "F;T;" & ProjArray2[PAi]];
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,fact);
              totfact = totfact + fact;
            end;
            if quartCount>1 then begin
              style = 79;
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
              style = 79;
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,totbud);
            end;
          EndRow(sheetnum,fileToSave,rownum);

        EndSheetData(sheetnum,fileToSave);
        MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
        EndSheet(sheetnum,fileToSave,0);
      end;
    end;
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
		ConvertToXLSX(fileToSave);
		MilliSleep(2000);
    fnserv = fileToSave;
    md5str = GetFileMD5(fnserv);
	end;
  RETURN;
END;