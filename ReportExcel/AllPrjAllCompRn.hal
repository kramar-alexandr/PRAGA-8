external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);
external function string 255 StrReplace(string,string,string);
external function integer GetQuartal(date);
external procedure GetObjs(string,string,var string);
external function string 4 QuartalIntToStr(integer);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 50 TimeToString(time,string,boolean);
external function string 255 MonthName(Date);
external function val AbsoluteVal(val);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPMRow(string,var row PMBlock);
external function roundmode SetRoundModeD(Integer);

procedure ArraysCollect(record RcVc RepSpec, var array string ProjArray, var vector string ProjNamesVect, var boolean PrjFoundf, var vector boolean isMotherProjVect)
BEGIN
	record ITVc ITr;
	record INVc INr;
	record PRVc PRr,PR2r;
	integer i,j,k,kw,kwo;
	boolean TrHs,testf,foundf;
	string 100 tstr;
  
	k = 0;
  resetloop(PRr);
	while (loopmain(PRr,1,true)) begin
    if (RepSpec.flags[6]==0) then begin
      switch (PRr.Code) begin
        case "2017.998":
          goto L1;
        case "2018.998":
          goto L1;
        case "2019.998":
          goto L1;
      end;
    end;
    if (RepSpec.flags[8]==0) then begin
      switch (PRr.Code) begin
        case "2017.013":
          goto L1;
        case "2018.013":
          goto L1;
        case "2019.013":
          goto L1;
      end;
    end;
    if (RepSpec.flags[9]==0) then begin
      switch (PRr.Code) begin
        case "2017.014":
          goto L1;
        case "2018.014":
          goto L1;
        case "2019.014":
          goto L1;
      end;
    end;
    if (RepSpec.flags[10]==0) then begin
      switch (PRr.Code) begin
        case "2017.015":
          goto L1;
        case "2018.015":
          goto L1;
        case "2019.015":
          goto L1;
      end;
    end;
    if (RepSpec.flags[11]==0) then begin
      switch (PRr.Code) begin
        case "2017.016":
          goto L1;
        case "2018.016":
          goto L1;
        case "2019.016":
          goto L1;
      end;
    end;
    
    
    
    
    
    
		if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
			ProjArray[k] = PRr.Code;
			ProjNamesVect[PRr.Code] = PRr.Name;
			k = k + 1;
			if blank(PRr.MotherCode) or (PRr.MotherCode == "") then begin
				isMotherProjVect[PRr.Code] = true;
			end else begin
				isMotherProjVect[PRr.Code] = false;
			end;
		end;
L1:end;
	if (k==0) then begin
		PrjFoundf = false;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(var array string ProjArray,var array string CompArray,var vector string CompNamesVect,record RcVc RepSpec,var vector val QuartVect)
BEGIN
	record CompaniesBlock CBb;
  record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record INVc INr;
	record TRVc TRr;
	record MainVc Mainr;
	record ObjVc Objr;
  row CompaniesBlock CBrw;
	row TBBUVc TBBUrw;
	row TRVc TRrw;
	integer i,j,k,mtrw,PAi,compi,CBbmtrw,CAi,oldcomp;
	boolean TrHs,testf,kTestf;
	string 20 group,extras;
  array string 20 prjobjs;
  vector boolean ExtInArr;
  array string 10 tempProjArray;
  string 5 tstr;
  val tmpval;
  boolean TrHs2;
  record VIVc VIr;
  record OPVc OPr;
  record PDVc PDr;
  record BaseCurBlock bcur;
  record OPrsVc OPrsr;
  row VIVc VIrw;
  row OPVc OPrw,VIOPrw;
  row PMBlock PMrw;
  val sum,fr,to1,to2,br1,br2,opsum,trsum,paidsum;
  string 10 vicur;
  vector boolean ProjInArr;
  
  for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
    ProjInArr[ProjArray[PAi]] = true;
  end;
  
  oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
  end;
	for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
      prjobjs[PAi] = PRr.Objects;
      if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
				TBBUr.PRCode = PRr.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
        	mtrw = matrowcnt(TBBUr);
					k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
            if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
              k = 1;
            end;
						kTestf = false;
						if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
							kTestf = true;
						end;
						if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))) then begin
							if nonblank(RepSpec.f4) then begin
                tmpval = TBBUrw.MonthSum;
              end else begin
                tmpval = TBBUrw.Sum;
              end;
              QuartVect[ProjArray[PAi] & ";" & k] = QuartVect[ProjArray[PAi] & ";" & k] + tmpval;
              QuartVect[ProjArray[PAi] & ";T"]    = QuartVect[ProjArray[PAi] & ";T"]    + tmpval;
              QuartVect["T;" & k]                 = QuartVect["T;" & k]                 + tmpval;
              QuartVect["T;T"]                    = QuartVect["T;T"]                    + tmpval;
              if nonblank(PRr.MotherCode) and (PRr.MotherCode!="") then begin
                QuartVect[PRr.MotherCode & ";" & k] = QuartVect[PRr.MotherCode & ";" & k] + tmpval;
                QuartVect[PRr.MotherCode & ";T"]    = QuartVect[PRr.MotherCode & ";T"]    + tmpval;
              end;
						end;
					end;
				end;
			end;
		end;
	end;
  resetcompany(oldcomp);
  
  CAi = 0;
  blockload(CBb);
  CBbmtrw = matrowcnt(CBb);
  for (compi=0;compi<CBbmtrw;compi=compi+1) begin
    SetCompany(compi+1,false);
    matrowget(CBb,compi,CBrw);
    CompArray[CAi] = CBrw.ShortName;
    CompNamesVect[CompArray[CAi]] = CBrw.CompName;
    CAi = CAi + 1;
    if (RepSpec.flags[7]==0) then begin
      resetloop(TRr);
      TRr.TransDate = RepSpec.sStartDate;
      TrHs = true;
      while (loopkey("TransDate",TRr,1,TrHs)) begin
        if (TRr.TransDate > RepSpec.sEndDate) then begin
          TrHs = false;
        end;
        if (TrHs) then begin
          k = 0;
          k = GetQuartal(TRr.TransDate);
          if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
            k = 1;
          end;
          mtrw = matrowcnt(TRr);
          for (i=0;i<mtrw;i=i+1) begin
            matrowget(TRr,i,TRrw);
            if (TRrw.ovst==0 and (mid(TRrw.AccNumber,0,1)=="5")) then begin
              for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
                PRr.Code = ProjArray[PAi];
                ReadFirstMain(PRr,1,true);
                if(setinset(prjobjs[PAi],TRrw.Objects)) then begin
                  QuartVect["F;" & ProjArray[PAi] & ";" & k & ";" & CBrw.ShortName] = QuartVect["F;" & ProjArray[PAi] & ";" & k & ";" & CBrw.ShortName] - TRrw.CredVal + TRrw.DebVal;
                  QuartVect["F;" & ProjArray[PAi] & ";T"]                           = QuartVect["F;" & ProjArray[PAi] & ";T"]                           - TRrw.CredVal + TRrw.DebVal;
                  QuartVect["F;T;" & k & ";" & CBrw.ShortName]                      = QuartVect["F;T;" & k & ";" & CBrw.ShortName]                      - TRrw.CredVal + TRrw.DebVal;
                  QuartVect["F;T;T"]                                                = QuartVect["F;T;T"]                                                - TRrw.CredVal + TRrw.DebVal;
                  if nonblank (PRr.MotherCode) and (PRr.MotherCode!="") then begin
                    QuartVect["F;" & PRr.MotherCode & ";" & k & ";" & CBrw.ShortName] = QuartVect["F;" & PRr.MotherCode & ";" & k & ";" & CBrw.ShortName] - TRrw.CredVal + TRrw.DebVal;
                    QuartVect["F;" & PRr.MotherCode & ";T"]                           = QuartVect["F;" & PRr.MotherCode & ";T"]                           - TRrw.CredVal + TRrw.DebVal;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end else begin
      blockload(bcur);
      resetloop(VIr);
      VIr.InvDate = RepSpec.sStartDate;
      TrHs = true;
      while (loopkey("InvDate",VIr,1,TrHs)) begin
        testf = true;
        if (VIr.InvDate>RepSpec.sEndDate) then begin TrHs = false; testf = false; end;
        if (VIr.OKFlag==0) then begin testf = false; end;
        if (VIr.Invalid==1) then begin testf = false; end;
        if (testf) then begin
          sum = 0;
          paidsum = 0;
          PDr.Code = VIr.PayDeal;
          if (ReadFirstMain(PDr,1,true)) then begin
            if (PDr.PDType==kInvoiceTypeCash) then begin
              if (VIr.CurncyCode==bcur.BaseCur1) then begin
                sum = VIr.PayVal;
                paidsum = VIr.PayVal;
              end else begin
                TRr.Number = VIr.SerNr;
                TRr.IntYc = VIYc;
                if (ReadFirstMain(TRr,2,true)) then begin
                  mtrw = matrowcnt(TRr);
                  for (i=0;i<mtrw;i=i+1) begin
                    matrowget(TRr,i,TRrw);
                    if (TRrw.ovst==0 and (TRrw.AccNumber==PDr.pdCashAcc)) then begin
                      sum = AbsoluteVal(TRrw.CredVal - TRrw.DebVal);
                      paidsum = VIr.PayVal;
                      i = mtrw;
                    end;
                  end;
                end;
              end;
            end;
          end;
          if (sum==0) then begin
            resetloop(OPrsr);
            OPrsr.VINr = VIr.SerNr;
            TrHs2 = true;
            while (LoopKey("VIKey",OPrsr,1,TrHs2)) begin
              if (OPrsr.VINr<>VIr.SerNr) then begin TrHs2 = false; end;
              if (TrHs2) then begin
                if (OPrsr.TransType==kOPrsTransTypePayment) then begin
                  OPr.SerNr = OPrsr.TransNr;
                  if (ReadFirstMain(OPr,1,true)) then begin
                    if ((OPr.DoneFlag!=0) and (OPr.TransDate==OPrsr.TransDate)) then begin
                      mtrw = MatRowCnt(OPr);
                      GetPMRow(OPr.PayMode,PMrw);
                      for (i=0;i<mtrw;i=i+1) begin
                        MatRowGet(OPr,i,VIOPrw);
                        if ((VIOPrw.ovst==0) and (VIOPrw.VISerNr==VIr.SerNr) and (VIOPrw.stp==kPaymentRowTypeNormal)) then begin
                          i = mtrw;
                        end;
                      end;
                      opsum = 0;
                      for (i=0;i<mtrw;i=i+1) begin
                        MatRowGet(OPr,i,OPrw);
                        if ((OPrw.ovst==0) and (OPrw.BankCurncy==VIOPrw.BankCurncy) and (OPrw.stp==kPaymentRowTypeNormal)) then begin
                          opsum = opsum + OPrw.BankVal;
                        end;
                      end;
                      TRr.Number = OPr.SerNr;
                      TRr.IntYc = OPYc;
                      if (ReadFirstMain(TRr,2,true)) then begin
                        mtrw = matrowcnt(TRr);
                        trsum = 0;
                        for (j=0;j<mtrw;j=j+1) begin
                          matrowget(TRr,j,TRrw);
                          if (TRrw.ovst==0 and (TRrw.AccNumber==PMrw.AccNr) and (TRrw.Curncy==VIOPrw.BankCurncy)) then begin
                            trsum = trsum + AbsoluteVal(TRrw.CredVal - TRrw.DebVal);
                          end;
                        end;
                      end;
                      sum = sum + VIOPrw.BankVal/opsum*trsum;
                      paidsum = paidsum + VIOPrw.RecVal;
                    end;
                  end;
                end;
              end;
            end;
          end;
          if (sum==0) then begin
            fr = 0;
            to1 = 0;
            to2 = 0;
            br1 = 0;
            br2 = 0;
            tstr = VIr.CurncyCode;
            GetFullCurncyRate(tstr,VIr.TransDate,fr,to1,to2,br1,br2);
            if (fr==0) or (fr==blankval) then begin fr = VIr.FrRate; end;
            if (br1==0) or (br1==blankval) then begin br1 = VIr.BaseRate1; end;
            if (br2==0) or (br2==blankval) then begin br2 = VIr.BaseRate2; end;
            if (to1==0) or (to1==blankval) then begin to1 = VIr.ToRateB1; end;
            if (to2==0) or (to2==blankval) then begin to2 = VIr.ToRateB2; end;
            sum = MulRateToBase1(tstr,VIr.PayVal,fr,to1,to2,br1,br2,SetRoundModeD(2));
            paidsum = VIr.PayVal;
          end;
          if (paidsum<VIr.PayVal) then begin
            fr = 0;
            to1 = 0;
            to2 = 0;
            br1 = 0;
            br2 = 0;
            tstr = VIr.CurncyCode;
            GetFullCurncyRate(tstr,VIr.TransDate,fr,to1,to2,br1,br2);
            if (fr==0) or (fr==blankval) then begin fr = VIr.FrRate; end;
            if (br1==0) or (br1==blankval) then begin br1 = VIr.BaseRate1; end;
            if (br2==0) or (br2==blankval) then begin br2 = VIr.BaseRate2; end;
            if (to1==0) or (to1==blankval) then begin to1 = VIr.ToRateB1; end;
            if (to2==0) or (to2==blankval) then begin to2 = VIr.ToRateB2; end;
            sum = sum + MulRateToBase1(tstr,(VIr.PayVal - paidsum),fr,to1,to2,br1,br2,SetRoundModeD(2));
          end;
          k = 0;
          k = GetQuartal(TRr.TransDate);
          if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
            k = 1;
          end;
          mtrw = matrowcnt(VIr);
          for (i=0;i<mtrw;i=i+1) begin
            matrowget(VIr,i,VIrw);
            PRr.Objects = VIrw.Prj;
            ReadFirstKey("Objects",PRr,1,true);
            if (ProjInArr[PRr.Code]) then begin
              tmpval = VIrw.Sum/VIr.PayVal*sum;
              
              QuartVect["F;" & PRr.Code & ";" & k & ";" & CBrw.ShortName] = QuartVect["F;" & PRr.Code & ";" & k & ";" & CBrw.ShortName] + tmpval;
              QuartVect["F;" & PRr.Code & ";T"]                           = QuartVect["F;" & PRr.Code & ";T"] + tmpval;
              QuartVect["F;T;" & k & ";" & CBrw.ShortName]                = QuartVect["F;T;" & k & ";" & CBrw.ShortName] + tmpval;
              QuartVect["F;T;T"]                                          = QuartVect["F;T;T"] + tmpval;
              if nonblank (PRr.MotherCode) and (PRr.MotherCode!="") then begin
                QuartVect["F;" & PRr.MotherCode & ";" & k & ";" & CBrw.ShortName] = QuartVect["F;" & PRr.MotherCode & ";" & k & ";" & CBrw.ShortName] + tmpval;
                QuartVect["F;" & PRr.MotherCode & ";T"]                           = QuartVect["F;" & PRr.MotherCode & ";T"] + tmpval;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure AllPrjAllCompRn(record RcVc RepSpec, var string fnserv, var string md5str, var boolean PrjFoundf)
BEGIN
	record ObjVc Objr;
	array string 20 ProjArray,CompArray;
	vector val QuartVect;
	vector boolean isMotherProjVect;
	vector string 255 ProjNamesVect,CompNamesVect;
	integer i,CAi,PAi,quartCount,Qi,oldcomp;
	string 10 tstr;
  
	array integer quartToPrint;
	array string 10 sheetNames;
	array val sheetColls;
	array integer sheetCollsOutLvl;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
	array string 225 mas;
  area areatofile;
  array val totalbycp,totalall;
  
  logtext(0,"AllPrjAllCompRn");
  
  oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
  end;
  ArraysCollect(RepSpec,ProjArray,ProjNamesVect,PrjFoundf,isMotherProjVect);
	if (PrjFoundf) then begin
		DataCollect(ProjArray,CompArray,CompNamesVect,RepSpec,QuartVect);
    resetcompany(oldcomp);
    reportName = "AllPrjAllCompRn";
		if(windowsmode==1)then begin
      fileToSave = DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end else begin
			fileToSave = "/" & DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end;
		deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
		sheetNames[0] = "Sheet1";
    qtyOfSheets = sheetNames.length;
		quartCount = RepSpec.flags[1] + RepSpec.flags[2] + RepSpec.flags[3] + RepSpec.flags[4];
    if (RepSpec.flags[4]==1) then begin
			i = 4;
		end;
		if (RepSpec.flags[3]==1) then begin
			i = 3;
		end;
		if (RepSpec.flags[2]==1) then begin
			i = 2;
		end;
		if (RepSpec.flags[1]==1) then begin
			i = 1;
		end;
		quartToPrint[0] = i;
		for (i=1;i<quartCount;i=i+1) begin
			quartToPrint[i] = quartToPrint[0] + i;
		end;
		colnum = 0;
		sheetColls[colnum] = 1.42578125;
		colnum = colnum + 1;
    sheetColls[colnum] = 4.5703125;
		colnum = colnum + 1;
    sheetColls[colnum] = 21.28515625;
		colnum = colnum + 1;
    sheetColls[colnum] = 8.28515625;
		colnum = colnum + 1;
    sheetColls[colnum] = 10.85546875;
		colnum = colnum + 1;
    for (i=0;i<quartCount;i=i+1) begin
      sheetColls[colnum] = 13.7109375;
      sheetCollsOutLvl[colnum] = 1;
      colnum = colnum + 1;
      sheetColls[colnum] = 12.7109375;
      sheetCollsOutLvl[colnum] = 1;
      colnum = colnum + 1;
      for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin
        sheetColls[colnum] = 13.7109375;
        sheetCollsOutLvl[colnum] = 1;
        colnum = colnum + 1;
        sheetColls[colnum] = 12.7109375;
        sheetCollsOutLvl[colnum] = 1;
        colnum = colnum + 1;
      end;
    end;
    sheetColls[colnum] = 0.5703125;
    sheetCollsOutLvl[colnum] = 1;
		colnum = colnum + 1;
		sheetCollsOutLvl[colnum] = 1;
    sheetColls[colnum] = 0.42578125;
    colnum = colnum + 1;
		sheetColls[colnum] = 13.7109375;
    colnum = colnum + 1;
    sheetColls[colnum] = 12.7109375;
    colnum = colnum + 1;
    
    for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin
			sheetColls[colnum] = 13.7109375;
			colnum = colnum + 1;
			sheetColls[colnum] = 12.7109375;
			colnum = colnum + 1;
		end;
    sheetColls[colnum] = 13.7109375;
    colnum = colnum + 1;
    sheetColls[colnum] = 12.7109375;
    colnum = colnum + 1;
		sheetColls[colnum] = 11.5703125;
		colnum = colnum + 1;
    sheetColls[colnum] = 7.5703125;
		colnum = colnum + 1;
    colnum = 0;
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		sheetnum = 1;
		qtyMergeCell = 0;
    XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
		SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
      rownum = 1;
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,21);
        style = 52;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"All Project - " & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 20;
        qtyOfEmpStr = 6 + 2*CompArray.length;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
      rownum = rownum + 1;
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,blankval);
        style = 42;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period      :",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 59;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.sStartDate & "-" & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 42;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
      BeginRow(sheetnum,fileToSave,rownum,0,9.75);
      EndRow(sheetnum,fileToSave,rownum);
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,blankval);
        style = 21;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency :",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 60;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"USD",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 21;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
      rownum = rownum + 1;
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,22.5);
        mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
        style = 86;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"PROJECTs",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 87;
        qtyOfEmpStr = 2;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 88;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
        qtyMergeCell = qtyMergeCell + 1;
        for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
          style = 89;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"BUDGET-" & QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 90;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
          qtyMergeCell = qtyMergeCell + 1;
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
          style = 70;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,"FACT-" & QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          qtyOfEmpStr = (CompArray.length-1)*2;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 77;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
          qtyMergeCell = qtyMergeCell + 1;
        end;
        style = 22;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 26;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
        style = 70;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"GRAND TOTAL",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        qtyOfEmpStr = 4;
        for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:57:09
					qtyOfEmpStr = qtyOfEmpStr + 2;
				end;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 71;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
        qtyMergeCell = qtyMergeCell + 1;
      EndRow(sheetnum,fileToSave,rownum);
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,18.75);
        mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
        style = 82;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Name",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 83;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
        qtyMergeCell = qtyMergeCell + 1;
        mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
        style = 84;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Code",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 85;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
        qtyMergeCell = qtyMergeCell + 1;
        for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
          style = 43;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 44;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin
            style = 63;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,CompArray[CAi],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 18;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          end;
        end;
        style = 23;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 27;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
        
        style = 91;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"BUDGET-" & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 92;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
        qtyMergeCell = qtyMergeCell + 1;
        

				for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:55:28
					style = 63;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,CompArray[CAi],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 18;
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				end;
				
        mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
        style = 68;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:55:29
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"FACT-" & RepSpec.f2,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 69;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
        qtyMergeCell = qtyMergeCell + 1;
        
        style = 36;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"Delta,$",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        style = 39;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
      EndRow(sheetnum,fileToSave,rownum);
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,15.75);
        style = 3;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 5;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 10;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 4;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
          style = 45;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 46;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin
            style = 64;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,CompNamesVect[CompArray[CAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 19;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          end;
        end;
        style = 23;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 27;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 47;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 48;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        
        for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:55:23
            style = 64;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,CompNamesVect[CompArray[CAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 19;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				end;
        
        style = 31;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 32;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 37;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 40;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
      for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
        if isMotherProjVect[ProjArray[PAi]] then begin
          colnum = 2;
          BeginRow(sheetnum,fileToSave,rownum,0,24);
            style = 17;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjNamesVect[ProjArray[PAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 6;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 14;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[PAi],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 8;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
              style = 61;
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ProjArray[PAi] & ";" & quartToPrint[Qi]]);
              style = 62;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin
                style = 15;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;" & ProjArray[PAi] & ";" & quartToPrint[Qi] & ";" & CompArray[CAi]]);
                totalbycp[CAi] = totalbycp[CAi] + QuartVect["F;" & ProjArray[PAi] & ";" & quartToPrint[Qi] & ";" & CompArray[CAi]];// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 15:12:47
                totalall[CAi] = totalall[CAi] + QuartVect["F;" & ProjArray[PAi] & ";" & quartToPrint[Qi] & ";" & CompArray[CAi]];
                style = 6;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              end;
            end;
            style = 53;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 54;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 55;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ProjArray[PAi] & ";T"]);
            style = 51;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:55:23
                style = 15;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalbycp[CAi]);
                totalbycp[CAi] = 0;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 15:12:47
                style = 6;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end;
						style = 56;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;" & ProjArray[PAi] & ";T"]);
            style = 35;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 57;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;" & ProjArray[PAi] & ";T"] - QuartVect[ProjArray[PAi] & ";T"]);
            style = 58;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,(QuartVect["F;" & ProjArray[PAi] & ";T"] - QuartVect[ProjArray[PAi] & ";T"])/QuartVect[ProjArray[PAi] & ";T"]);
          EndRow(sheetnum,fileToSave,rownum);
        end else begin
          colnum = 2;
          BeginRow(sheetnum,fileToSave,rownum,0,15.75);
            style = 9;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 12;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjNamesVect[ProjArray[PAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            style = 7;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 13;
            StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[PAi],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
            for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
              style = 93;
              qtyOfEmpStr = 1;
              EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
              style = 94;
              NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ProjArray[PAi] & ";" & quartToPrint[Qi]]);
              for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin
                style = 7;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
                style = 16;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;" & ProjArray[PAi] & ";" & quartToPrint[Qi] & ";" & CompArray[CAi]]);
                totalbycp[CAi] = totalbycp[CAi] + QuartVect["F;" & ProjArray[PAi] & ";" & quartToPrint[Qi] & ";" & CompArray[CAi]];// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 15:12:47
              end;
            end;
            style = 24;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 28;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 49;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 50;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ProjArray[PAi] & ";T"]);
            
            for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 22 January 2019 13:59:54
                style = 7;
                NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalbycp[CAi]);
                totalbycp[CAi] = 0;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 22 January 2019 13:59:57
                style = 16;
                qtyOfEmpStr = 1;
                EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end;
            
            style = 33;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            style = 34;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;" & ProjArray[PAi] & ";T"]);
            style = 38;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;" & ProjArray[PAi] & ";T"] - QuartVect[ProjArray[PAi] & ";T"]);
            style = 41;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,(QuartVect["F;" & ProjArray[PAi] & ";T"] - QuartVect[ProjArray[PAi] & ";T"])/QuartVect[ProjArray[PAi] & ";T"]);
          EndRow(sheetnum,fileToSave,rownum);
        end;
      end;
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,4.5);
        style = 1;
        qtyOfEmpStr = 12 + quartCount*(CompArray.length + 1)*2;
        for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:55:23
					qtyOfEmpStr = qtyOfEmpStr + 2;
				end;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
      colnum = 2;
      BeginRow(sheetnum,fileToSave,rownum,0,4.5);
        style = 11;
        qtyOfEmpStr = 12 + quartCount*(CompArray.length + 1)*2;
        for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:55:23
					qtyOfEmpStr = qtyOfEmpStr + 2;
				end;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
      BeginRow(sheetnum,fileToSave,rownum,0,4.5);
      EndRow(sheetnum,fileToSave,rownum);
      colnum = 4;
      BeginRow(sheetnum,fileToSave,rownum,0,24.75);
        style = 67;
        StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL COST:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
          style = 72;
          NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["T;" & quartToPrint[Qi]]);
          style = 73;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
          qtyMergeCell = qtyMergeCell + 1;
          for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin
            mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
            style = 74;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;T;" & quartToPrint[Qi] & ";" & CompArray[CAi]]);
            style = 75;
            qtyOfEmpStr = 1;
            EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
            mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
            qtyMergeCell = qtyMergeCell + 1;
          end;
        end;
        style = 30;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 29;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 78;
        NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["T;T"]);
        style = 79;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        for (CAi=0;CAi<CompArray.length;CAi=CAi+1) begin// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 11:55:23
						style = 74;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalall[CAi]);
						totalall[CAi] = 0;// Edit ************************** BPI Ukraine - KramarAlexandr - Thursday, 13 September 2018 17:37:46
						style = 75;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				end;
        style = 80;
        NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;T;T"]);
        style = 81;
        qtyOfEmpStr = 1;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        style = 38;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["F;T;T"] - QuartVect["T;T"]);
				style = 41;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,(QuartVect["F;T;T"] - QuartVect["T;T"])/QuartVect["T;T"]);

      EndRow(sheetnum,fileToSave,rownum);
    EndSheetData(sheetnum,fileToSave);
    MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
    EndSheet(sheetnum,fileToSave,0);
    FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
		ConvertToXLSX(fileToSave);
		MilliSleep(2000);
    fnserv = fileToSave;
    md5str = GetFileMD5(fnserv);
	end;
  resetcompany(oldcomp);
  RETURN;
END;