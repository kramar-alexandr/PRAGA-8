external procedure GetObjs(string,string,var string);
external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer);
external procedure ConvertToXLSX(string);

function integer GetQuartal(date trDate)
begin
	integer res,i;
	i = GetMonth(trDate);
	switch (i) begin
		case 1 : res = 1;
		case 2 : res = 1;
		case 3 : res = 1;
		case 4 : res = 2;
		case 5 : res = 2;
		case 6 : res = 2;
		case 7 : res = 3;
		case 8 : res = 3;
		case 9 : res = 3;
		case 10 : res = 4;
		case 11 : res = 4;
		case 12 : res = 4;															
	end;
	
	GetQuartal = res;
return;	
end;


function boolean CollectSubTotals(record BudRep1Vc BRr,integer rownr,var array val subtotals)
begin
	row BudRep1Vc BRrw;
	integer rwcnt,i;
	val totSum;
	boolean res;
	
	ClearArray(subtotals);
	totSum = 0;
	res = true;
	rwcnt = MatRowCnt(BRr);
	i=rownr+1;
	MatRowGet(BRr,i,BRrw);
	while (blank(BRrw.CatName) and (i<rwcnt)) begin
		MatRowGet(BRr,i,BRrw);
		subtotals[0] = subtotals[0] + BRrw.Bud1;			//Quartal I
		subtotals[1] = subtotals[1] + BRrw.Spend1;		//Quartal I - Fact
		subtotals[2] = subtotals[2] + BRrw.Bud2;
		subtotals[3] = subtotals[3] + BRrw.Spend2;
		subtotals[4] = subtotals[4] + BRrw.Bud3;
		subtotals[5] = subtotals[5] + BRrw.Spend3;
		subtotals[6] = subtotals[6] + BRrw.Bud4;
		subtotals[7] = subtotals[7] + BRrw.Spend4;
		i=i+1;
	end;
	
	for(i=0;i<subtotals.length;i=i+1) begin
		totSum = totSum+subtotals[i];
	end;
	if (totSum==0) then begin res = false; end;
	
	CollectSubTotals = res;
return;
end;

procedure BRrCollect(record RcVc RepSpec, string AccStr, var string mainobjname, var string PRrName, var record BudRep1Vc BRr)
BEGIN
	record ObjVc Objr;
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record MainVc Mainr;
	record TRVc TRr;
	row TBBUVc TBBUrw;
	row BudRep1Vc BRrw;
	row TRVc TRrw;
	integer i,k,repi,mtrw,repmtrw,pos;
	boolean TrHs,testf;
	string 20 prjobj,vendobj,tstr;
	
	Objr.Code = RepSpec.f1;
	readfirstmain(Objr,1,true);
	mainobjname = Objr.Comment;
	repmtrw = matrowcnt(BRr);
	k=0;
	PRr.Code = RepSpec.f2;
	If (ReadFirstMain(PRr,1,true)) then begin
		if(PRr.StartDate>=RepSpec.sStartDate and PRr.StartDate<=RepSpec.sEndDate)then begin
			prjobj = PRr.Objects;
			TBBUr.PRCode = PRr.Code;
			if(readfirstmain(TBBUr,1,true))then begin
				mtrw = matrowcnt(TBBUr);
				k=0;
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(TBBUr,i,TBBUrw);
					
					if(TBBUrw.stp==18) then begin k=TBBUrw.ItemType; end;		//I,II,III,IV Quartal
					
					if(TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))then begin
						For(repi=0;repi<repmtrw;repi=repi+1) begin
							matrowget(BRr,repi,BRrw);
							if(setinset(BRrw.Code,TBBUrw.Objects) and (((setinset(BRrw.VECode,TBBUrw.VECode) and nonblank(BRrw.VECode)) or (blank(BRrw.VECode) and blank(TBBUrw.VECode)))) and (setinset(RepSpec.f1,TBBUrw.Objects) or blank(RepSpec.f1)))then begin
								switch(k) begin
									case 1:
										BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;
									case 2:
										BRrw.Bud2 = BRrw.Bud2 + TBBUrw.Sum;
									case 3:
										BRrw.Bud3 = BRrw.Bud3 + TBBUrw.Sum;
									case 4:
										BRrw.Bud4 = BRrw.Bud4 + TBBUrw.Sum;
									otherwise
										BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;	//I Quartal as default
								end;
								matrowput(BRr,repi,BRrw);
							end;
						end; 
					end;
				end; 
			end;
				
			PR2r.MotherCode = PRr.Code;
			TrHs = true;
			//Collect subprojects' budjets
			while(loopkey("MotherCode",PR2r,1,TrHs)) begin
				testf = true;
				if(PR2r.MotherCode!=PRr.Code)then begin TrHs = false; testf = false; end;
				if(PR2r.StartDate<RepSpec.sStartDate and PR2r.StartDate>RepSpec.sEndDate)then begin testf = false; end;
				if(testf)then begin
					TBBUr.PRCode = PR2r.Code;
					if(readfirstmain(TBBUr,1,true))then begin
						mtrw = matrowcnt(TBBUr);
						k = 0;
						For(i=0;i<mtrw;i=i+1) begin
							matrowget(TBBUr,i,TBBUrw);
							if(TBBUrw.stp==18) then begin k=TBBUrw.ItemType; end;		//I,II,III,IV Quartal									
							if(TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))then begin
								For(repi=0;repi<repmtrw;repi=repi+1) begin
									matrowget(BRr,repi,BRrw);
									if(setinset(BRrw.Code,TBBUrw.Objects) and ((setinset(BRrw.VECode,TBBUrw.VECode) and nonblank(BRrw.VECode)) or (blank(BRrw.VECode) and blank(TBBUrw.VECode))) and (setinset(RepSpec.f1,TBBUrw.Objects) or blank(RepSpec.f1)))then begin
										switch(k) begin
											case 1:
												BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;
											case 2:
												BRrw.Bud2 = BRrw.Bud2 + TBBUrw.Sum;
											case 3:
												BRrw.Bud3 = BRrw.Bud3 + TBBUrw.Sum;
											case 4:
												BRrw.Bud4 = BRrw.Bud4 + TBBUrw.Sum;
											otherwise
												BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;	//I Quartal as default
										end;
										matrowput(BRr,repi,BRrw);
									end;
								end; 
							end;
						end; 
					end;
				end;
			end;
		end;
	end;
	logtext(0,"BRrCollect: Bud1..4 COLLECTED");
	Mainr.TransDate = RepSpec.sStartDate;
	TrHs = true;
	while (loopkey("TransDate",Mainr,1,TrHs)) begin
		testf = true;
		if (!SetInSet(Mainr.AccNumber,AccStr)) then begin
			testf = false;
		end;
		if (Mainr.TransDate>RepSpec.sEndDate) then begin
			TrHs = false;
			testf = false;
		end;
		if (testf) then begin
			TRr.Number = Mainr.TransNr;
			TRr.IntYc = Mainr.IntYc;
			if (readfirstmain(TRr,2,true)) then begin
				mtrw = matrowcnt(TRr);
				for (i=0;i<mtrw;i=i+1) begin
					matrowget(TRr,i,TRrw);
					if (TRrw.ovst==0 and TRrw.AccNumber==Mainr.AccNumber) then begin
						if (setinset(RepSpec.f1,TRrw.Objects) or blank(RepSpec.f1)) then begin
							GetObjs("SUPPL",TRrw.Objects,vendobj);	//while... readfirstmain(Objr,1,true) ...end;
							for (repi=0;repi<repmtrw;repi=repi+1) begin
								matrowget(BRr,repi,BRrw);
								if ((nonblank(BRrw.CostAcc)) and (setinset(BRrw.Code,TRrw.Objects) and ((setinset(BRrw.VECode,TRrw.Objects) and nonblank(vendobj) and nonblank(BRrw.VECode)) or (blank(vendobj) and (blank(BRrw.VECode))))) and (setinset(prjobj,TRrw.Objects))) then begin
									k = GetQuartal(TRr.TransDate);
									switch (k) begin
										case 1:
											BRrw.Spend1 = BRrw.Spend1 - TRrw.CredVal + TRrw.DebVal;
										case 2:
											BRrw.Spend2 = BRrw.Spend2 - TRrw.CredVal + TRrw.DebVal;
										case 3:
											BRrw.Spend3 = BRrw.Spend3 - TRrw.CredVal + TRrw.DebVal;
										case 4:
											BRrw.Spend4 = BRrw.Spend4 - TRrw.CredVal + TRrw.DebVal;
										otherwise
											BRrw.Spend1 = BRrw.Spend1 - TRrw.CredVal + TRrw.DebVal;	//I Quartal as default
									end;													
									matrowput(BRr,repi,BRrw);
								end;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	logtext(0,"BRrCollect: Spend1..4 COLLECTED");
	PRrName = PRr.Name;
RETURN;
END;

procedure BRrCollectForFew(record RcVc RepSpec, string AccStr, array string PRrCodes, var string mainobjname, var array string PRrNames, var vector record BudRep1Vc ArrayBRr, record BudRep1Vc PatternBRr)
BEGIN
	record ObjVc Objr;
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record MainVc Mainr;
	record TRVc TRr;
	record BudRep1Vc BRr;
	row TBBUVc TBBUrw;
	row BudRep1Vc BRrw;
	row TRVc TRrw;
	integer i,k,PRi,repi,mtrw,repmtrw,pos;
	boolean TrHs,testf,foundf;
	string 20 vendobj,tstr;
	array string 20 prjobjs;
	
	Objr.Code = RepSpec.f1;
	readfirstmain(Objr,1,true);
	mainobjname = Objr.Comment;
	k=0;
	for (PRi=0;PRi<PRrCodes.length;PRi=PRi+1) begin
		BRr = PatternBRr;
		
		PRr.Code = PRrCodes[PRi];
		if (ReadFirstMain(PRr,1,true)) then begin
			if(PRr.StartDate>=RepSpec.sStartDate and PRr.StartDate<=RepSpec.sEndDate)then begin
				PRrNames[PRi] = PRr.Name;
				prjobjs[PRi] = PRr.Objects;
				TBBUr.PRCode = PRr.Code;
				if(readfirstmain(TBBUr,1,true))then begin
					mtrw = matrowcnt(TBBUr);
					k=0;
					For(i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						
						if(TBBUrw.stp==18) then begin k=TBBUrw.ItemType; end;		//I,II,III,IV Quartal
						
						if(TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))then begin
							foundf = false;
							if nonblank(TBBUrw.VECode) then begin
								repmtrw = matrowcnt(BRr);
								For(repi=0;repi<repmtrw;repi=repi+1) begin
									matrowget(BRr,repi,BRrw);
									if setinset(BRrw.Code,TBBUrw.Objects) and nonblank(BRrw.Code) and ((setinset(BRrw.VECode,TBBUrw.VECode) and nonblank(BRrw.VECode))) then begin
										foundf = true;
									end;
								end;
								if !foundf then begin
									For(repi=0;repi<repmtrw;repi=repi+1) begin
										matrowget(BRr,repi,BRrw);
										if (setinset(BRrw.Code,TBBUrw.Objects) and nonblank(BRrw.Code)) and  blank(BRrw.VECode) and blank(BRrw.CatName) then begin
											BRrw.Bud1 = blankval;
											BRrw.Bud2 = blankval;
											BRrw.Bud3 = blankval;
											BRrw.Bud4 = blankval;
											BRrw.Spend1 = blankval;
											BRrw.Spend2 = blankval;
											BRrw.Spend3 = blankval;
											BRrw.Spend4 = blankval;
											BRrw.VECode = TBBUrw.VECode;
											matrowinsert(BRr,repi+1,BRrw);
											repi = repmtrw;
										end;
									end;
								end;
							end;
							repmtrw = matrowcnt(BRr);
							For(repi=0;repi<repmtrw;repi=repi+1) begin
								matrowget(BRr,repi,BRrw);
								if (setinset(BRrw.Code,TBBUrw.Objects) and ((setinset(BRrw.VECode,TBBUrw.VECode) and nonblank(BRrw.VECode)) or (blank(BRrw.VECode) and blank(TBBUrw.VECode)))) then begin
									switch(k) begin
										case 1:
											BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;
										case 2:
											BRrw.Bud2 = BRrw.Bud2 + TBBUrw.Sum;
										case 3:
											BRrw.Bud3 = BRrw.Bud3 + TBBUrw.Sum;
										case 4:
											BRrw.Bud4 = BRrw.Bud4 + TBBUrw.Sum;
										otherwise
											BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;	//I Quartal as default
									end;
									matrowput(BRr,repi,BRrw);
								end;
							end;
						end;
					end; 
				end;
					
				PR2r.MotherCode = PRr.Code;
				TrHs = true;
				//Collect subprojects' budjets
				while(loopkey("MotherCode",PR2r,1,TrHs)) begin
					testf = true;
					if(PR2r.MotherCode!=PRr.Code)then begin TrHs = false; testf = false; end;
					if(PR2r.StartDate<RepSpec.sStartDate and PR2r.StartDate>RepSpec.sEndDate)then begin testf = false; end;
					if(testf)then begin
						TBBUr.PRCode = PR2r.Code;
						if(readfirstmain(TBBUr,1,true))then begin
							mtrw = matrowcnt(TBBUr);
							k = 0;
							For(i=0;i<mtrw;i=i+1) begin
								matrowget(TBBUr,i,TBBUrw);
								if(TBBUrw.stp==18) then begin k=TBBUrw.ItemType; end;		//I,II,III,IV Quartal									
								if(TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))then begin
									foundf = false;
									if nonblank(TBBUrw.VECode) then begin
										repmtrw = matrowcnt(BRr);
										For(repi=0;repi<repmtrw;repi=repi+1) begin
											matrowget(BRr,repi,BRrw);
											if setinset(BRrw.Code,TBBUrw.Objects) and nonblank(BRrw.Code) and ((setinset(BRrw.VECode,TBBUrw.VECode) and nonblank(BRrw.VECode))) then begin
												foundf = true;
											end;
										end;
										if !foundf then begin
											For(repi=0;repi<repmtrw;repi=repi+1) begin
												matrowget(BRr,repi,BRrw);
												if (setinset(BRrw.Code,TBBUrw.Objects) and nonblank(BRrw.Code)) and  blank(BRrw.VECode) and blank(BRrw.CatName) then begin
													BRrw.Bud1 = blankval;
													BRrw.Bud2 = blankval;
													BRrw.Bud3 = blankval;
													BRrw.Bud4 = blankval;
													BRrw.Spend1 = blankval;
													BRrw.Spend2 = blankval;
													BRrw.Spend3 = blankval;
													BRrw.Spend4 = blankval;
													BRrw.VECode = TBBUrw.VECode;
													matrowinsert(BRr,repi+1,BRrw);
													repi = repmtrw;
												end;
											end;
										end;
									end;
									repmtrw = matrowcnt(BRr);
									For(repi=0;repi<repmtrw;repi=repi+1) begin
										matrowget(BRr,repi,BRrw);
										if(setinset(BRrw.Code,TBBUrw.Objects) and (setinset(BRrw.VECode,TBBUrw.VECode) and nonblank(BRrw.VECode)) or (blank(BRrw.VECode) and blank(TBBUrw.VECode)))then begin
											switch(k) begin
												case 1:
													BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;
												case 2:
													BRrw.Bud2 = BRrw.Bud2 + TBBUrw.Sum;
												case 3:
													BRrw.Bud3 = BRrw.Bud3 + TBBUrw.Sum;
												case 4:
													BRrw.Bud4 = BRrw.Bud4 + TBBUrw.Sum;
												otherwise
													BRrw.Bud1 = BRrw.Bud1 + TBBUrw.Sum;	//I Quartal as default
											end;
											matrowput(BRr,repi,BRrw);
										end;
									end; 
								end;
							end; 
						end;
					end;
				end;
			end;
		end;
		ArrayBRr[PRrCodes[PRi]] = BRr;
	end;
	logtext(0,"BRrCollectForFew: Bud1..4 COLLECTED");
	Mainr.TransDate = RepSpec.sStartDate;
	TrHs = true;
	while (loopkey("TransDate",Mainr,1,TrHs)) begin
		
		testf = true;
		if (!SetInSet(Mainr.AccNumber,AccStr)) then begin
			testf = false;
		end;
		if (Mainr.TransDate>RepSpec.sEndDate) then begin
			TrHs = false;
			testf = false;
		end;
		
		if (testf) then begin
			TRr.Number = Mainr.TransNr;
			TRr.IntYc = Mainr.IntYc;
			if (readfirstmain(TRr,2,true)) then begin
				k = GetQuartal(TRr.TransDate);
				mtrw = matrowcnt(TRr);// Edit ************************** Tuesday, 21 July 2015 10:21:13
				for (i=0;i<mtrw;i=i+1) begin
					matrowget(TRr,i,TRrw);
					if (TRrw.ovst==0 and TRrw.AccNumber==Mainr.AccNumber) then begin
						if (setinset(RepSpec.f1,TRrw.Objects) or blank(RepSpec.f1)) then begin
							GetObjs("SUPPL",TRrw.Objects,vendobj);
							for (PRi=0;PRi<PRrCodes.length;PRi=PRi+1) begin
								if(setinset(prjobjs[PRi],TRrw.Objects)) then begin
									BRr = ArrayBRr[PRrCodes[PRi]];
									foundf = false;
									if nonblank(vendobj) then begin
										repmtrw = matrowcnt(BRr);
										For(repi=0;repi<repmtrw;repi=repi+1) begin
											matrowget(BRr,repi,BRrw);
											if setinset(BRrw.Code,TRrw.Objects) and nonblank(BRrw.Code) and ((setinset(BRrw.VECode,vendobj) and nonblank(BRrw.VECode))) then begin
												foundf = true;
											end;
										end;
										if !foundf then begin
											For(repi=0;repi<repmtrw;repi=repi+1) begin
												matrowget(BRr,repi,BRrw);
												if (setinset(BRrw.Code,TRrw.Objects) and nonblank(BRrw.Code)) and  blank(BRrw.VECode) and blank(BRrw.CatName) then begin
													BRrw.Bud1 = blankval;
													BRrw.Bud2 = blankval;
													BRrw.Bud3 = blankval;
													BRrw.Bud4 = blankval;
													BRrw.Spend1 = blankval;
													BRrw.Spend2 = blankval;
													BRrw.Spend3 = blankval;
													BRrw.Spend4 = blankval;
													BRrw.VECode = vendobj;
													matrowinsert(BRr,repi+1,BRrw);
													repi = repmtrw;
												end;
											end;
										end;
									end;
									repmtrw = matrowcnt(BRr);
									for (repi=0;repi<repmtrw;repi=repi+1) begin
										matrowget(BRr,repi,BRrw);
										if ((nonblank(BRrw.CostAcc)) and (setinset(BRrw.Code,TRrw.Objects) and ((setinset(BRrw.VECode,TRrw.Objects) and nonblank(vendobj) and nonblank(BRrw.VECode)) or (blank(vendobj) and (blank(BRrw.VECode)))))) then begin
											switch (k) begin
												case 1:
													BRrw.Spend1 = BRrw.Spend1 - TRrw.CredVal + TRrw.DebVal;
												case 2:
													BRrw.Spend2 = BRrw.Spend2 - TRrw.CredVal + TRrw.DebVal;
												case 3:
													BRrw.Spend3 = BRrw.Spend3 - TRrw.CredVal + TRrw.DebVal;
												case 4:
													BRrw.Spend4 = BRrw.Spend4 - TRrw.CredVal + TRrw.DebVal;
												otherwise
													BRrw.Spend1 = BRrw.Spend1 - TRrw.CredVal + TRrw.DebVal;	//I Quartal as default
											end;													
											matrowput(BRr,repi,BRrw);
										end;
									end;
									ArrayBRr[PRrCodes[PRi]] = BRr;
									PRi = PRrCodes.length;
								end;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	logtext(0,"BRrCollectForFew: Spend1..4 COLLECTED");
	RETURN;
END;

global
procedure BudgetsObjectsRn(record RcVc RepSpec)
BEGIN
	record BaseCurBlock BCb;
	record BudRep1Vc BRr,PatternBRr,TotBRr;
	record PRVc PRr;
	record ITVc ITr;
	record INVc INr;
	record CUVc CUr;
	record ObjVc Objr;
	row BudRep1Vc BRrw,PatternBRrw,PatternBR2rw,TotBRrw;
	vector record BudRep1Vc ArrayBRr;
	integer i,j,k,repi,mtrw,repmtrw,pos;
	array val totalrowbud,totalrowsped,subtotals, totalrow;
	val totalbubyrow,totalspendbyrow,totalBudget,totalSpend;
	string 30 PRrName;
	string 100 mainobjname;
	array string 100 PRCodes,PRNames;
	boolean TrHs,testf,foundf;
	integer PRCodesCount;
	array string 10 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
	string 255 AccStr;
	
	reportName = "BudgetsObjectsRn"	;
	totalBudget = 0;
	totalSpend = 0;
	
	logtext(0,"RunReport " & reportName);
	if(windowsmode==1)then begin
		fileToSave = RepSpec.FirstVer & ".xlsx";
	end else begin
		fileToSave = "/" & RepSpec.FirstVer & ".xlsx";
	end;
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
	logtext(0,"                    " & fileToSave);
	BlockLoad(BCb);
//Collect array of all items for every vendor  
	k = 0;
	logtext(0,"Collect PatternBRr/AccStr begin");
	while (loopmain(ITr,1,true)) begin
		clearrow(PatternBRr,PatternBRrw,1);
		PatternBRrw.Code = ITr.Code;
		PatternBRrw.CatName = ITr.Comment;
		matrowput(PatternBRr,k,PatternBRrw);
		k=k+1;
		resetloop(INr);
		INr.Group = ITr.Code;
		TrHs = true;
		while(loopkey("Group",INr,1,TrHs)) begin
			testf = true;
			if(INr.Group!=ITr.Code)then begin testf = false; TrHs = false; end;
			if(blank(INr.Objects))then begin testf = false; end;
			
			if(testf)then begin
				clearrow(PatternBRr,PatternBRrw,1);
				PatternBRrw.Code = INr.Objects;
				Objr.Code = INr.Objects;
				if(readfirstmain(Objr,1,true))then begin
					PatternBRrw.Name = Objr.Comment;
				end;
				PatternBRrw.CostAcc = INr.CostAcc;
				if !(SetInSet(PatternBRrw.CostAcc,AccStr)) then begin
					AccStr = AccStr & "," & PatternBRrw.CostAcc;
				end;
				repmtrw = matrowcnt(PatternBRr);
				foundf = false;
				For(i=0;i<repmtrw;i=i+1) begin
					matrowget(PatternBRr,i,PatternBR2rw);
					if(PatternBR2rw.Code==PatternBRrw.Code)then begin
						foundf = true;
					end;
				end; 
				/*if(!foundf)then begin
					CUr.Code = "";
					while (loopkey("VEActCode",CUr,1,true)) begin
						if(nonblank(CUr.VEObjects))then begin
							PatternBRrw.VECode = CUr.VEObjects;
							matrowput(PatternBRr,k,PatternBRrw);
							k=k+1;
						end;
					end;
					resetloop(CUr);
				end;*/
				repmtrw = matrowcnt(PatternBRr);
				foundf = false;
				For(i=0;i<repmtrw;i=i+1) begin
					matrowget(PatternBRr,i,PatternBR2rw);
					if(PatternBR2rw.Code==PatternBRrw.Code and PatternBR2rw.VECode=="")then begin
						foundf = true;
					end;
				end; 
				if(!foundf)then begin
					PatternBRrw.VECode = "";
					matrowput(PatternBRr,k,PatternBRrw);
					k=k+1;
				end;
			end;
		end;
	end;
	AccStr = right(AccStr,len(AccStr) - 1);
	logtext(0,"Collect PatternBRr/AccStr end");

	if (blank(RepSpec.f2)) then begin
		TrHs = true;
		while (loopmain(PRr,1,TrHs)) begin
			if ((PRr.StartDate<RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sStartDate and PRr.EndDate<=RepSpec.sEndDate) or (PRr.StartDate>=RepSpec.sStartDate and PRr.StartDate<=RepSpec.sEndDate) or (PRr.StartDate<=RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sEndDate))then begin
				if Blank(PRr.MotherCode) then begin
					PRCodes[PRCodesCount] = PRr.Code;
					sheetNames[PRCodesCount] = PRr.Name;
					PRCodesCount = PRCodesCount + 1;
				end;
			end;
		end;
		sheetNames[PRCodesCount] = "Total";
		qtyOfSheets = PRCodesCount + 1;
		BRrCollectForFew(RepSpec,AccStr,PRCodes,mainobjname,PRNames,ArrayBRr,PatternBRr);
		logtext(0,"Output BEGIN");
		sheetColls[0] = 8.43;
		sheetColls[1] = 8.43;
		sheetColls[2] = 31.71;
		sheetColls[3] = 10.57;
		sheetColls[4] = 10.57;
		sheetColls[5] = 10.57;
		sheetColls[6] = 10.57;
		sheetColls[7] = 10.57;
		sheetColls[8] = 10.57;
		sheetColls[9] = 10.57;
		sheetColls[10] = 10.57;
		sheetColls[11] = 10.57;
		sheetColls[12] = 10.57;
		sheetColls[13] = 10.57;
		
		qtyMergeCell = 1;
		mergeCell[0] = "A1:N1";
		
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0);
		for (k=0;k<qtyOfSheets;k=k+1) begin
			sheetnum = k + 1;
			if (sheetNames[k] <> "Total") then begin
				RecordClear(BRr);
				BRr = ArrayBRr[PRCodes[k]];
				PRrName = PRNames[k];
				mtrw = matrowcnt(BRr);
				for (i=0;i<mtrw;i=i+1) begin
					matrowget(BRr,i,BRrw);
					foundf = false;
					pos = 0;
					TotBRr = PatternBRr;
					repmtrw = matrowcnt(TotBRr);
					for (repi=0;repi<repmtrw;repi=repi+1) begin
						matrowget(TotBRr,repi,TotBRrw);
						if (TotBRrw.Code==BRrw.Code) then begin
							if ((TotBRrw.VECode==BRrw.VECode) and (nonblank(TotBRrw.VECode) and nonblank(BRrw.VECode))) or ((BRrw.CatName==TotBRrw.CatName) and (blank(TotBRrw.VECode) and blank(BRrw.VECode))) or (blank(TotBRrw.VECode) and blank(BRrw.VECode)blank(TotBRrw.VECode) and blank(BRrw.VECode) and blank(TotBRrw.CatName) and blank(BRrw.CatName)) then begin
								TotBRrw.Bud1 = TotBRrw.Bud1 + BRrw.Bud1;
								TotBRrw.Bud2 = TotBRrw.Bud2 + BRrw.Bud2;
								TotBRrw.Bud3 = TotBRrw.Bud3 + BRrw.Bud3;
								TotBRrw.Bud4 = TotBRrw.Bud4 + BRrw.Bud4;
								TotBRrw.Spend1 = TotBRrw.Spend1 + BRrw.Spend1;
								TotBRrw.Spend2 = TotBRrw.Spend2 + BRrw.Spend2;
								TotBRrw.Spend3 = TotBRrw.Spend3 + BRrw.Spend3;
								TotBRrw.Spend4 = TotBRrw.Spend4 + BRrw.Spend4;
								matrowput(TotBRr,repi + 1,TotBRrw);
								foundf = true;
								//pos = repi + 1;
								repi = repmtrw;
							end else begin
								pos = repi + 1;
							end;
						end else begin
							pos = repmtrw;
						end;
					end;
					if !foundf then begin
						TotBRrw.Bud1 = BRrw.Bud1;
						TotBRrw.Bud2 = BRrw.Bud2;
						TotBRrw.Bud3 = BRrw.Bud3;
						TotBRrw.Bud4 = BRrw.Bud4;
						TotBRrw.Spend1 = BRrw.Spend1;
						TotBRrw.Spend2 = BRrw.Spend2;
						TotBRrw.Spend3 = BRrw.Spend3;
						TotBRrw.Spend4 = BRrw.Spend4;
						TotBRrw.Code = BRrw.Code;
						TotBRrw.VECode = BRrw.VECode;
						TotBRrw.Name = BRrw.Name;
						TotBRrw.CatName = BRrw.CatName;
						matrowput(TotBRr,pos,TotBRrw);
					end;
				end;
			end else begin
				PRrName = "Total";
				RecordClear(BRr);
				BRr = TotBRr;
			end;
			SetSheetsCols(sheetnum,sheetColls,fileToSave);
			BeginSheetData(sheetnum,fileToSave);
				style = 1;
				colnum = 1;
				rownum = 1;
				BeginRow(sheetnum,fileToSave,rownum);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,PRrName & "," & GetYear(RepSpec.sStartDate),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					qtyOfEmpStr = 13;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				EndRow(sheetnum,fileToSave,rownum);
				style = 3;
				colnum = 5;
				BeginRow(sheetnum,fileToSave,rownum);
					qtyOfEmpStr = 10;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				EndRow(sheetnum,fileToSave,rownum);

				style = 4;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 5;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.sStartDate & "-" & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					colnum = colnum + 1;
					qtyOfEmpStr = 10;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				EndRow(sheetnum,fileToSave,rownum);
				
				style = 4;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 5;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					colnum = colnum + 1;
					qtyOfEmpStr = 10;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 5;
				BeginRow(sheetnum,fileToSave,rownum);
					qtyOfEmpStr = 10;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 5;
				BeginRow(sheetnum,fileToSave,rownum);
					qtyOfEmpStr = 10;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				EndRow(sheetnum,fileToSave,rownum);
				
				style = 6;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum);
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,mainobjname,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Vendor",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QI",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QI-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QII",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QII-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIII",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIII-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIV",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIV-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"total-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				EndRow(sheetnum,fileToSave,rownum);
			
				mtrw = matrowcnt(BRr);
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(BRr,i,BRrw);
					if (nonblank(BRrw.CatName))	 then begin				
						if (CollectSubTotals(BRr,i,subtotals)) then begin	//check if item group is empty
							style = 3;
							colnum = 5;
							BeginRow(sheetnum,fileToSave,rownum);
								qtyOfEmpStr = 10;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							EndRow(sheetnum,fileToSave,rownum);
							style = 7;
							colnum = 1;
							BeginRow(sheetnum,fileToSave,rownum);
								StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Code,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
								StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.CatName,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
								qtyOfEmpStr = 2;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 8;
								for(j=0;j<8;j=j+1) begin
									NumericCell(sheetnum,fileToSave,colnum,rownum,style,subtotals[j]);
									totalrow[j] = totalrow[j] + subtotals[j];
								end;
								totalbubyrow = 	subtotals[0] + subtotals[2] + subtotals[4] + subtotals[6];		//Quartals
								totalspendbyrow = subtotals[1] + subtotals[3] + subtotals[5] + subtotals[7];	//Quartals-Fact
								NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalbubyrow);
								NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalspendbyrow);
							EndRow(sheetnum,fileToSave,rownum);
						end;					
					end;
					totalbubyrow = BRrw.Bud1+BRrw.Bud2+BRrw.Bud3+BRrw.Bud4;
					totalspendbyrow = BRrw.Spend1+BRrw.Spend2+BRrw.Spend3+BRrw.Spend4;						  		
					if(totalbubyrow!=0 or totalspendbyrow!=0 )then begin
						style = 10;
						colnum = 1;
						BeginRow(sheetnum,fileToSave,rownum);
							StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Code,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Name,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.VECode,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 11;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud1);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend1);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud2);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend2);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud3);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend3);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud4);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend4);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalbubyrow);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalspendbyrow);
						EndRow(sheetnum,fileToSave,rownum);
					end;
				end;		
			EndSheetData(sheetnum,fileToSave);
			MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
			EndSheet(sheetnum,fileToSave,0);
		end;
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		ConvertToXLSX(fileToSave);
		logtext(0,"Output END");
	end else begin
		RecordClear(BRr);
		BRr = PatternBRr;
		BRrCollect(RepSpec,AccStr,mainobjname,PRrName,BRr);
		logtext(0,"Output BEGIN");
		sheetNames[0] = PRrName;
		qtyOfSheets = 1;
		for (i=0;i<qtyOfSheets;i=i+1) begin
			if blank(sheetNames[i]) then begin
				sheetNames[i] = "Sheet" & i+1;
			end;
		end;
		sheetColls[0] = 8.43;
		sheetColls[1] = 8.43;
		sheetColls[2] = 31.71;
		sheetColls[3] = 10.57;
		sheetColls[4] = 10.57;
		sheetColls[5] = 10.57;
		sheetColls[6] = 10.57;
		sheetColls[7] = 10.57;
		sheetColls[8] = 10.57;
		sheetColls[9] = 10.57;
		sheetColls[10] = 10.57;
		sheetColls[11] = 10.57;
		sheetColls[12] = 10.57;
		sheetColls[13] = 10.57;
		
		qtyMergeCell = 1;
		mergeCell[0] = "A1:N1";
		
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0);
		
		sheetnum = 1;
		SetSheetsCols(sheetnum,sheetColls,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
			rownum = 1;
			style = 1;
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,PRrName & "," & GetYear(RepSpec.sStartDate),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				qtyOfEmpStr = 13;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			style = 3;
			colnum = 5;
			BeginRow(sheetnum,fileToSave,rownum);
				qtyOfEmpStr = 10;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);

			style = 4;
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 5;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.sStartDate & "-" & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
				qtyOfEmpStr = 10;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			
			style = 4;
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 5;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
				qtyOfEmpStr = 10;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 5;
			BeginRow(sheetnum,fileToSave,rownum);
				qtyOfEmpStr = 10;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 5;
			BeginRow(sheetnum,fileToSave,rownum);
				qtyOfEmpStr = 10;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			
			style = 6;
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum);
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,mainobjname,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Vendor",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QI",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QI-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QII",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QII-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIII",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIII-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIV",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIV-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"total-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
		
			mtrw = matrowcnt(BRr);
			For(i=0;i<mtrw;i=i+1) begin
				matrowget(BRr,i,BRrw);
				if (nonblank(BRrw.CatName))	 then begin				
					if (CollectSubTotals(BRr,i,subtotals)) then begin	//check if item group is empty
						style = 3;
						colnum = 5;
						BeginRow(sheetnum,fileToSave,rownum);
							qtyOfEmpStr = 10;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						EndRow(sheetnum,fileToSave,rownum);
						style = 7;
						colnum = 1;
						BeginRow(sheetnum,fileToSave,rownum);
							StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Code,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.CatName,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							qtyOfEmpStr = 2;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							style = 8;
							for(j=0;j<8;j=j+1) begin
								NumericCell(sheetnum,fileToSave,colnum,rownum,style,subtotals[j]);
								totalrow[j] = totalrow[j] + subtotals[j];
							end;
							totalbubyrow = 	subtotals[0] + subtotals[2] + subtotals[4] + subtotals[6];		//Quartals
							totalspendbyrow = subtotals[1] + subtotals[3] + subtotals[5] + subtotals[7];	//Quartals-Fact
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalbubyrow);
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalspendbyrow);
						EndRow(sheetnum,fileToSave,rownum);
					end;					
				end;
				totalbubyrow = BRrw.Bud1+BRrw.Bud2+BRrw.Bud3+BRrw.Bud4;
				totalspendbyrow = BRrw.Spend1+BRrw.Spend2+BRrw.Spend3+BRrw.Spend4;						  		
				if(totalbubyrow!=0 or totalspendbyrow!=0 )then begin
					style = 10;
					colnum = 1;
					BeginRow(sheetnum,fileToSave,rownum);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Code,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Name,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.VECode,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 11;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud1);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend1);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud2);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend2);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud3);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend3);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Bud4);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,BRrw.Spend4);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalbubyrow);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,totalspendbyrow);
					EndRow(sheetnum,fileToSave,rownum);
				end;
			end;		
		EndSheetData(sheetnum,fileToSave);
		MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
		EndSheet(sheetnum,fileToSave,0);
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		ConvertToXLSX(fileToSave);
		logtext(0,"Output END");
	end;
	RETURN;
END;

global
procedure BudgetsObjectsArea(LongInt tick,var area areatofile)
BEGIN
	string 255 fileToSave;

	if(windowsmode==1)then begin
		fileToSave = tick & ".xlsx";
	end else begin
		fileToSave = "/" & tick & ".xlsx";
	end;
	MilliSleep(2000);
	addfiletoarea(fileToSave,areatofile,false);
	logtext(0,"BudgetsObjectsRn: FILE " & fileToSave & " SENT TO CLIENT");
	delete_file(fileToSave);
	RETURN;
END;