external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);
external function integer GetQuartal(date);
external function string 4 QuartalIntToStr(integer);
external function string 50 TimeToString(time,string,boolean);

procedure ArraysCollect(record RcVc RepSpec, var array string ArtArrayWithoutGroups, var array string ProjArray, var array string ArtArrayWithGroups, var boolean PrjFoundf, var vector boolean isMotherProjVect)
BEGIN
	record ITVc ITr;
	record INVc INr;
	record PRVc PRr;
	integer i,j,k,kw,kwo,oldcomp;
	boolean TrHs,testf,foundf;
	string 100 tstr;
	
	kw = 0;
	while(loopmain(ITr,1,true)) begin
    testf = true;
    if ((RepSpec.f2=="2016" and right(ITr.Code,3)!="_16") or
        (RepSpec.f2=="2017" and right(ITr.Code,3)!="_17") or
        (RepSpec.f2=="2018" and right(ITr.Code,3)!="_18") or
        (RepSpec.f2=="2019" and right(ITr.Code,3)!="_19")) then begin testf = false; end;
    if (testf) then begin
      ArtArrayWithGroups[kw] = ITr.Code;
      kw = kw + 1;
      resetloop(INr);
      INr.Group = ITr.Code;
      TrHs = true;
      while(loopkey("Group",INr,1,TrHs)) begin
        testf = true;
        if (INr.Group!=ITr.Code) then begin testf = false; TrHs = false; end;
        if (blank(INr.Objects)) then begin testf = false; end;
        if ((RepSpec.f2=="2016" and right(INr.Objects,3)!="_16") or
            (RepSpec.f2=="2017" and right(INr.Objects,3)!="_17") or
            (RepSpec.f2=="2018" and right(INr.Objects,3)!="_18") or
            (RepSpec.f2=="2019" and right(INr.Objects,3)!="_19")) then begin testf = false; end;
        if (testf) then begin
          tstr = INr.Objects;
          foundf = false;
          for (i=0;i<ArtArrayWithoutGroups.length;i=i+1) begin
            if (ArtArrayWithoutGroups[i]==tstr) then begin
              foundf = true;
            end;
          end; 
          if (!foundf) then begin
            ArtArrayWithoutGroups[kwo] = INr.Objects;
            kwo = kwo + 1;
            ArtArrayWithGroups[kw] = INr.Objects;
            kw = kw + 1;
          end;
        end;
      end;
    end;
	end;
	
	oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
  end;
	k = 0;
	while(loopmain(PRr,1,true)) begin
		switch (PRr.Code) begin
      case "2016.998":
        goto L1;
      case "2017.998":
        goto L1;
      case "2018.998":
        goto L1;
      case "2019.998":
        goto L1; 
    end;
		if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
			ProjArray[k] = PRr.Code;
			if blank(PRr.MotherCode) or (PRr.MotherCode == "") then begin
				isMotherProjVect[ProjArray[k]] = true;
			end else begin
				isMotherProjVect[ProjArray[k]] = false;
			end;
			k = k + 1;
		end;
L1:end;
  resetcompany(oldcomp);
	if (k==0) then begin
		PrjFoundf = false;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(array string ArtArrayWithoutGroups, array string ProjArray, record RcVc RepSpec,
					var vector val QuartVect)
BEGIN
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record INVc INr;
	record TRVc TRr;
	record MainVc Mainr;
	record ObjVc Objr;
	row TBBUVc TBBUrw;
	row TRVc TRrw;
	integer i,k,j,mtrw,PAi,oldcomp;
	boolean TrHs,testf,kTestf;
	string 20 group;
	
	Objr.Code = RepSpec.ObjStr;
	readfirstmain(Objr,1,true);
	oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
  end;
  for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin 
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
			if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
				TBBUr.PRCode = PRr.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
					k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
						kTestf = false;
						if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
							kTestf = true;
              k = 1;
						end;
						if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode) and TBBUrw.ExtraObj==RepSpec.f1 and (setinset(RepSpec.ObjStr,TBBUrw.Objects) or blank(RepSpec.ObjStr) or Objr.OTCode=="LOCAT"))) then begin
							for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
								if (setinset(ArtArrayWithoutGroups[j],TBBUrw.Objects)) then begin
									INr.Objects = ArtArrayWithoutGroups[j];
                  ReadfirstKey("Objects",INr,1,true);
                  group = INr.Group;
                  QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
                  QuartVect[k & ";" & group & ":" & ProjArray[PAi]] = QuartVect[k & ";" & group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									QuartVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									QuartVect[group & ":" & ProjArray[PAi]] = QuartVect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
                  QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":TOTAL"] = QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":TOTAL"] + TBBUrw.Sum;
                  QuartVect[k & ";" & group & ":TOTAL"] = QuartVect[k & ";" & group & ":TOTAL"] + TBBUrw.Sum;
                  QuartVect[ArtArrayWithoutGroups[j] & ":TOTAL"] = QuartVect[ArtArrayWithoutGroups[j] & ":TOTAL"] + TBBUrw.Sum;
									QuartVect[group & ":TOTAL"] = QuartVect[group & ":TOTAL"] + TBBUrw.Sum;
                  if (nonblank(PRr.MotherCode)) then begin
                    QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & PRr.MotherCode] = QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & PRr.MotherCode] + TBBUrw.Sum;
                    QuartVect[k & ";" & group & ":" & PRr.MotherCode] = QuartVect[k & ";" & group & ":" & PRr.MotherCode] + TBBUrw.Sum;
                    QuartVect[ArtArrayWithoutGroups[j] & ":" & PRr.MotherCode] = QuartVect[ArtArrayWithoutGroups[j] & ":" & PRr.MotherCode] + TBBUrw.Sum;
                    QuartVect[group & ":" & PRr.MotherCode] = QuartVect[group & ":" & PRr.MotherCode] + TBBUrw.Sum;
                  end;
								end;
							end; 
						end;
					end; 
				end;
			end;
		end;
	end;
  resetcompany(oldcomp);
	RETURN;
END;

global
procedure ProjFoundStatRn(record RcVc RepSpec, var string fnserv, var string md5str, var boolean PrjFoundf)
BEGIN
//RepSpec.f1 - Foundation
//RepSpec.ObjStr - Location
	record BaseCurBlock BCb;
	record ITVc ITr;
  record INVc INr;
	record ObjVc Objr;
	array string 255 ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups;
	vector val QuartVect,PrjTotVect;
	vector boolean isMotherProjVect;
	integer i,j,quartCount,Qi;
	string 100 group,nextgroup;
	string 10 tstr;
	
	array string 10 sheetNames;
	array val sheetColls;
	array integer sheetCollsOutLvl;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr,
			style1,style2,style3,style4,style5,style6;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
  array string 225 mas;
  array integer quartToPrint;
	
	ArraysCollect(RepSpec,ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups,PrjFoundf,isMotherProjVect);
	if (PrjFoundf) then begin
		DataCollect(ArtArrayWithoutGroups,ProjArray,RepSpec,QuartVect);

		reportName = "ProjFoundStatRn";
		if(windowsmode==1)then begin
      fileToSave = DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end else begin
			fileToSave = "/" & DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end;
		BlockLoad(BCb);
		sheetNames[0] = RepSpec.f1;
		if nonblank(RepSpec.ObjStr) then begin
			sheetNames[0] = sheetNames[0] & "-" & RepSpec.ObjStr;
		end;
		sheetNames[0] = sheetNames[0] & "-Projects-TOT";
		qtyOfSheets = 1;
		quartCount = RepSpec.flags[1] + RepSpec.flags[2] + RepSpec.flags[3] + RepSpec.flags[4];
		
    if (RepSpec.flags[4]==1) then begin
			i = 4;
		end;
		if (RepSpec.flags[3]==1) then begin
			i = 3;
		end;
		if (RepSpec.flags[2]==1) then begin
			i = 2;
		end;
		if (RepSpec.flags[1]==1) then begin
			i = 1;
		end;
		quartToPrint[0] = i;
		for (i=1;i<quartCount;i=i+1) begin
			quartToPrint[i] = quartToPrint[0] + i;
		end;
		
		colnum = 0;
		sheetColls[colnum] = 5.7109375;
		colnum = colnum + 1;
		sheetColls[colnum] = 5.7109375;
		colnum = colnum + 1;
		sheetColls[colnum] = 35.7109375;
		colnum = colnum + 1;
		for (j=1;j<=quartCount;j=j+1) begin
			for (i=0;i<ProjArray.length;i=i+1) begin
				sheetColls[colnum] = 9.7109375;
				colnum = colnum + 1;
			end;
			sheetColls[colnum] = 10.7109375;
			colnum = colnum + 1;
			sheetColls[colnum] = 1.7109375;
			colnum = colnum + 1;
		end;
		for (i=0;i<ProjArray.length + 1;i=i+1) begin
			sheetColls[colnum] = 10.7109375;
			colnum = colnum + 1;
		end;
		
		colnum = 0;
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		sheetnum = 1;
		qtyMergeCell = 0;
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
		SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
		rownum = 1;
		colnum = 1;
		BeginRow(sheetnum,fileToSave,rownum,0,blankval);
			style = 1;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Projects",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			colnum = colnum + 2;
			if nonblank(RepSpec.ObjStr) then begin
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Location - " & RepSpec.ObjStr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
		EndRow(sheetnum,fileToSave,rownum);
		BeginRow(sheetnum,fileToSave,rownum,0,6);
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 1;
		BeginRow(sheetnum,fileToSave,rownum,0,blankval);
			style = 5;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			style = 6;
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.sStartDate & " - " & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		BeginRow(sheetnum,fileToSave,rownum,0,6);
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 1;
		BeginRow(sheetnum,fileToSave,rownum,0,blankval);
			style = 7;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			style = 8;
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		BeginRow(sheetnum,fileToSave,rownum,0,6);
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,0,blankval);
			for (j=1;j<=quartCount;j=j+1) begin
				style = 44;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.f1 & " - Budget",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 45;
				qtyOfEmpStr = ProjArray.length - 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 46;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				colnum = colnum + 1;
			end;
			tstr = " - ";
			if (RepSpec.flags[1]==1) then begin
				tstr = tstr & "(Q1-";
			end else begin
				if (RepSpec.flags[2]==1) then begin
					tstr = tstr & "(Q2-";
				end else begin
					if (RepSpec.flags[3]==1) then begin
						tstr = tstr & "(Q3-";
					end else begin
						if (RepSpec.flags[4]==1) then begin
							tstr = tstr & "(Q4-";
						end;
					end;
				end;
			end;
			if (RepSpec.flags[4]==1) then begin
				tstr = tstr & "Q4)";
			end else begin
				if (RepSpec.flags[3]==1) then begin
					tstr = tstr & "Q3)";
				end else begin
					if (RepSpec.flags[2]==1) then begin
						tstr = tstr & "Q2)";
					end else begin
						if (RepSpec.flags[1]==1) then begin
							tstr = tstr & "Q1)";
						end;
					end;
				end;
			end;
			style = 47;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL" & tstr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			style = 48;
			qtyOfEmpStr = ProjArray.length - 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			style = 49;
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			colnum = colnum + 1;
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,0,20);
			for (j=1;j<=quartCount;j=j+1) begin
				for (i=0;i<ProjArray.length;i=i+1) begin
					if isMotherProjVect[ProjArray[i]] then begin
						if (i == 0) then begin
							style = 16;
						end else begin
							style = 17;
						end;
					end else begin
						style = 15;
					end;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
				style = 18;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				colnum = colnum + 1;
			end;
			for (i=0;i<ProjArray.length;i=i+1) begin
				if isMotherProjVect[ProjArray[i]] then begin
					if (i == 0) then begin
						style = 16;
					end else begin
						style = 17;
					end;
				end else begin
					style = 15;
				end;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
			style = 21;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,0,12);
			for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
				for (i=0;i<ProjArray.length;i=i+1) begin
					if (i == 0) then begin
						style = 9;
					end else begin
						if (i == (ProjArray.length - 1)) then begin
							style = 11;
						end else begin
							style = 10;
						end;
					end;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
				style = 19;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
			end;
			for (i=0;i<ProjArray.length;i=i+1) begin
				if (i == 0) then begin
					style = 12;
				end else begin
					if (i == (ProjArray.length - 1)) then begin
						style = 14;
					end else begin
						style = 13;
					end;
				end;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			end;
			style = 20;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		rownum = rownum + 1;
		
		for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
			INr.Objects = ArtArrayWithGroups[i+1];
      if ReadfirstKey("Objects",INr,1,true) then begin
        ITr.Code = INr.Group;
        ReadFirstMain(ITr,1,true);
        nextgroup = ITr.Code;
      end else begin
        nextgroup = ArtArrayWithGroups[i+1];
      end;
      INr.Objects = ArtArrayWithGroups[i];
      ReadfirstKey("Objects",INr,1,true);
      if ReadfirstKey("Objects",INr,1,true) then begin
        ITr.Code = INr.Group;
        ReadFirstMain(ITr,1,true);
        group = ITr.Code;
      end else begin
        ITr.Code = ArtArrayWithGroups[i];
        ReadFirstMain(ITr,1,true);
        group = ITr.Code;
      end;
			if ArtArrayWithGroups[i]==group then begin
				rownum = rownum + 1;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					style = 2;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					colnum = colnum + 1;
					for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
						for (j=0;j<ProjArray.length;j=j+1) begin
							style = 22;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							PrjTotVect[quartToPrint[Qi] & ";" & ProjArray[j]] = PrjTotVect[quartToPrint[Qi] & ";" & ProjArray[j]] + QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						end;
						style = 23;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":TOTAL"]);
            colnum = colnum + 1;
						PrjTotVect[quartToPrint[Qi] & ";TOTAL"] = PrjTotVect[quartToPrint[Qi] & ";TOTAL"] + QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":TOTAL"];
					end;
					for (j=0;j<ProjArray.length;j=j+1) begin
						style = 36;
            NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						PrjTotVect["TOTAL:" & ProjArray[j]] = PrjTotVect["TOTAL:" & ProjArray[j]] + QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = 37;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ArtArrayWithGroups[i] & ":TOTAL"]);
					PrjTotVect["TOTAL:TOTAL"] = PrjTotVect["TOTAL:TOTAL"] + QuartVect[ArtArrayWithGroups[i] & ":TOTAL"];
				EndRow(sheetnum,fileToSave,rownum);
			end else begin
				style1 = 28;
				style2 = 29;
				style3 = 30;
				style4 = 31;
				style5 = 40;
				style6 = 41;
				if ArtArrayWithGroups[i-1]==group then begin
					style1 = 24;
					style2 = 25;
					style3 = 26;
					style4 = 27;
					style5 = 38;
					style6 = 39;
				end;
				if (ArtArrayWithGroups[i+1]==nextgroup or blank(ArtArrayWithGroups[i+1])) then begin
					style1 = 32;
					style2 = 33;
					style3 = 34;
					style4 = 35;
					style5 = 42;
					style6 = 43;
				end;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					if (Right(ArtArrayWithGroups[i],1)=="0") or (Right(ArtArrayWithGroups[i],2)=="99") then begin
						style = 3;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						colnum = colnum + 1;
					end else begin
						style = 4;
						colnum = colnum + 1;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					end;
					Objr.Code = ArtArrayWithGroups[i];
					readfirstmain(Objr,1,true);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
						for (j=0;j<ProjArray.length;j=j+1) begin
							if (j==0) then begin
								style = style1;
							end else begin
								if (i == (ProjArray.length - 1)) then begin
									style = style3;
								end else begin
									style = style2;
								end;
							end;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						end;
						style = style4;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":TOTAL"]);
						colnum = colnum + 1;
					end;
					for (j=0;j<ProjArray.length;j=j+1) begin
						style = style5;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
					end;
					style = style6;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ArtArrayWithGroups[i] & ":TOTAL"]);
				EndRow(sheetnum,fileToSave,rownum);
			end;
		end;
		rownum = rownum + 1;
		colnum = 2;
		BeginRow(sheetnum,fileToSave,rownum,0,blankval);
			style = 2;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL COST:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			colnum = colnum + 1;
			for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
				for (j=0;j<ProjArray.length;j=j+1) begin
					style = 22;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect[quartToPrint[Qi] & ";" & ProjArray[j]]);
				end;
				style = 23;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect[quartToPrint[Qi] & ";TOTAL"]);
				colnum = colnum + 1;
			end;
			for (j=0;j<ProjArray.length;j=j+1) begin
				style = 36;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["TOTAL:" & ProjArray[j]]);
			end;
			style = 37;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["TOTAL:TOTAL"]);
		EndRow(sheetnum,fileToSave,rownum);
		rownum = rownum + 1;
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,0,20);
			for (j=1;j<=quartCount;j=j+1) begin
				for (i=0;i<ProjArray.length;i=i+1) begin
					if isMotherProjVect[ProjArray[i]] then begin
						if (i == 0) then begin
							style = 16;
						end else begin
							style = 17;
						end;
					end else begin
						style = 15;
					end;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
				style = 18;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				colnum = colnum + 1;
			end;
			for (i=0;i<ProjArray.length;i=i+1) begin
				if isMotherProjVect[ProjArray[i]] then begin
					if (i == 0) then begin
						style = 16;
					end else begin
						style = 17;
					end;
				end else begin
					style = 15;
				end;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
			style = 21;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,0,12);
			for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
				for (i=0;i<ProjArray.length;i=i+1) begin
					if (i == 0) then begin
						style = 9;
					end else begin
						if (i == (ProjArray.length - 1)) then begin
							style = 11;
						end else begin
							style = 10;
						end;
					end;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
				style = 19;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
			end;
			for (i=0;i<ProjArray.length;i=i+1) begin
				if (i == 0) then begin
					style = 12;
				end else begin
					if (i == (ProjArray.length - 1)) then begin
						style = 14;
					end else begin
						style = 13;
					end;
				end;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			end;
			style = 20;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		EndSheetData(sheetnum,fileToSave);
		MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
		EndSheet(sheetnum,fileToSave,0);
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
		ConvertToXLSX(fileToSave);
		
		MilliSleep(2000);
		fnserv = fileToSave;
    md5str = GetFileMD5(fnserv);
	end;
	RETURN;
END;