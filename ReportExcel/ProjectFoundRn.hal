external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);
external function integer GetQuartal(date);
external function string 4 QuartalIntToStr(integer);
external function string 50 TimeToString(time,string,boolean);
external function val AbsoluteVal(val);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPMRow(string,var row PMBlock);
external function roundmode SetRoundModeD(Integer);

procedure ArraysCollect(record RcVc RepSpec, var array string ArtArrayWithoutGroups, var array string ProjArray, var array string ArtArrayWithGroups, var boolean PrjFoundf, var string AccStr)
BEGIN
	record ITVc ITr;
	record INVc INr;
	record PRVc PRr;
	integer i,j,k,kw,kwo,oldcomp;
	boolean TrHs,testf,foundf;
	string 100 tstr;
	
	kw = 0;
  resetloop(ITr);
  while(loopmain(ITr,1,true)) begin
    if (RepSpec.f2=="2016" and right(ITr.Code,3)=="_16") or (RepSpec.f2!="2016" and right(ITr.Code,3)!="_16") then begin
      ArtArrayWithGroups[kw] = ITr.Code;
      kw = kw + 1;
      resetloop(INr);
      INr.Group = ITr.Code;
      TrHs = true;
      while(loopkey("Group",INr,1,TrHs)) begin
        testf = true;
        if (INr.Group!=ITr.Code) then begin testf = false; TrHs = false; end;
        if (blank(INr.Objects)) then begin testf = false; end;
        if (RepSpec.f2=="2016" and right(INr.Objects,3)!="_16") then begin testf = false; end;
        if (RepSpec.f2!="2016" and right(INr.Objects,3)=="_16") then begin testf = false; end;
        if (testf) then begin
          tstr = INr.Objects;
          if !(SetInSet(INr.CostAcc,AccStr)) then begin
            AccStr = AccStr & "," & INr.CostAcc;
          end;
          foundf = false;
          for (i=0;i<ArtArrayWithoutGroups.length;i=i+1) begin
            if (ArtArrayWithoutGroups[i]==tstr) then begin
              foundf = true;
            end;
          end; 
          if (!foundf) then begin
            ArtArrayWithoutGroups[kwo] = INr.Objects;
            kwo = kwo + 1;
            ArtArrayWithGroups[kw] = INr.Objects;
            kw = kw + 1;
          end;
        end;
      end;
    end;
	end;
	AccStr = right(AccStr,len(AccStr) - 1);
	
  oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
    case "2020":
      SetCompany(1,false);
    case "2021":
      SetCompany(1,false);
  end;
	k = 0;
  resetloop(PRr);
	while(loopmain(PRr,1,true)) begin
		switch (PRr.Code) begin
      case "2016.998":
        goto L1;
    end;
		if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
			if blank(PRr.MotherCode) then begin
				ProjArray[k] = PRr.Code;
				k = k + 1;
			end;
		end;
L1:end;
  resetcompany(oldcomp);
	if (k==0) then begin
		PrjFoundf = false;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(array string ArtArrayWithoutGroups, array string ProjArray, record RcVc RepSpec,
					var vector val QuartVect, string AccStr)
BEGIN
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record INVc INr;
	record TRVc TRr;
	record MainVc Mainr;
	record ObjVc Objr;
	row TBBUVc TBBUrw;
	row TRVc TRrw;
	integer i,k,j,mtrw,PAi,oldcomp;
	boolean TrHs,testf,kTestf,TrHs2;
	string 20 group;
	array string 20 prjobjs;
  val tmpval;
  record VIVc VIr;
  record OPVc OPr;
  record PDVc PDr;
  record BaseCurBlock bcur;
  record OPrsVc OPrsr;
  row VIVc VIrw;
  row OPVc OPrw,VIOPrw;
  row PMBlock PMrw;
  val sum,fr,to1,to2,br1,br2,opsum,trsum,paidsum;
  string 10 vicur,tstr;
  vector boolean ProjInArr,ArtInArr;
	
  for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
    ProjInArr[ProjArray[PAi]] = true;
  end;
  for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
    ArtInArr[ArtArrayWithoutGroups[j]] = true;
  end;
  
	Objr.Code = RepSpec.ObjStr;
	readfirstmain(Objr,1,true);
  oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
    case "2020":
      SetCompany(1,false);
    case "2021":
      SetCompany(1,false);
  end;
	for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin 
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
			prjobjs[PAi] = PRr.Objects;
			if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
				TBBUr.PRCode = PRr.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
					k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
						kTestf = false;
						if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
							kTestf = true;
						end;
						if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode) and TBBUrw.ExtraObj==RepSpec.f1 and (setinset(RepSpec.ObjStr,TBBUrw.Objects) or blank(RepSpec.ObjStr) or Objr.OTCode=="LOCAT"))) then begin
							for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
								if (setinset(ArtArrayWithoutGroups[j],TBBUrw.Objects)) then begin
									INr.Objects = ArtArrayWithoutGroups[j];
                  ReadfirstKey("Objects",INr,1,true);
                  group = INr.Group;
                  QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
                  QuartVect[k & ";" & group & ":" & ProjArray[PAi]] = QuartVect[k & ";" & group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									QuartVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									QuartVect[group & ":" & ProjArray[PAi]] = QuartVect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
								end;
							end; 
						end;
					end; 
				end;
			end;
      
      resetloop(PR2r);
			PR2r.MotherCode = PRr.Code;
			TrHs = true;
			while(loopkey("MotherCode",PR2r,1,TrHs)) begin
				testf = true;
				if (PR2r.MotherCode!=PRr.Code) then begin
					TrHs = false;
					testf = false;
				end;
				if ((GetYear(PR2r.StartDate) & "" == RepSpec.f2) or (GetYear(PR2r.EndDate) & "" == RepSpec.f2)) then begin
					testf = true;
				end else begin
					testf = false;
				end;
				if (testf) then begin
					TBBUr.PRCode = PR2r.Code;
					if (readfirstmain(TBBUr,1,true)) then begin
						mtrw = matrowcnt(TBBUr);
						k = 0;
						for (i=0;i<mtrw;i=i+1) begin
							matrowget(TBBUr,i,TBBUrw);
							if (TBBUrw.stp==18) then begin
								k = TBBUrw.ItemType;
							end;
							kTestf = false;
							if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
								kTestf = true;
                k = 1;
							end;
							if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode) and (TBBUrw.ExtraObj==RepSpec.f1) and (setinset(RepSpec.ObjStr,TBBUrw.Objects) or blank(RepSpec.ObjStr) or Objr.OTCode=="LOCAT"))) then begin
								for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
									if (setinset(ArtArrayWithoutGroups[j],TBBUrw.Objects)) then begin
										INr.Objects = ArtArrayWithoutGroups[j];
                    ReadfirstKey("Objects",INr,1,true);
                    group = INr.Group;
                    QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect[k & ";" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
                    QuartVect[k & ";" & group & ":" & ProjArray[PAi]] = QuartVect[k & ";" & group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
                    QuartVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										QuartVect[group & ":" & ProjArray[PAi]] = QuartVect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									end;
								end; 
							end;
						end; 
					end;
				end;
			end;
		end;
	end;
  resetcompany(oldcomp);
  if (RepSpec.flags[7]==0) then begin
    resetloop(TRr);
    TRr.TransDate = RepSpec.sStartDate;
    TrHs = true;
    while (loopkey("TransDate",TRr,1,TrHs)) begin
      if (TRr.TransDate > RepSpec.sEndDate) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        k = GetQuartal(TRr.TransDate);
        kTestf = false;
        if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
          kTestf = true;
        end;
        if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
          kTestf = true;
        end;
        if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
          kTestf = true;
        end;
        if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
          kTestf = true;
        end;
        if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
          kTestf = true;
          k = 1;
        end;
        if (kTestf) then begin
          mtrw = matrowcnt(TRr);
          for (i=0;i<mtrw;i=i+1) begin
            matrowget(TRr,i,TRrw);
            if (TRrw.ovst==0 and ((mid(TRrw.AccNumber,0,1)=="5")) and setinset(RepSpec.f1,TRrw.Objects) and (setinset(RepSpec.ObjStr,TRrw.Objects) or blank(RepSpec.ObjStr))) then begin
              for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
                if(setinset(prjobjs[PAi],TRrw.Objects)) then begin
                  for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
                    if (setinset(ArtArrayWithoutGroups[j],TRrw.Objects)) then begin
                      INr.Objects = ArtArrayWithoutGroups[j];
                      ReadfirstKey("Objects",INr,1,true);
                      group = INr.Group;
                      QuartVect[k & ";" & "Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect[k & ";" & "Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect[k & ";" & "Fact:" & group & ":" & ProjArray[PAi]] = QuartVect[k & ";" & "Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = QuartVect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                      QuartVect["Fact:" & group & ":" & ProjArray[PAi]] = QuartVect["Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end else begin
    blockload(bcur);
    resetloop(VIr);
    VIr.InvDate = RepSpec.sStartDate;
    TrHs = true;
    while (loopkey("InvDate",VIr,1,TrHs)) begin
      testf = true;
      if (VIr.InvDate>RepSpec.sEndDate) then begin TrHs = false; testf = false; end;
      if (VIr.OKFlag==0) then begin testf = false; end;
      if (VIr.Invalid==1) then begin testf = false; end;
      if (testf and nonblank(RepSpec.f1)) then begin
        mtrw = matrowcnt(VIr);
        testf = false;
        for (i=0;i<mtrw;i=i+1) begin
          matrowget(VIr,i,VIrw);
          if (VIrw.Found==RepSpec.f1) then begin
            testf = true;
            i = mtrw;
          end;
        end;
      end;
      if (testf) then begin
        sum = 0;
        paidsum = 0;
        PDr.Code = VIr.PayDeal;
        if (ReadFirstMain(PDr,1,true)) then begin
          if (PDr.PDType==kInvoiceTypeCash) then begin
            if (VIr.CurncyCode==bcur.BaseCur1) then begin
              sum = VIr.PayVal;
              paidsum = VIr.PayVal;
            end else begin
              TRr.Number = VIr.SerNr;
              TRr.IntYc = VIYc;
              if (ReadFirstMain(TRr,2,true)) then begin
                mtrw = matrowcnt(TRr);
                for (i=0;i<mtrw;i=i+1) begin
                  matrowget(TRr,i,TRrw);
                  if (TRrw.ovst==0 and (TRrw.AccNumber==PDr.pdCashAcc)) then begin
                    sum = AbsoluteVal(TRrw.CredVal - TRrw.DebVal);
                    paidsum = VIr.PayVal;
                    i = mtrw;
                  end;
                end;
              end;
            end;
          end;
        end;
        if (sum==0) then begin
          resetloop(OPrsr);
          OPrsr.VINr = VIr.SerNr;
          TrHs2 = true;
          while (LoopKey("VIKey",OPrsr,1,TrHs2)) begin
            if (OPrsr.VINr<>VIr.SerNr) then begin TrHs2 = false; end;
            if (TrHs2) then begin
              if (OPrsr.TransType==kOPrsTransTypePayment) then begin
                OPr.SerNr = OPrsr.TransNr;
                if (ReadFirstMain(OPr,1,true)) then begin
                  if ((OPr.DoneFlag!=0) and (OPr.TransDate==OPrsr.TransDate)) then begin
                    mtrw = MatRowCnt(OPr);
                    GetPMRow(OPr.PayMode,PMrw);
                    for (i=0;i<mtrw;i=i+1) begin
                      MatRowGet(OPr,i,VIOPrw);
                      if ((VIOPrw.ovst==0) and (VIOPrw.VISerNr==VIr.SerNr) and (VIOPrw.stp==kPaymentRowTypeNormal)) then begin
                        i = mtrw;
                      end;
                    end;
                    opsum = 0;
                    for (i=0;i<mtrw;i=i+1) begin
                      MatRowGet(OPr,i,OPrw);
                      if ((OPrw.ovst==0) and (OPrw.BankCurncy==VIOPrw.BankCurncy) and (OPrw.stp==kPaymentRowTypeNormal)) then begin
                        opsum = opsum + OPrw.BankVal;
                      end;
                    end;
                    TRr.Number = OPr.SerNr;
                    TRr.IntYc = OPYc;
                    if (ReadFirstMain(TRr,2,true)) then begin
                      mtrw = matrowcnt(TRr);
                      trsum = 0;
                      for (j=0;j<mtrw;j=j+1) begin
                        matrowget(TRr,j,TRrw);
                        if (TRrw.ovst==0 and (TRrw.AccNumber==PMrw.AccNr) and (TRrw.Curncy==VIOPrw.BankCurncy)) then begin
                          trsum = trsum + AbsoluteVal(TRrw.CredVal - TRrw.DebVal);
                        end;
                      end;
                    end;
                    sum = sum + VIOPrw.BankVal/opsum*trsum;
                    paidsum = paidsum + VIOPrw.RecVal;
                  end;
                end;
              end;
            end;
          end;
        end;
        if (sum==0) then begin
          fr = 0;
          to1 = 0;
          to2 = 0;
          br1 = 0;
          br2 = 0;
          tstr = VIr.CurncyCode;
          GetFullCurncyRate(tstr,VIr.TransDate,fr,to1,to2,br1,br2);
          if (fr==0) or (fr==blankval) then begin fr = VIr.FrRate; end;
          if (br1==0) or (br1==blankval) then begin br1 = VIr.BaseRate1; end;
          if (br2==0) or (br2==blankval) then begin br2 = VIr.BaseRate2; end;
          if (to1==0) or (to1==blankval) then begin to1 = VIr.ToRateB1; end;
          if (to2==0) or (to2==blankval) then begin to2 = VIr.ToRateB2; end;
          sum = MulRateToBase1(tstr,VIr.PayVal,fr,to1,to2,br1,br2,SetRoundModeD(2));
          paidsum = VIr.PayVal;
        end;
        if (paidsum<VIr.PayVal) then begin
          fr = 0;
          to1 = 0;
          to2 = 0;
          br1 = 0;
          br2 = 0;
          tstr = VIr.CurncyCode;
          GetFullCurncyRate(tstr,VIr.TransDate,fr,to1,to2,br1,br2);
          if (fr==0) or (fr==blankval) then begin fr = VIr.FrRate; end;
          if (br1==0) or (br1==blankval) then begin br1 = VIr.BaseRate1; end;
          if (br2==0) or (br2==blankval) then begin br2 = VIr.BaseRate2; end;
          if (to1==0) or (to1==blankval) then begin to1 = VIr.ToRateB1; end;
          if (to2==0) or (to2==blankval) then begin to2 = VIr.ToRateB2; end;
          sum = sum + MulRateToBase1(tstr,(VIr.PayVal - paidsum),fr,to1,to2,br1,br2,SetRoundModeD(2));
        end;
        k = 0;
        k = GetQuartal(TRr.TransDate);
        if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
          k = 1;
        end;
        mtrw = matrowcnt(VIr);
        for (i=0;i<mtrw;i=i+1) begin
          matrowget(VIr,i,VIrw);
          PRr.Objects = VIrw.Prj;
          ReadFirstKey("Objects",PRr,1,true);
          if ((VIrw.Found==RepSpec.f1) or blank(RepSpec.f1)) and ((VIrw.Loc==RepSpec.ObjStr) or blank(RepSpec.ObjStr)) and (ArtInArr[VIrw.Exp]) and (ProjInArr[PRr.Code]) then begin
            INr.Objects = VIrw.Exp;
            ReadfirstKey("Objects",INr,1,true);
            group = INr.Group;
            tmpval = VIrw.Sum/VIr.PayVal*sum;
            
            QuartVect[k & ";" & "Fact:" & VIrw.Exp & ":" & PRr.Code] = QuartVect[k & ";" & "Fact:" & VIrw.Exp & ":" & PRr.Code] + tmpval;
            QuartVect[k & ";" & "Fact:" & group & ":" & PRr.Code] = QuartVect[k & ";" & "Fact:" & group & ":" & PRr.Code] + tmpval;
            QuartVect["Fact:" & VIrw.Exp & ":" & PRr.Code] = QuartVect["Fact:" & VIrw.Exp & ":" & PRr.Code] + tmpval;
            QuartVect["Fact:" & group & ":" & PRr.Code] = QuartVect["Fact:" & group & ":" & PRr.Code] + tmpval;
            
          end;
        end;
      end;
    end;
  end;
	

	RETURN;
END;

global
procedure ProjectFoundRn(record RcVc RepSpec, var string fnserv, var string md5str, var boolean PrjFoundf)
BEGIN
//RepSpec.f1 - Foundation
//RepSpec.ObjStr - Location
	record BaseCurBlock BCb;
	record ITVc ITr;
  record INVc INr;
	record ObjVc Objr;
	array string 255 ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups;
	vector val QuartVect,PrjTotVect;
	integer i,j,Qi,quartCount;
	string 100 group,nextgroup;
	val totrow,facttotrow;
	string 255 AccStr;
  array integer quartToPrint;
	
	array string 10 sheetNames;
	array val sheetColls;
	array integer sheetCollsOutLvl;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr,
			style1,style2,style3,style4,style5,style6,style7,style8,style9,style10,style11,style12,style13;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
	array string 225 mas;
  
  ArraysCollect(RepSpec,ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups,PrjFoundf,AccStr);
	
	if (PrjFoundf) then begin
		DataCollect(ArtArrayWithoutGroups,ProjArray,RepSpec,QuartVect,AccStr);
    
		reportName = "ProjectFoundRn";
		if(windowsmode==1)then begin
      fileToSave = DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end else begin
			fileToSave = "/" & DateToString(CurrentDate,"YYYYMMDD") & "_" & TimeToString(CurrentTime,"HHMMSS",false) & "_" & GetCurTick() & ".xlsx";
		end;
		deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
		BlockLoad(BCb);
		colnum = 0;
		quartCount = RepSpec.flags[1] + RepSpec.flags[2] + RepSpec.flags[3] + RepSpec.flags[4];
		if (RepSpec.flags[4]==1) then begin
			i = 4;
		end;
		if (RepSpec.flags[3]==1) then begin
			i = 3;
		end;
		if (RepSpec.flags[2]==1) then begin
			i = 2;
		end;
		if (RepSpec.flags[1]==1) then begin
			i = 1;
		end;
		quartToPrint[0] = i;
		i = 0;
		for (i=1;i<quartCount;i=i+1) begin
			quartToPrint[i] = quartToPrint[0] + i;
		end;
		
		if quartCount > 1 then begin
			sheetNames[qtyOfSheets] = RepSpec.f1;
			if nonblank(RepSpec.ObjStr) then begin
				sheetNames[qtyOfSheets] = sheetNames[qtyOfSheets] & "-" & RepSpec.ObjStr;
			end;
			sheetNames[qtyOfSheets] = sheetNames[0] & "-Projects-TOT";
			qtyOfSheets = qtyOfSheets + 1;
		end;
    for (j=0;j<quartCount;j=j+1) begin
      sheetNames[qtyOfSheets] = RepSpec.f1;
      if nonblank(RepSpec.ObjStr) then begin
				sheetNames[qtyOfSheets] = sheetNames[qtyOfSheets] & "-" & RepSpec.ObjStr;
			end;
			sheetNames[qtyOfSheets] = sheetNames[0] & "-Projects-" & QuartalIntToStr(quartToPrint[j]);
			qtyOfSheets = qtyOfSheets + 1;
    end;
		
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
    XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
		sheetnum = 0;
		qtyMergeCell = 0;
		if quartCount > 1 then begin
			colnum = 0;
			//TOTAL
			sheetColls[colnum] = 9.5703125;
			colnum = colnum + 1;
			
			sheetColls[colnum] = 7.28515625;
			colnum = colnum + 1;
			
			sheetColls[colnum] = 38.140625;
			colnum = colnum + 1;
			for (i=0;i<ProjArray.length*2;i=i+1) begin
				sheetColls[colnum] = 9.42578125;
				colnum = colnum + 1;
			end;
			sheetColls[colnum] = 14.42578125;
			colnum = colnum + 1;
			sheetColls[colnum] = 14.42578125;
			colnum = colnum + 1;
			sheetColls[colnum] = 12;
			colnum = colnum + 1;
			sheetColls[colnum] = 7.28515625;
			sheetnum = sheetnum + 1;
      SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
			BeginSheetData(sheetnum,fileToSave);
			rownum = 1;
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 1;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Projects",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
				if nonblank(RepSpec.ObjStr) then begin
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Location - " & RepSpec.ObjStr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 9;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 10;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.sStartDate & " - " & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 4;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 78;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 79;
				qtyOfEmpStr = ProjArray.length*2 + 2;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 80;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				colnum = colnum + 1;
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 4;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				for (i=0;i<ProjArray.length;i=i+1) begin
					style = 84;
					mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 86;
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);
					qtyMergeCell = qtyMergeCell + 1;
				end;
				style = 87;
				mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 88;
				qtyOfEmpStr = 2;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 89;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);
				qtyMergeCell = qtyMergeCell + 1;
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 4;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				for (i=0;i<ProjArray.length;i=i+1) begin
					style = 51;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 52;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
				style = 70;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 77;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 14;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 61;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
			for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
				INr.Objects = ArtArrayWithGroups[i+1];
        if ReadfirstKey("Objects",INr,1,true) then begin
          ITr.Code = INr.Group;
          ReadFirstMain(ITr,1,true);
          nextgroup = ITr.Code;
        end else begin
          nextgroup = ArtArrayWithGroups[i+1];
        end;
        INr.Objects = ArtArrayWithGroups[i];
        if ReadfirstKey("Objects",INr,1,true) then begin
          ITr.Code = INr.Group;
          ReadFirstMain(ITr,1,true);
          group = ITr.Code;
        end else begin
          ITr.Code = ArtArrayWithGroups[i];
					ReadFirstMain(ITr,1,true);
					group = ITr.Code;
        end;
        if ArtArrayWithGroups[i]==group then begin
					rownum = rownum + 1;
					colnum = 1;
					BeginRow(sheetnum,fileToSave,rownum,0,blankval);
						style = 2;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						colnum = colnum + 1;
						totrow = 0;
						facttotrow = 0;
						for (j=0;j<ProjArray.length;j=j+1) begin
							if (j==0) then begin
								style = 62;
							end else begin
								style = 66;
							end;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							style = 41;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							totrow = totrow + QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							facttotrow = facttotrow + QuartVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							PrjTotVect["TOTAL:" & ProjArray[j]] = PrjTotVect["TOTAL:" & ProjArray[j]] + QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							PrjTotVect["Fact:TOTAL:" & ProjArray[j]] = PrjTotVect["Fact:TOTAL:" & ProjArray[j]] + QuartVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						end;
						style = 46;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
						style = 71;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
						style = 43;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,(facttotrow-totrow));
						style = 57;
						if (totrow == 0) then begin
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end else begin
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(facttotrow - totrow)/totrow);
						end;
						PrjTotVect["TOTAL:TOTAL"] = PrjTotVect["TOTAL:TOTAL"] + totrow;
						PrjTotVect["Fact:TOTAL:TOTAL"] = PrjTotVect["Fact:TOTAL:TOTAL"] + facttotrow;
					EndRow(sheetnum,fileToSave,rownum);
				end else begin
					style1 = 4;
					style2 = 18;
					style3 = 19;
					style4 = 20;
					style5 = 17;
					style6 = 21;
					style7 = 22;
					style8 = 23;
					style9 = 64;
					style10 = 55;
					style11 = 68;
					style12 = 73;
					style13 = 59;
					if ArtArrayWithGroups[i-1]==group then begin
						style1 = 32;
						style2 = 33;
						style3 = 34;
						style4 = 35;
						style5 = 36;
						style6 = 37;
						style7 = 38;
						style8 = 39;
						style9 = 63;
						style10 = 54;
						style11 = 67;
						style12 = 72;
						style13 = 58;
					end;
					if (ArtArrayWithGroups[i+1]==nextgroup or blank(ArtArrayWithGroups[i+1])) then begin
						style1 = 24;
						style2 = 25;
						style3 = 26;
						style4 = 27;
						style5 = 28;
						style6 = 29;
						style7 = 30;
						style8 = 31;
						style9 = 65;
						style10 = 56;
						style11 = 69;
						style12 = 74;
						style13 = 60;
					end;
					colnum = 1;
					BeginRow(sheetnum,fileToSave,rownum,1,blankval);
						style = 3;
						if (Right(ArtArrayWithGroups[i],1)=="0") then begin
							StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							colnum = colnum + 1;
						end else begin
							colnum = colnum + 1;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						end;
						Objr.Code = ArtArrayWithGroups[i];
						readfirstmain(Objr,1,true);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						//total
						totrow = 0;
						facttotrow = 0;
						for (j=0;j<ProjArray.length;j=j+1) begin
							if (j==0) then begin
								style = style9;
							end else begin
								style = style11;
							end;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							style = style2;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							totrow = totrow + QuartVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							facttotrow = facttotrow + QuartVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						end;
						style = style7;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
						style = style12;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
						style = style4;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,(facttotrow-totrow));
						style = style13;
						if (totrow == 0) then begin
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end else begin
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(facttotrow - totrow)/totrow);
						end;
					EndRow(sheetnum,fileToSave,rownum);
				end;
			end;
			rownum = rownum + 1;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"total costs",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
				for (j=0;j<ProjArray.length;j=j+1) begin
					style = 62;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["TOTAL:" & ProjArray[j]]);
					style = 48;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:TOTAL:" & ProjArray[j]]);
				end;
				style = 76;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["TOTAL:TOTAL"]);
				style = 75;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:TOTAL:TOTAL"]);
			EndRow(sheetnum,fileToSave,rownum);
			EndSheetData(sheetnum,fileToSave);
			MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
			EndSheet(sheetnum,fileToSave,0);
		end;
		
		colnum = 0;
		sheetColls[colnum] = 9.5703125;
		colnum = colnum + 1;
		
		sheetColls[colnum] = 7.28515625;
		colnum = colnum + 1;
		
		sheetColls[colnum] = 38.140625;
		colnum = colnum + 1;
		
		for (i=0;i<ProjArray.length*2;i=i+1) begin
			sheetColls[colnum] = 9.42578125;
			colnum = colnum + 1;
		end;
		sheetColls[colnum] = 12;
		colnum = colnum + 1;
		sheetColls[colnum] = 12;
		colnum = colnum + 1;
		sheetColls[colnum] = 12;
		colnum = colnum + 1;
		sheetColls[colnum] = 7.28515625;
		colnum = colnum + 1;
		
		for (Qi=0;Qi<quartCount;Qi=Qi+1) begin
			qtyMergeCell = 0;
			sheetnum = sheetnum + 1;
			SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
			BeginSheetData(sheetnum,fileToSave);
			rownum = 1;
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 1;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Projects",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
				if nonblank(RepSpec.ObjStr) then begin
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Location - " & RepSpec.ObjStr,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 9;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 10;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.sStartDate & " - " & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 4;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 6;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.f1 & " - Budget",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 7;
				qtyOfEmpStr = ProjArray.length*2 + 2;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 8;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 4;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				for (i=0;i<ProjArray.length;i=i+1) begin
					style = 81;
					mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 83;
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);
					qtyMergeCell = qtyMergeCell + 1;
				end;
				style = 84;
				mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 85;
				qtyOfEmpStr = 2;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);style = 86;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum - 1,rownum);
				qtyMergeCell = qtyMergeCell + 1;
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 4;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				for (i=0;i<ProjArray.length;i=i+1) begin
					style = 5;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]) & "-Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 11;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,QuartalIntToStr(quartToPrint[Qi]) & "-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
				style = 16;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 15;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 12;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 13;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
			for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
				INr.Objects = ArtArrayWithGroups[i+1];
        if ReadfirstKey("Objects",INr,1,true) then begin
          ITr.Code = INr.Group;
          ReadFirstMain(ITr,1,true);
          nextgroup = ITr.Code;
        end else begin
          nextgroup = ArtArrayWithGroups[i+1];
        end;
        INr.Objects = ArtArrayWithGroups[i];
        ReadfirstKey("Objects",INr,1,true);
        if ReadfirstKey("Objects",INr,1,true) then begin
          ITr.Code = INr.Group;
          ReadFirstMain(ITr,1,true);
          group = ITr.Code;
        end else begin
          ITr.Code = ArtArrayWithGroups[i];
					ReadFirstMain(ITr,1,true);
					group = ITr.Code;
        end;
				if ArtArrayWithGroups[i]==group then begin
					rownum = rownum + 1;
					colnum = 1;
					BeginRow(sheetnum,fileToSave,rownum,0,blankval);
						style = 2;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						colnum = colnum + 1;
						totrow = 0;
						facttotrow = 0;
						for (j=0;j<ProjArray.length;j=j+1) begin
							if (j==0) then begin
								style = 40;
							end else begin
								style = 44;
							end;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							style = 41;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & "Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							totrow = totrow + QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							facttotrow = facttotrow + QuartVect[quartToPrint[Qi] & ";" & "Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							PrjTotVect["Q1:" & ProjArray[j]] = PrjTotVect["Q1:" & ProjArray[j]] + QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							PrjTotVect["Fact:Q1:" & ProjArray[j]] = PrjTotVect["Fact:Q1:" & ProjArray[j]] + QuartVect[quartToPrint[Qi] & ";" & "Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						end;
						style = 45;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
						style = 46;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
						style = 42;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,(facttotrow-totrow));
						style = 47;
						if (totrow == 0) then begin
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end else begin
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(facttotrow - totrow)/totrow);
						end;
						PrjTotVect["Q1:TOTAL"] = PrjTotVect["Q1:TOTAL"] + totrow;
						PrjTotVect["Fact:Q1:TOTAL"] = PrjTotVect["Fact:Q1:TOTAL"] + facttotrow;
					EndRow(sheetnum,fileToSave,rownum);
				end else begin
					style1 = 4;
					style2 = 18;
					style3 = 19;
					style4 = 20;
					style5 = 17;
					style6 = 21;
					style7 = 22;
					style8 = 23;
					style9 = 64;
					style10 = 55;
					style11 = 68;
					style12 = 73;
					style13 = 59;
					if ArtArrayWithGroups[i-1]==group then begin
						style1 = 32;
						style2 = 33;
						style3 = 34;
						style4 = 35;
						style5 = 36;
						style6 = 37;
						style7 = 38;
						style8 = 39;
						style9 = 63;
						style10 = 54;
						style11 = 67;
						style12 = 72;
						style13 = 58;
					end;
					if (ArtArrayWithGroups[i+1]==nextgroup or blank(ArtArrayWithGroups[i+1])) then begin
						style1 = 24;
						style2 = 25;
						style3 = 26;
						style4 = 27;
						style5 = 28;
						style6 = 29;
						style7 = 30;
						style8 = 31;
						style9 = 65;
						style10 = 56;
						style11 = 69;
						style12 = 74;
						style13 = 60;
					end;
					colnum = 1;
					BeginRow(sheetnum,fileToSave,rownum,1,blankval);
						style = 3;
						if (Right(ArtArrayWithGroups[i],1)=="0") then begin
							StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							colnum = colnum + 1;
						end else begin
							colnum = colnum + 1;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						end;
						Objr.Code = ArtArrayWithGroups[i];
						readfirstmain(Objr,1,true);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						totrow = 0;
						facttotrow = 0;
						for (j=0;j<ProjArray.length;j=j+1) begin
							if (j==0) then begin
								style = style1;
							end else begin
								style = style5;
							end;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							style = style2;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,QuartVect[quartToPrint[Qi] & ";" & "Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
							totrow = totrow + QuartVect[quartToPrint[Qi] & ";" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
							facttotrow = facttotrow + QuartVect[quartToPrint[Qi] & ";" & "Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						end;
						style = style6;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
						style = style7;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
						style = style3;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,(facttotrow-totrow));
						style = style8;
						if (totrow == 0) then begin
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end else begin
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(facttotrow - totrow)/totrow);
						end;
					EndRow(sheetnum,fileToSave,rownum);
				end;
			end;
			rownum = rownum + 1;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"total costs",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				colnum = colnum + 1;
					for (j=0;j<ProjArray.length;j=j+1) begin
						style = 40;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q1:" & ProjArray[j]]);
						style = 48;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q1:" & ProjArray[j]]);
					end;
					style = 49;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q1:TOTAL"]);
					style = 50;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q1:TOTAL"]);
			EndRow(sheetnum,fileToSave,rownum);
			EndSheetData(sheetnum,fileToSave);
			MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
			EndSheet(sheetnum,fileToSave,0);
		end;
		
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
		ConvertToXLSX(fileToSave);
		MilliSleep(2000);
    fnserv = fileToSave;
    md5str = GetFileMD5(fnserv);
	end;
	RETURN;
END;