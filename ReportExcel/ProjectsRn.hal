external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,boolean);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);
external function integer GetQuartal(date);

procedure ArraysCollect(record RcVc RepSpec, var array string ArtArrayWithoutGroups, var array string ProjArray, var array string ArtArrayWithGroups, var boolean PrjFoundf, var string AccStr)
BEGIN
	record ITVc ITr;
	record INVc INr;
	record PRVc PRr;
	integer i,j,k,kw,kwo;
	boolean TrHs,testf,foundf;
	string 100 tstr;
	
	kw = 0;
	while(loopmain(ITr,1,true)) begin
		ArtArrayWithGroups[kw] = ITr.Code;
		kw = kw + 1;
		resetloop(INr);
		INr.Group = ITr.Code;
		TrHs = true;
		while(loopkey("Group",INr,1,TrHs)) begin
			testf = true;
			if (INr.Group!=ITr.Code) then begin testf = false; TrHs = false; end;
			if (blank(INr.Objects)) then begin testf = false; end;
			
			if (testf) then begin
				tstr = INr.Objects;
				if !(SetInSet(INr.CostAcc,AccStr)) then begin
					AccStr = AccStr & "," & INr.CostAcc;
				end;
				foundf = false;
				for (i=0;i<ArtArrayWithoutGroups.length;i=i+1) begin
					if (ArtArrayWithoutGroups[i]==tstr) then begin
						foundf = true;
					end;
				end; 
				if (!foundf) then begin
					ArtArrayWithoutGroups[kwo] = INr.Objects;
					kwo = kwo + 1;
					ArtArrayWithGroups[kw] = INr.Objects;
					kw = kw + 1;
				end;
			end;
		end;
	end;
	AccStr = right(AccStr,len(AccStr) - 1);
	
	k = 0;
	while(loopmain(PRr,1,true)) begin
		if ((PRr.StartDate<RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sStartDate and PRr.EndDate<=RepSpec.sEndDate) or (PRr.StartDate>=RepSpec.sStartDate and PRr.StartDate<=RepSpec.sEndDate) or (PRr.StartDate<=RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sEndDate))then begin
			if blank(PRr.MotherCode) then begin
				ProjArray[k] = PRr.Code;
				k = k + 1;
			end;
		end;
	end;
	if (k==0) then begin
		PrjFoundf = false;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(array string ArtArrayWithoutGroups, array string ProjArray, record RcVc RepSpec,
					var vector val Quart1Vect, var vector val Quart2Vect,
					var vector val Quart3Vect, var vector val Quart4Vect,
					var vector val TOTALVect, string AccStr)
BEGIN
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	record ITVc ITr;
	record TRVc TRr;
	record MainVc Mainr;
	row TBBUVc TBBUrw;
	row TRVc TRrw;
	integer i,k,j,mtrw,PAi;
	boolean TrHs,testf;
	string 20 group;
	array string 20 prjobjs;
	
	for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin 
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
			prjobjs[PAi] = PRr.Objects;
			if ((PRr.StartDate<RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sStartDate and PRr.EndDate<=RepSpec.sEndDate) or (PRr.StartDate>=RepSpec.sStartDate and PRr.StartDate<=RepSpec.sEndDate) or (PRr.StartDate<=RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sEndDate))then begin
				TBBUr.PRCode = PRr.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
					k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
						if (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode) and TBBUrw.ExtraObj==RepSpec.f1) then begin
							for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
								if (setinset(ArtArrayWithoutGroups[j],TBBUrw.Objects)) then begin
									ITr.Code = ArtArrayWithoutGroups[j];
									ReadLastMain(ITr,1,false);
									group = ITr.Code;
									switch(k) begin
										case 1:
											Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											Quart1Vect[group & ":" & ProjArray[PAi]] = Quart1Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										case 2:
											Quart2Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart2Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											Quart2Vect[group & ":" & ProjArray[PAi]] = Quart2Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										case 3:
											Quart3Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart3Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											Quart3Vect[group & ":" & ProjArray[PAi]] = Quart3Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										case 4:
											Quart4Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart4Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											Quart4Vect[group & ":" & ProjArray[PAi]] = Quart4Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										otherwise
											Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											Quart1Vect[group & ":" & ProjArray[PAi]] = Quart1Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									end;
									TOTALVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = TOTALVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									TOTALVect[group & ":" & ProjArray[PAi]] = TOTALVect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
								end;
							end; 
						end;
					end; 
				end;
			end;

			PR2r.MotherCode = PRr.Code;
			TrHs = true;
			while(loopkey("MotherCode",PR2r,1,TrHs)) begin
				testf = true;
				if (PR2r.MotherCode!=PRr.Code) then begin
					TrHs = false;
					testf = false;
				end;
				if ((PR2r.StartDate<RepSpec.sStartDate and nonblank(PR2r.EndDate) and PR2r.EndDate>=RepSpec.sStartDate and PR2r.EndDate<=RepSpec.sEndDate) or (PR2r.StartDate>=RepSpec.sStartDate and PR2r.StartDate<=RepSpec.sEndDate) or (PR2r.StartDate<=RepSpec.sStartDate and nonblank(PR2r.EndDate) and PR2r.EndDate>=RepSpec.sEndDate)) then begin
					testf = true;
				end else begin
					testf = false;
				end;
				if (testf) then begin
					TBBUr.PRCode = PR2r.Code;
					if (readfirstmain(TBBUr,1,true)) then begin
						mtrw = matrowcnt(TBBUr);
						k = 0;
						for (i=0;i<mtrw;i=i+1) begin
							matrowget(TBBUr,i,TBBUrw);
							if (TBBUrw.stp==18) then begin
								k = TBBUrw.ItemType;
							end;
							if (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode) and TBBUrw.ExtraObj==RepSpec.f1) then begin
								for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
									if (setinset(ArtArrayWithoutGroups[j],TBBUrw.Objects)) then begin
										ITr.Code = ArtArrayWithoutGroups[j];
										ReadLastMain(ITr,1,false);
										group = ITr.Code;
										switch(k) begin
											case 1:
												//на пересечении столбец проект - строка статья
												Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
												//на пересечении столбец проект - строка группа статей
												Quart1Vect[group & ":" & ProjArray[PAi]] = Quart1Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											case 2:
												Quart2Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart2Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
												Quart2Vect[group & ":" & ProjArray[PAi]] = Quart2Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											case 3:
												Quart3Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart3Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
												Quart3Vect[group & ":" & ProjArray[PAi]] = Quart3Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											case 4:
												Quart4Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart4Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
												Quart4Vect[group & ":" & ProjArray[PAi]] = Quart4Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											otherwise
												Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart1Vect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
												Quart1Vect[group & ":" & ProjArray[PAi]] = Quart1Vect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										end;
										TOTALVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = TOTALVect[ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										TOTALVect[group & ":" & ProjArray[PAi]] = TOTALVect[group & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									end;
								end; 
							end;
						end; 
					end;
				end;
			end; //while
		end;
	end; //for (PAi=0...
	Mainr.TransDate = RepSpec.sStartDate;
	TrHs = true;
	while (loopkey("TransDate",Mainr,1,TrHs)) begin
		
		testf = true;
		if (!SetInSet(Mainr.AccNumber,AccStr)) then begin
			testf = false;
		end;
		if (Mainr.TransDate>RepSpec.sEndDate) then begin
			TrHs = false;
			testf = false;
		end;
		
		if (testf) then begin
			TRr.Number = Mainr.TransNr;
			TRr.IntYc = Mainr.IntYc;
			if (readfirstmain(TRr,2,true)) then begin
				k = GetQuartal(TRr.TransDate);
				mtrw = matrowcnt(TRr);
				for (i=0;i<mtrw;i=i+1) begin
					matrowget(TRr,i,TRrw);
					if (TRrw.ovst==0 and TRrw.AccNumber==Mainr.AccNumber and setinset(RepSpec.f1,TRrw.Objects)) then begin
						for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
							if(setinset(prjobjs[PAi],TRrw.Objects)) then begin
								for (j=0;j<ArtArrayWithoutGroups.length;j=j+1) begin
									if (setinset(ArtArrayWithoutGroups[j],TRrw.Objects)) then begin
										ITr.Code = ArtArrayWithoutGroups[j];
										ReadLastMain(ITr,1,false);
										group = ITr.Code;
										switch(k) begin
											case 1:
												//на пересечении столбец проект - строка статья
												Quart1Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart1Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
												//на пересечении столбец проект - строка группа статей
												Quart1Vect["Fact:" & group & ":" & ProjArray[PAi]] = Quart1Vect["Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
											case 2:
												Quart2Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart2Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
												Quart2Vect["Fact:" & group & ":" & ProjArray[PAi]] = Quart2Vect["Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
											case 3:
												Quart3Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart3Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
												Quart3Vect["Fact:" & group & ":" & ProjArray[PAi]] = Quart3Vect["Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
											case 4:
												Quart4Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart4Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
												Quart4Vect["Fact:" & group & ":" & ProjArray[PAi]] = Quart4Vect["Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
											otherwise
												Quart1Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = Quart1Vect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
												Quart1Vect["Fact:" & group & ":" & ProjArray[PAi]] = Quart1Vect["Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
										end;
										TOTALVect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] = TOTALVect["Fact:" & ArtArrayWithoutGroups[j] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
										TOTALVect["Fact:" & group & ":" & ProjArray[PAi]] = TOTALVect["Fact:" & group & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
									end;
								end;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	RETURN;
END;

global
procedure ProjectRn(record RcVc RepSpec,var area areatofile, var boolean PrjFoundf)
BEGIN
	record BaseCurBlock BCb;
	record ITVc ITr;
	record ObjVc Objr;
	array string 255 ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups;
	vector val Quart1Vect,Quart2Vect,Quart3Vect,Quart4Vect,TOTALVect,PrjTotVect;
	integer i,j;
	string 100 group,nextgroup;
	val totrow,facttotrow;
	string 255 AccStr;
	
	array string 10 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr,
			style1,style2,style3,style4,style5,style6,style7,style8;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
	
	ArraysCollect(RepSpec,ArtArrayWithoutGroups,ProjArray,ArtArrayWithGroups,PrjFoundf,AccStr);
	if (PrjFoundf) then begin
		DataCollect(ArtArrayWithoutGroups,ProjArray,RepSpec,Quart1Vect,Quart2Vect,Quart3Vect,Quart4Vect,TOTALVect,AccStr);

		reportName = "ProjectRn";
		logtext(0,reportName & " is runing");
		if(windowsmode==1)then begin
			fileToSave = "tmpxlsx.xlsx";
		end else begin
			fileToSave = "/tmpxlsx.xlsx";
		end;
		deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
		BlockLoad(BCb);
		sheetNames[0] = RepSpec.f1 & "-Projects-TOT";
		qtyOfSheets = 1;
		colnum = 0;
		sheetColls[colnum] = 9.5703125;
		colnum = colnum + 1;
		
		sheetColls[colnum] = 7.28515625;
		colnum = colnum + 1;
		
		sheetColls[colnum] = 38.140625;
		colnum = colnum + 1;
		
		for (j=0;j<=3;j=j+1) begin
			for (i=0;i<ProjArray.length;i=i+1) begin
				sheetColls[colnum] = 9.42578125;
				colnum = colnum + 1;
				sheetColls[colnum] = 9.42578125;
				colnum = colnum + 1;
			end;
			sheetColls[colnum] = 12;
			colnum = colnum + 1;

			sheetColls[colnum] = 12;
			colnum = colnum + 1;

			sheetColls[colnum] = 1.7109375;
			colnum = colnum + 1;
		end;
		
		for (i=0;i<ProjArray.length;i=i+1) begin
			sheetColls[colnum] = 9.42578125;
			colnum = colnum + 1;
			sheetColls[colnum] = 9.42578125;
			colnum = colnum + 1;
		end;
		sheetColls[colnum] = 14.42578125;
		colnum = colnum + 1;

		sheetColls[colnum] = 14.42578125;
		
		colnum = 0;
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		sheetnum = 1;
		qtyMergeCell = 0;
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0);
		SetSheetsCols(sheetnum,sheetColls,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
		style = 1;
		colnum = 1;
		rownum = 1;
		BeginRow(sheetnum,fileToSave,rownum,false);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Projects",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		style = 45;
		colnum = 1;
		BeginRow(sheetnum,fileToSave,rownum,false);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Currency",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			style = 2;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,BCb.BaseCur1,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		style = 46;
		colnum = 1;
		BeginRow(sheetnum,fileToSave,rownum,false);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Period",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			style = 2;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.sStartDate & " - " & RepSpec.sEndDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,false);
			for (j=0;j<=3;j=j+1) begin
				style = 17;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,RepSpec.f1 & " - Budget",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 18;
				for (i=1;i<ProjArray.length*2+1;i=i+1) begin
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				end;
				style = 19;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				colnum = colnum + 1;
			end;
			style = 33;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			style = 34;
			for (i=1;i<ProjArray.length*2+1;i=i+1) begin
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			end;
			style = 35;
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			colnum = colnum + 1;
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,false);
			for (j=0;j<=3;j=j+1) begin
				style = 5;
				for (i=0;i<ProjArray.length;i=i+1) begin
					mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 6;
					mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum,rownum);
					qtyMergeCell = qtyMergeCell + 1;
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					style = 6;
				end;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 7;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				colnum = colnum + 1;
			end;
			style = 8;
			for (i=0;i<ProjArray.length;i=i+1) begin
				mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 9;
				mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum,rownum);
				qtyMergeCell = qtyMergeCell + 1;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 9;
			end;
			style = 36;
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		EndRow(sheetnum,fileToSave,rownum);
		colnum = 4;
		BeginRow(sheetnum,fileToSave,rownum,false);
			style = 20;
			for (i=0;i<ProjArray.length;i=i+1) begin
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QI",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				if (i==ProjArray.length - 1) then begin
					style = 22;
				end else begin
					style = 21;
				end;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QI-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
			style = 28;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			colnum = colnum + 1;
			style = 20;
			for (i=0;i<ProjArray.length;i=i+1) begin
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QII",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				if (i==ProjArray.length - 1) then begin
					style = 22;
				end else begin
					style = 21;
				end;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QII-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
			style = 28;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			colnum = colnum + 1;
			style = 20;
			for (i=0;i<ProjArray.length;i=i+1) begin
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIII",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				if (i==ProjArray.length - 1) then begin
					style = 22;
				end else begin
					style = 21;
				end;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIII-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
			style = 28;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			colnum = colnum + 1;
			style = 20;
			for (i=0;i<ProjArray.length;i=i+1) begin
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIV",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				if (i==ProjArray.length - 1) then begin
					style = 22;
				end else begin
					style = 21;
				end;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"QIV-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
			style = 28;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOT-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			colnum = colnum + 1;
			
			style = 23;
			for (i=0;i<ProjArray.length;i=i+1) begin
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 22;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			end;
			style = 37;
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand Total-Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		EndRow(sheetnum,fileToSave,rownum);
		for (i=0;i<ArtArrayWithGroups.length;i=i+1) begin
			ITr.Code = ArtArrayWithGroups[i+1];
			ReadLastMain(ITr,1,false);
			nextgroup = ITr.Code;
			ITr.Code = ArtArrayWithGroups[i];
			ReadLastMain(ITr,1,false);
			group = ITr.Code;
			if ArtArrayWithGroups[i]==group then begin
				rownum = rownum + 1;
				style = 2;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum,false);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ITr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					colnum = colnum + 1;
					totrow = 0;
					facttotrow = 0;
					style = 10;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart1Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart1Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						totrow = totrow + Quart1Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart1Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Q1:" & ProjArray[j]] = PrjTotVect["Q1:" & ProjArray[j]] + Quart1Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Fact:Q1:" & ProjArray[j]] = PrjTotVect["Fact:Q1:" & ProjArray[j]] + Quart1Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = 29;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					colnum = colnum + 1;
					PrjTotVect["Q1:TOTAL"] = PrjTotVect["Q1:TOTAL"] + totrow;
					PrjTotVect["Fact:Q1:TOTAL"] = PrjTotVect["Fact:Q1:TOTAL"] + facttotrow;
					totrow = 0;
					facttotrow = 0;
					style = 10;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart2Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart2Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						totrow = totrow + Quart2Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart2Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Q2:" & ProjArray[j]] = PrjTotVect["Q2:" & ProjArray[j]] + Quart2Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Fact:Q2:" & ProjArray[j]] = PrjTotVect["Fact:Q2:" & ProjArray[j]] + Quart2Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = 29;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					colnum = colnum + 1;
					PrjTotVect["Q2:TOTAL"] = PrjTotVect["Q2:TOTAL"] + totrow;
					PrjTotVect["Fact:Q2:TOTAL"] = PrjTotVect["Fact:Q2:TOTAL"] + facttotrow;
					totrow = 0;
					facttotrow = 0;
					style = 10;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart3Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart3Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						totrow = totrow + Quart3Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart3Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Q3:" & ProjArray[j]] = PrjTotVect["Q3:" & ProjArray[j]] + Quart3Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Fact:Q3:" & ProjArray[j]] = PrjTotVect["Fact:Q3:" & ProjArray[j]] + Quart3Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = 29;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					colnum = colnum + 1;
					PrjTotVect["Q3:TOTAL"] = PrjTotVect["Q3:TOTAL"] + totrow;
					PrjTotVect["Fact:Q3:TOTAL"] = PrjTotVect["Fact:Q3:TOTAL"] + facttotrow;
					totrow = 0;
					facttotrow = 0;
					style = 10;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart4Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart4Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						totrow = totrow + Quart4Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart4Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Q4:" & ProjArray[j]] = PrjTotVect["Q4:" & ProjArray[j]] + Quart4Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Fact:Q4:" & ProjArray[j]] = PrjTotVect["Fact:Q4:" & ProjArray[j]] + Quart4Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = 29;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					colnum = colnum + 1;
					PrjTotVect["Q4:TOTAL"] = PrjTotVect["Q4:TOTAL"] + totrow;
					PrjTotVect["Fact:Q4:TOTAL"] = PrjTotVect["Fact:Q4:TOTAL"] + facttotrow;
					totrow = 0;
					facttotrow = 0;
					style = 38;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,TOTALVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,TOTALVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						totrow = totrow + TOTALVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + TOTALVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["TOTAL:" & ProjArray[j]] = PrjTotVect["TOTAL:" & ProjArray[j]] + TOTALVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						PrjTotVect["Fact:TOTAL:" & ProjArray[j]] = PrjTotVect["Fact:TOTAL:" & ProjArray[j]] + TOTALVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = 24;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					PrjTotVect["TOTAL:TOTAL"] = PrjTotVect["TOTAL:TOTAL"] + totrow;
					PrjTotVect["Fact:TOTAL:TOTAL"] = PrjTotVect["Fact:TOTAL:TOTAL"] + facttotrow;
				EndRow(sheetnum,fileToSave,rownum);
			end else begin
				style1 = 16;
				style2 = 15;
				style3 = 31;
				style4 = 41;
				style5 = 42;
				style6 = 26;
				style7 = 48;
				style8 = 51;
				if ArtArrayWithGroups[i-1]==group then begin
					style1 = 13;
					style2 = 14;
					style3 = 30;
					style4 = 39;
					style5 = 40;
					style6 = 25;
					style7 = 47;
					style8 = 50;
				end;
				if (ArtArrayWithGroups[i+1]==nextgroup or blank(ArtArrayWithGroups[i+1])) then begin
					style1 = 12;
					style2 = 11;
					style3 = 32;
					style4 = 43;
					style5 = 44;
					style6 = 27;
					style7 = 49;
					style8 = 52;
				end;
				style = 3;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum,true);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ArtArrayWithGroups[i],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					colnum = colnum + 1;
					Objr.Code = ArtArrayWithGroups[i];
					readfirstmain(Objr,1,true);
					StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					totrow = 0;
					facttotrow = 0;
					style = style1;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart1Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart1Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						totrow = totrow + Quart1Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart1Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = style7;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					style = style3;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					colnum = colnum + 1;
					totrow = 0;
					facttotrow = 0;
					style = style1;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart2Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart2Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						totrow = totrow + Quart2Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart2Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = style7;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					style = style3;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					colnum = colnum + 1;
					totrow = 0;
					facttotrow = 0;
					style = style1;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart3Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart3Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						totrow = totrow + Quart3Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart3Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = style7;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					style = style3;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					colnum = colnum + 1;
					totrow = 0;
					facttotrow = 0;
					style = style1;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart4Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Quart4Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style2;
						totrow = totrow + Quart4Vect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + Quart4Vect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = style7;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					style = style3;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
					//total
					colnum = colnum + 1;
					totrow = 0;
					facttotrow = 0;
					style = style4;
					for (j=0;j<ProjArray.length;j=j+1) begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,TOTALVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style5;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,TOTALVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]]);
						style = style5;
						totrow = totrow + TOTALVect[ArtArrayWithGroups[i] & ":" & ProjArray[j]];
						facttotrow = facttotrow + TOTALVect["Fact:" & ArtArrayWithGroups[i] & ":" & ProjArray[j]];
					end;
					style = style8;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,totrow);
					style = style6;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,facttotrow);
				EndRow(sheetnum,fileToSave,rownum);
			end;
		end;
		rownum = rownum + 1;
		style = 2;
		colnum = 2;
		BeginRow(sheetnum,fileToSave,rownum,false);
			StringCell(sheetnum,fileToSave,colnum,rownum,style,"total costs",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			colnum = colnum + 1;
			style = 10;
			for (j=0;j<ProjArray.length;j=j+1) begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q1:" & ProjArray[j]]);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q1:" & ProjArray[j]]);
			end;
			style = 29;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q1:TOTAL"]);
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q1:TOTAL"]);
			colnum = colnum + 1;
			style = 10;
			for (j=0;j<ProjArray.length;j=j+1) begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q2:" & ProjArray[j]]);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q2:" & ProjArray[j]]);
			end;
			style = 29;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q2:TOTAL"]);
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q2:TOTAL"]);
			colnum = colnum + 1;
			style = 10;
			for (j=0;j<ProjArray.length;j=j+1) begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q3:" & ProjArray[j]]);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q3:" & ProjArray[j]]);
			end;
			style = 29;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q3:TOTAL"]);
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q3:TOTAL"]);
			colnum = colnum + 1;
			style = 10;
			for (j=0;j<ProjArray.length;j=j+1) begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q4:" & ProjArray[j]]);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q4:" & ProjArray[j]]);
			end;
			style = 29;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Q4:TOTAL"]);
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:Q4:TOTAL"]);
			colnum = colnum + 1;
			style = 38;
			for (j=0;j<ProjArray.length;j=j+1) begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["TOTAL:" & ProjArray[j]]);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:TOTAL:" & ProjArray[j]]);
			end;
			style = 24;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["TOTAL:TOTAL"]);
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,PrjTotVect["Fact:TOTAL:TOTAL"]);
		EndRow(sheetnum,fileToSave,rownum);
		EndSheetData(sheetnum,fileToSave);
		MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
		EndSheet(sheetnum,fileToSave,0);
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		ConvertToXLSX(fileToSave);
		
		MilliSleep(2000);
		addfiletoarea(fileToSave,areatofile,false);
		delete_file(fileToSave);
	end;
	RETURN;
END;