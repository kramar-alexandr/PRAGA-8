external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);
external function integer GetQuartal(date);

procedure ArraysCollect(record RcVc RepSpec, var array string ArtArray, var array string ProjArray, var array string FoundArray,var vector string ProjNamesVect,var vector string FoundNamesVect, var boolean PrjFoundf)
BEGIN
	record ITVc ITr;
	record INVc INr;
	record PRVc PRr;
	record ObjVc Objr;
	integer i,j,k,oldcomp;
	boolean TrHs,testf,foundf;
	string 100 tstr;
  string 2 year;
  
	year = right(RepSpec.f2,2);
  
	k = 0;
	Objr.OTCode = "FOUND";
	TrHs=true;
	while (LoopKey("OTCode",Objr,1,TrHs)) begin
		testf = true;
		if (Objr.OTCode != "FOUND") then begin
			testf = false;
			TrHs = false;
		end;
		if (Objr.TerminateFlag == 1) then begin
			testf = false;
		end;
		if (testf) then begin
			FoundArray[k] = Objr.Code;
			FoundNamesVect[FoundArray[k]] = Objr.Comment;
			k = k + 1;
		end;
	end;
	k = 0;
  if (RepSpec.f2=="20" & year) then begin
    resetloop(ITr);
    while(loopmain(ITr,1,true)) begin
      if (right(ITr.Code,3)=="_" & year) then begin
        resetloop(INr);
        INr.Group = ITr.Code;
        TrHs = true;
        while(loopkey("Group",INr,1,TrHs)) begin
          testf = true;
          if (INr.Group!=ITr.Code) then begin testf = false; TrHs = false; end;
          if (blank(INr.Objects)) then begin testf = false; end;
          if (right(INr.Objects,3)!="_" & year) then begin testf = false; end;
          if (testf) then begin
            tstr = INr.Objects;
            foundf = false;
            for (i=0;i<ArtArray.length;i=i+1) begin
              if (ArtArray[i]==tstr) then begin
                foundf = true;
              end;
            end; 
            if (!foundf) then begin
              ArtArray[k] = INr.Objects;
              k = k + 1;
            end;
          end;
        end;
      end;
    end;
  end else begin
    ITr.Code = 4000;
    if (readfirstmain(ITr,1,true)) begin
      resetloop(INr);
      INr.Group = ITr.Code;
      TrHs = true;
      while(loopkey("Group",INr,1,TrHs)) begin
        testf = true;
        if (INr.Group!=ITr.Code) then begin testf = false; TrHs = false; end;
        if (blank(INr.Objects)) then begin testf = false; end;
        if (right(INr.Objects,3)=="_" & year) then begin testf = false; end;
        if (testf) then begin
          tstr = INr.Objects;
          foundf = false;
          for (i=0;i<ArtArray.length;i=i+1) begin
            if (ArtArray[i]==tstr) then begin
              foundf = true;
            end;
          end; 
          if (!foundf) then begin
            ArtArray[k] = INr.Objects;
            k = k + 1;
          end;
        end;
      end;
    end;
  end;
	
  oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
  end;
	k = 0;
	while(loopmain(PRr,1,true)) begin
		if (PRr.Code=="20" & year & ".998") then begin goto L1; end;
		if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
			if blank(PRr.MotherCode) or (PRr.MotherCode == "") then begin
				ProjArray[k] = PRr.Code;
				ProjNamesVect[ProjArray[k]] = PRr.Name;
				k = k + 1;
			end;
		end;
L1:end;
  resetcompany(oldcomp);
	if (k==0) then begin
		PrjFoundf = false;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(array string ArtArray, var array string ArtSuppl,
					var array string ProjArray, array string FoundArray,
					record RcVc RepSpec,
					var vector string Vect,var vector string ProjManager)
BEGIN
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	row TBBUVc TBBUrw;
	row TRVc TRrw;
	record ObjVc Objr;
	integer i,k,mtrw,PAi,FAi,AAi,ASi,TVi,DPi,DPTVi,supcount,oldcomp;
	boolean TrHs,testf,firstf,kTestf;
	vector boolean SupplInArr;
	vector val TempVect;
	val total,totalDP,totalP;
	record SysFormatBlock SysFormatRec;
	
	BlockLoad(SysFormatRec);	
	ASi = 0;
	ArtSuppl[ASi] = "";
	ASi = ASi + 1;
	oldcomp = currentcompany;
  switch (RepSpec.f2) begin
    case "2017":
      SetCompany(2,false);
    case "2018":
      SetCompany(1,false);
    case "2019":
      SetCompany(1,false);
  end;
  for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
			ProjManager[ProjArray[PAi]] = PRr.PRMan;
			if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
				TBBUr.PRCode = PRr.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
					k = 0;
          for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
            if(TBBUrw.stp==18) then begin
              k = TBBUrw.ItemType;
            end;
            if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
              k = 1;
            end;
            kTestf = false;
            if ((RepSpec.flags[1]==1) and (k==1)) then begin
              kTestf = true;
            end;
            if ((RepSpec.flags[2]==1) and (k==2)) then begin
              kTestf = true;
            end;
            if ((RepSpec.flags[3]==1) and (k==3)) then begin
              kTestf = true;
            end;
            if ((RepSpec.flags[4]==1) and (k==4)) then begin
              kTestf = true;
            end;
            if ((RepSpec.flags[1]==1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
              kTestf = true;
            end;
            if kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode)) then begin
							for (FAi=0;FAi<FoundArray.length;FAi=FAi+1) begin
								if (setinset(FoundArray[FAi],TBBUrw.Objects)) then begin
									for (AAi=0;AAi<ArtArray.length;AAi=AAi+1) begin
										if (setinset(ArtArray[AAi],TBBUrw.Objects)) then begin
											if nonblank(TBBUrw.VECode) and !SupplInArr[TBBUrw.VECode] then begin
												SupplInArr[TBBUrw.VECode] = true;
												ArtSuppl[ASi] = TBBUrw.VECode;
												ASi = ASi + 1;
											end;
											TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & TBBUrw.VECode & ":" & ProjArray[PAi]] = TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & TBBUrw.VECode & ":" & ProjArray[PAi]] + TBBUrw.Sum;
											TempVect[FoundArray[FAi] & ":TOTAL:" & ProjArray[PAi]] = TempVect[FoundArray[FAi] & ":TOTAL:" & ProjArray[PAi]] + TBBUrw.Sum;
											TempVect["TOTAL:TOTAL:" & ProjArray[PAi]] = TempVect["TOTAL:TOTAL:" & ProjArray[PAi]] + TBBUrw.Sum;
										end;
									end;
								end;
							end;
						end;
					end; 
				end;
			end;
		end;
		PR2r.MotherCode = PRr.Code;
		TrHs = true;
		resetloop(PR2r);
		while (loopkey("MotherCode",PR2r,1,TrHs)) begin
			testf = true;
			if (PR2r.MotherCode!=PRr.Code) then begin
				TrHs = false;
				testf = false;
			end;
			if ((GetYear(PR2r.StartDate) & "" != RepSpec.f2) and (GetYear(PR2r.EndDate) & "" != RepSpec.f2)) then begin
				testf = false;
			end;
			if (testf) then begin
				TBBUr.PRCode = PR2r.Code;
				if (readfirstmain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
          k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
            if ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4)) then begin
              k = 1;
            end;
						kTestf = false;
						if ((RepSpec.flags[1]==1) and (k==1)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[2]==1) and (k==2)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[3]==1) and (k==3)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[4]==1) and (k==4)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[1]==1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
							kTestf = true;
						end;
            if kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode)) then begin
							if nonblank(TBBUrw.VECode) and !SupplInArr[TBBUrw.VECode] then begin
								SupplInArr[TBBUrw.VECode] = true;
								ArtSuppl[ASi] = TBBUrw.VECode;
								ASi = ASi + 1;
							end;
							for (FAi=0;FAi<FoundArray.length;FAi=FAi+1) begin
								if (setinset(FoundArray[FAi],TBBUrw.Objects)) then begin
									for (AAi=0;AAi<ArtArray.length;AAi=AAi+1) begin
										if (setinset(ArtArray[AAi],TBBUrw.Objects)) then begin
											TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & TBBUrw.VECode & ":" & PR2r.Code] = TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & TBBUrw.VECode & ":" & PR2r.Code] + TBBUrw.Sum;
											TempVect[FoundArray[FAi] & ":TOTAL:" & PR2r.Code] = TempVect[FoundArray[FAi] & ":TOTAL:" & PR2r.Code] + TBBUrw.Sum;
											TempVect["TOTAL:TOTAL:" & PR2r.Code] = TempVect["TOTAL:TOTAL:" & PR2r.Code] + TBBUrw.Sum;
										end;
									end;
								end;
							end;
						end;
					end; 
				end;
			end;
		end;
	end;
  resetcompany(oldcomp);
	for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
		ClearVector(SupplInArr);
		supcount = 0;
		totalP = 0;
		for (FAi=0;FAi<FoundArray.length;FAi=FAi+1) begin
			TVi = 0;
			total = 0;
			for (AAi=0;AAi<ArtArray.length;AAi=AAi+1) begin
				for (ASi=0;ASi<ArtSuppl.length;ASi=ASi+1) begin
					if TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & ProjArray[PAi]] != 0 then begin
						if nonblank(ArtSuppl[ASi]) and !SupplInArr[ArtSuppl[ASi]] then begin
							supcount = supcount + 1;
							SupplInArr[ArtSuppl[ASi]] = true;
						end;
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi] = "code";
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":code"] = ArtArray[AAi];
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":hn"] = ArtSuppl[ASi];
						Objr.Code = ArtSuppl[ASi];
						readfirstmain(Objr,1,true);
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":name"] = Objr.Comment;
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":fpa"] = ValToString(TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & ProjArray[PAi]],M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":fpm"] = ValToString(TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & ProjArray[PAi]]/12,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);;
						total = total + TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & ProjArray[PAi]];
						TVi = TVi + 1;
					end;
				end;
			end;
			DPi = 0;

			PRr.MotherCode = ProjArray[PAi];
			TrHs = true;
			resetloop(PRr);
			while (loopkey("MotherCode",PRr,1,TrHs)) begin
				testf = true;
				if (PRr.MotherCode!=ProjArray[PAi]) then begin
					TrHs = false;
					testf = false;
				end;
				if ((GetYear(PRr.StartDate) & "" != RepSpec.f2) and (GetYear(PRr.EndDate) & "" != RepSpec.f2)) then begin
					testf = false;
				end;
				if (testf) then begin
					firstf = true;
					totalDP = 0;
					for (AAi=0;AAi<ArtArray.length;AAi=AAi+1) begin
						for (ASi=0;ASi<ArtSuppl.length;ASi=ASi+1) begin
							if TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & PRr.Code] != 0 then begin
								if nonblank(ArtSuppl[ASi]) and !SupplInArr[ArtSuppl[ASi]] then begin
									supcount = supcount + 1;
									SupplInArr[ArtSuppl[ASi]] = true;
								end;
								if firstf then begin
									firstf = false;
									DPi = DPi + 1;
									Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi] = "clrln";
									TVi = TVi + 1;
									Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi] = "daughter" & mod(StringToInt(right(PRr.Code,1)),2);
									Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":code"] = PRr.Code;
									Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":name"] = PRr.Name;
									TVi = TVi + 1;
									if nonblank(PRr.PRMan) then begin
										Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi] = "pm";
										Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":hn"] = PRr.PRMan;
										ProjManager[PRr.Code] = PRr.PRMan;
										Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":name"] = PRr.PRManName;
										TVi = TVi + 1;
									end;
								end;
								Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi] = "code";
								Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":code"] = ArtArray[AAi];
								Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":hn"] = ArtSuppl[ASi];
								Objr.Code = ArtSuppl[ASi];
								readfirstmain(Objr,1,true);
								Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":name"] = Objr.Comment;
								Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":fpa"] = ValToString(TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & PRr.Code],M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
								totalDP = totalDP + TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & PRr.Code];
								Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":fpm"] = ValToString(TempVect[FoundArray[FAi] & ":" & ArtArray[AAi] & ":" & ArtSuppl[ASi] & ":" & PRr.Code]/12,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
								TVi = TVi + 1;
							end;
						end;
					end;
					if totalDP != 0 then begin
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi] = "total" & mod(StringToInt(right(PRr.Code,1)),2);
						Vect[ProjArray[PAi] & ":" & FoundArray[FAi] & ":" & TVi & ":total"] = ValToString(totalDP,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
						total = total + totalDP;
						TVi = TVi + 1;
					end;
				end;
			end;
			Vect[ProjArray[PAi] & ":" & FoundArray[FAi]] = ValToString(total,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
			totalP = totalP + total;
		end;
		Vect[ProjArray[PAi]] = ValToString(totalP,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
		Vect[ProjArray[PAi] & ":people"] = ValToString(supcount,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
	end;
	
	RETURN;
END;

global
procedure PrjSumRn(record RcVc RepSpec,var area areatofile, var boolean PrjFoundf)
BEGIN
	record BaseCurBlock BCb;
	record ITVc ITr;
	record ObjVc Objr;
	array string 10 ArtArray,ProjArray,ArtSuppl,FoundArray;
	vector string 255 ProjNamesVect,FoundNamesVect;
	vector string 100 Vect,ProjManager;
	vector val Total;
	integer i,j,k,Wi,PAi,FAi,Vi,prjInRow;
	val sum,sum1,sum2;
	string 100 tstr;
	array string 10 pm;
	boolean testf,lastBigRow;
	
	array string 10 sheetNames;
	array val sheetColls;
	array integer sheetCollsOutLvl;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,style1,style2,style3,style4,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;
	array string 225 mas;
  
  ArraysCollect(RepSpec,ArtArray,ProjArray,FoundArray,ProjNamesVect,FoundNamesVect,PrjFoundf);
  if (PrjFoundf) then begin
		DataCollect(ArtArray,ArtSuppl,ProjArray,FoundArray,RepSpec,Vect,ProjManager);
		prjInRow = 5;
		reportName = "PrjSumRn";
		if (windowsmode==1) then begin
			fileToSave = "tmpxlsx.xlsx";
		end else begin
			fileToSave = "/tmpxlsx.xlsx";
		end;
		deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
		BlockLoad(BCb);
		sheetNames[0] = "Project Summary";
		qtyOfSheets = 1;
		
		colnum = 0;
		sheetColls[colnum] = 5.5703125;
		colnum = colnum + 1;
		for (i=1;i<=prjInRow;i=i+1) begin
			sheetColls[colnum] = 9.28515625;
			colnum = colnum + 1;
			sheetColls[colnum] = 5.7109375;
			colnum = colnum + 1;
			sheetColls[colnum] = 8.28515625;
			colnum = colnum + 1;
			sheetColls[colnum] = 20.7109375;
			colnum = colnum + 1;
			sheetColls[colnum] = 8;
			colnum = colnum + 1;
			sheetColls[colnum] = 11.42578125;
			colnum = colnum + 1;
			if (i != prjInRow) then begin
				sheetColls[colnum] = 1.5703125;
				colnum = colnum + 1;
			end;
		end;

		colnum = 0;
		numOfUniqueSharedStrings = 0;
		numOfSharedStrings = 0;
		sheetnum = 1;
		qtyMergeCell = 0;
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
		SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
			rownum = 1;
			Wi = 0;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
				style = 34;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"People by projects and estimated fees, USD as of " & CurrentDate,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				qtyOfEmpStr = 7 * prjInRow - 2;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
				qtyMergeCell = qtyMergeCell + 1;
			EndRow(sheetnum,fileToSave,rownum);
			BeginRow(sheetnum,fileToSave,rownum,0,10);
			EndRow(sheetnum,fileToSave,rownum);	
			while (Wi <= ProjArray.length) begin
				lastBigRow = false;
				if ((ProjArray.length - mod((ProjArray.length - Wi),prjInRow))/Wi == 1) then begin
					lastBigRow = true;
					prjInRow = ProjArray.length - Wi;
				end;
				if (ProjArray.length<prjInRow) then begin
					lastBigRow = true;
					prjInRow = ProjArray.length;
				end;
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
						mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
						style = 35;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[Wi + PAi],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 36;
						qtyOfEmpStr = 4;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 37;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
						qtyMergeCell = qtyMergeCell + 1;
						colnum = colnum + 1;
					end;
					if lastBigRow then begin
						mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
						style = 35;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"XXX",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 36;
						qtyOfEmpStr = 4;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 37;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
						qtyMergeCell = qtyMergeCell + 1;
					end;
				EndRow(sheetnum,fileToSave,rownum);	
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
						mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
						style = 31;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjNamesVect[ProjArray[Wi + PAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 32;
						qtyOfEmpStr = 4;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 33;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
						qtyMergeCell = qtyMergeCell + 1;
						colnum = colnum + 1;
					end;
					if lastBigRow then begin
						mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
						style = 31;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 32;
						qtyOfEmpStr = 4;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 33;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
						qtyMergeCell = qtyMergeCell + 1;
					end;
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,35);
					for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
						style = 3;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"code",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 1;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Hansa No.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 2;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"% of allocation to project",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 3;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"name",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"fee p.m.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"fee p.a.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						colnum = colnum + 1;
					end;
					if lastBigRow then begin
						style = 3;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"code",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 1;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Hansa No.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 2;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"% of allocation to project",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 3;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"name",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"fee p.m.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"fee p.a.",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,10);
					for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
						style = 5;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						colnum = colnum + 4;
						style = 7;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						colnum = colnum + 1;
					end;
					if lastBigRow then begin
						style = 5;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						colnum = colnum + 4;
						style = 7;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
						style = 8;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 9;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjManager[ProjArray[Wi + PAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						Objr.Code = ProjManager[ProjArray[Wi + PAi]];
						readfirstmain(Objr,1,true);
						style = 10;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,Objr.Comment,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 11;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 12;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						colnum = colnum + 1;
					end;
					if lastBigRow then begin
						style = 8;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 9;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 10;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 11;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 12;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				for (FAi=0;FAi<FoundArray.length;FAi=FAi+1) begin
					colnum = 2;
					BeginRow(sheetnum,fileToSave,rownum,0,10);
						for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
							style = 5;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							colnum = colnum + 4;
							style = 13;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							colnum = colnum + 1;
						end;
						if lastBigRow then begin
							style = 5;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							colnum = colnum + 4;
							style = 13;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end;
					EndRow(sheetnum,fileToSave,rownum);
					Vi = 0;
					testf = true;
					while testf begin
						testf = false;
						for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
							if nonblank(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi]) then begin
								testf = true;
							end;
						end;
						if testf then begin
							colnum = 2;
							BeginRow(sheetnum,fileToSave,rownum,0,blankval);
								for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
									switch (Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi]) begin
										case "code":
											style = 5;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":code"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 14;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":hn"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 4;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											if ((Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":hn"] == ProjManager[ProjArray[Wi + PAi]]) and nonblank(ProjManager[ProjArray[Wi + PAi]])) or ((Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":hn"] == pm[PAi]) and nonblank(pm[PAi])) then begin
												style = 10;
											end else begin
												style = 15;
											end;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":name"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 16;
											NumericCell(sheetnum,fileToSave,colnum,rownum,style,StringToVal(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":fpm"],M4Val));
											style = 13;
											NumericCell(sheetnum,fileToSave,colnum,rownum,style,StringToVal(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":fpa"],M4Val));
											colnum = colnum + 1;
										case "daughter1":
											mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
											style = 25;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":code"] & "          " & Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":name"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 26;
											qtyOfEmpStr = 4;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 27;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
											qtyMergeCell = qtyMergeCell + 1;
											colnum = colnum + 1;
										case "daughter0":
											mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
											style = 28;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":code"] & "          " & Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":name"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 29;
											qtyOfEmpStr = 4;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 30;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
											qtyMergeCell = qtyMergeCell + 1;
											colnum = colnum + 1;
										case "pm":
											style = 8;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 9;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":hn"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											pm[PAi] = Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":hn"];
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 10;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":name"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 11;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 12;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											colnum = colnum + 1;
										case "total1":
											style = 21;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,"Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 18;
											qtyOfEmpStr = 4;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 22;
											NumericCell(sheetnum,fileToSave,colnum,rownum,style,StringToVal(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":total"],M4Val));
											colnum = colnum + 1;
										case "total0":
											style = 23;
											StringCell(sheetnum,fileToSave,colnum,rownum,style,"Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
											style = 18;
											qtyOfEmpStr = 4;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 24;
											NumericCell(sheetnum,fileToSave,colnum,rownum,style,StringToVal(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi] & ":" & Vi & ":total"],M4Val));
											colnum = colnum + 1;
										otherwise
											style = 5;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 14;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 4;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 15;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 16;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											style = 13;
											qtyOfEmpStr = 1;
											EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
											colnum = colnum + 1;
									end;
								end;
								if lastBigRow then begin
									style = 5;
									qtyOfEmpStr = 1;
									EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
									colnum = colnum + 4;
									style = 7;
									qtyOfEmpStr = 1;
									EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								end;
							EndRow(sheetnum,fileToSave,rownum);
						end;
						Vi = Vi + 1;
					end;
					colnum = 2;
					BeginRow(sheetnum,fileToSave,rownum,0,10);
						for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
							style = 5;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							colnum = colnum + 4;
							style = 13;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							colnum = colnum + 1;
						end;
						if lastBigRow then begin
							style = 5;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							colnum = colnum + 4;
							style = 13;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end;
					EndRow(sheetnum,fileToSave,rownum);
					colnum = 2;
					BeginRow(sheetnum,fileToSave,rownum,0,blankval);
						for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
							if (mod((FAi + 1),7) == 1) then begin
								style1 = 52;
								style2 = 53;
								style3 = 38;
								style4 = 39;
							end;
							if (mod((FAi + 1),7) == 2) then begin
								style1 = 64;
								style2 = 65;
								style3 = 40;
								style4 = 41;
							end;
							if (mod((FAi + 1),7) == 3) then begin
								style1 = 62;
								style2 = 63;
								style3 = 42;
								style4 = 43;
							end;
							if (mod((FAi + 1),7) == 4) then begin
								style1 = 60;
								style2 = 61;
								style3 = 44;
								style4 = 45;
							end;
							if (mod((FAi + 1),7) == 5) then begin
								style1 = 58;
								style2 = 59;
								style3 = 46;
								style4 = 47;
							end;
							if (mod((FAi + 1),7) == 6) then begin
								style1 = 54;
								style2 = 55;
								style3 = 48;
								style4 = 49;
							end;
							if (mod((FAi + 1),7) == 0) then begin
								style1 = 56;
								style2 = 57;
								style3 = 50;
								style4 = 51;
							end;
							mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
							style = style1;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,FoundNamesVect[FoundArray[FAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = style2;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
							qtyMergeCell = qtyMergeCell + 1;
							colnum = colnum + 2;
							mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
							style = style3;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,StringToVal(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi]],M4Val));
							Total[FoundArray[FAi]] = Total[FoundArray[FAi]] + StringToVal(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi]],M4Val);
							Total["total"] = Total["total"] + StringToVal(Vect[ProjArray[Wi + PAi] & ":" & FoundArray[FAi]],M4Val);
							style = style4;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
							qtyMergeCell = qtyMergeCell + 1;
							colnum = colnum + 1;
						end;
						if lastBigRow then begin
							if (mod((FAi + 1),7) == 1) then begin
								style1 = 52;
								style2 = 53;
								style3 = 38;
								style4 = 39;
							end;
							if (mod((FAi + 1),7) == 2) then begin
								style1 = 64;
								style2 = 65;
								style3 = 40;
								style4 = 41;
							end;
							if (mod((FAi + 1),7) == 3) then begin
								style1 = 62;
								style2 = 63;
								style3 = 42;
								style4 = 43;
							end;
							if (mod((FAi + 1),7) == 4) then begin
								style1 = 60;
								style2 = 61;
								style3 = 44;
								style4 = 45;
							end;
							if (mod((FAi + 1),7) == 5) then begin
								style1 = 58;
								style2 = 59;
								style3 = 46;
								style4 = 47;
							end;
							if (mod((FAi + 1),7) == 6) then begin
								style1 = 54;
								style2 = 55;
								style3 = 48;
								style4 = 49;
							end;
							if (mod((FAi + 1),7) == 0) then begin
								style1 = 56;
								style2 = 57;
								style3 = 50;
								style4 = 51;
							end;
							mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
							style = style1;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,FoundNamesVect[FoundArray[FAi]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = style2;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
							qtyMergeCell = qtyMergeCell + 1;
							colnum = colnum + 2;
							mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
							style = style3;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,Total[FoundArray[FAi]]);
							style = style4;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
							qtyMergeCell = qtyMergeCell + 1;
						end;
					EndRow(sheetnum,fileToSave,rownum);
				end;
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,10);
					for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
						style = 5;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						colnum = colnum + 4;
						style = 7;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						colnum = colnum + 1;
					end;
					if lastBigRow then begin
						style = 5;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						colnum = colnum + 4;
						style = 7;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,20);
					for (PAi=0;PAi<prjInRow;PAi=PAi+1) begin
						style = 17;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"total in project",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 18;
						qtyOfEmpStr = 2;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 19;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,StringToVal(Vect[ProjArray[Wi + PAi] & ":people"],M4Val));
						style = 18;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 20;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,StringToVal(Vect[ProjArray[Wi + PAi]],M4Val));
						colnum = colnum + 1;
					end;
					if lastBigRow then begin
						style = 17;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"grand total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 18;
						qtyOfEmpStr = 2;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 19;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,ArtSuppl.length - 1);
						style = 18;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 20;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,Total["total"]);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				rownum = rownum + 1;
				Wi = Wi + prjInRow;
				if lastBigRow then begin
					Wi = Wi + 1;
				end;
			end;
		EndSheetData(sheetnum,fileToSave);
		MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
		EndSheet(sheetnum,fileToSave,0);
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
		ConvertToXLSX(fileToSave);
		MilliSleep(2000);
		addfiletoarea(fileToSave,areatofile,false);
		delete_file(fileToSave);
	end;
	RETURN;
END;