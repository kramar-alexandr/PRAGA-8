external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer);
external procedure ConvertToXLSX(string);
external function string 10 GetStringCellNum(integer,integer);

procedure ArraysCollect(record RcVc RepSpec, var array string FoundArray, var array string ProjArray, var vector string ProjNamesVect, var vector string FoundNamesVect)
BEGIN
	record ObjVc Objr;
	record PRVc PRr;
	integer i,j,k;
	boolean TrHs,testf,foundf;
	string 100 tstr;
	
	k = 0;
	Objr.OTCode = "FOUND"; 
	TrHs=true;
	while (LoopKey("OTCode",Objr,1,TrHs)) begin
		testf = true;
		if (Objr.OTCode != "FOUND") then begin
			testf = false;
			TrHs = false;
		end;
		if (Objr.TerminateFlag == 1) then begin
			testf = false;
		end;
		if (testf) then begin
			FoundArray[k] = Objr.Code;
			FoundNamesVect[FoundArray[k]] = Objr.Comment;
			k = k + 1;
		end;
	end;
	k = 0;
	while(loopmain(PRr,1,true)) begin
		//if ((PRr.StartDate<RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sStartDate and PRr.EndDate<=RepSpec.sEndDate) or (PRr.StartDate>=RepSpec.sStartDate and PRr.StartDate<=RepSpec.sEndDate) or (PRr.StartDate<=RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sEndDate))then begin
		if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
			if blank(PRr.MotherCode) then begin
				ProjArray[k] = PRr.Code;
				ProjNamesVect[ProjArray[k]] = PRr.Name;
				k = k + 1;
			end;
		end;
	end;
	for (j=0;j<ProjArray.length-1;j=j+1) begin
		for (i=0;i<ProjArray.length-1;i=i+1) begin
			if (ProjArray[i] > ProjArray[i+1]) then begin
				tstr = ProjArray[i+1];
				ProjArray[i+1] = ProjArray[i];
				ProjArray[i] = tstr;
			end;
		end;
	end;
	RETURN;
END;

procedure DataCollect(array string FoundArray, array string ProjArray, record RcVc RepSpec,
					var vector val FPVect)
BEGIN
	record PRVc PRr,PR2r;
	record TBBUVc TBBUr;
	row TBBUVc TBBUrw;
	record TRVc TRr;
	row TRVc TRrw;
	integer i,k,j,mtrw,PAi,FAi;
	boolean TrHs,testf,kTestf;
	array string 20 prjobjs;
	
	for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
		PRr.Code = ProjArray[PAi];
		if (ReadFirstMain(PRr,1,true)) then begin
			prjobjs[PAi] = PRr.Objects;
			//if ((PRr.StartDate<RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sStartDate and PRr.EndDate<=RepSpec.sEndDate) or (PRr.StartDate>=RepSpec.sStartDate and PRr.StartDate<=RepSpec.sEndDate) or (PRr.StartDate<=RepSpec.sStartDate and nonblank(PRr.EndDate) and PRr.EndDate>=RepSpec.sEndDate))then begin
			if ((GetYear(PRr.StartDate) & "" == RepSpec.f2) or (GetYear(PRr.EndDate) & "" == RepSpec.f2)) then begin
				TBBUr.PRCode = PRr.Code;
				if (ReadFirstMain(TBBUr,1,true)) then begin
					mtrw = matrowcnt(TBBUr);
					k = 0;
					for (i=0;i<mtrw;i=i+1) begin
						matrowget(TBBUr,i,TBBUrw);
						if(TBBUrw.stp==18) then begin
							k = TBBUrw.ItemType;
						end;
						kTestf = false;
						if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
							kTestf = true;
						end;
						if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
							kTestf = true;
						end;
						if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))) then begin
							for (FAi=0;FAi<FoundArray.length;FAi=FAi+1) begin 
								if (TBBUrw.ExtraObj==FoundArray[FAi]) then begin
									FPVect[FoundArray[FAi] & ":" & ProjArray[PAi]] = FPVect[FoundArray[FAi] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
									FPVect["TOTAL:" & ProjArray[PAi]] = FPVect["TOTAL:" & ProjArray[PAi]] + TBBUrw.Sum;
									FPVect[FoundArray[FAi] & ":TOTAL"] = FPVect[FoundArray[FAi] & ":TOTAL"] + TBBUrw.Sum;
									FPVect["TOTAL:TOTAL"] = FPVect["TOTAL:TOTAL"] + TBBUrw.Sum;
								end;
							end;
						end;
					end;
				end;
			end;
			
			PR2r.MotherCode = PRr.Code;
			TrHs = true;
			while(loopkey("MotherCode",PR2r,1,TrHs)) begin
				testf = true;
				if (PR2r.MotherCode!=PRr.Code) then begin
					TrHs = false;
					testf = false;
				end;
				//if ((PR2r.StartDate<RepSpec.sStartDate and nonblank(PR2r.EndDate) and PR2r.EndDate>=RepSpec.sStartDate and PR2r.EndDate<=RepSpec.sEndDate) or (PR2r.StartDate>=RepSpec.sStartDate and PR2r.StartDate<=RepSpec.sEndDate) or (PR2r.StartDate<=RepSpec.sStartDate and nonblank(PR2r.EndDate) and PR2r.EndDate>=RepSpec.sEndDate)) then begin
				if ((GetYear(PR2r.StartDate) & "" == RepSpec.f2) or (GetYear(PR2r.EndDate) & "" == RepSpec.f2)) then begin
					testf = true;
				end else begin
					testf = false;
				end;
				if (testf) then begin
					TBBUr.PRCode = PR2r.Code;
					if (readfirstmain(TBBUr,1,true)) then begin
						mtrw = matrowcnt(TBBUr);
						k = 0;
						for (i=0;i<mtrw;i=i+1) begin
							matrowget(TBBUr,i,TBBUrw);
							if(TBBUrw.stp==18) then begin
								k = TBBUrw.ItemType;
							end;
							kTestf = false;
							if ((RepSpec.flags[1] == 1) and (k == 1)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[2] == 1) and (k == 2)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[3] == 1) and (k == 3)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[4] == 1) and (k == 4)) then begin
								kTestf = true;
							end;
							if ((RepSpec.flags[1] == 1) and ((k!= 1) and (k!= 2) and (k!= 3) and (k!= 4))) then begin
								kTestf = true;
							end;
							if (kTestf and (TBBUrw.stp==1 and TBBUrw.Sum!=0 and nonblank(TBBUrw.ArtCode))) then begin
								for (FAi=0;FAi<FoundArray.length;FAi=FAi+1) begin
									if (TBBUrw.ExtraObj==FoundArray[FAi]) then begin
										FPVect[FoundArray[FAi] & ":" & ProjArray[PAi]] = FPVect[FoundArray[FAi] & ":" & ProjArray[PAi]] + TBBUrw.Sum;
										FPVect["TOTAL:" & ProjArray[PAi]] = FPVect["TOTAL:" & ProjArray[PAi]] + TBBUrw.Sum;
										FPVect[FoundArray[FAi] & ":TOTAL"] = FPVect[FoundArray[FAi] & ":TOTAL"] + TBBUrw.Sum;
										FPVect["TOTAL:TOTAL"] = FPVect["TOTAL:TOTAL"] + TBBUrw.Sum;
									end;
								end;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	TRr.TransDate = RepSpec.sStartDate;
	TrHs = true;
	while (loopkey("TransDate",TRr,1,TrHs)) begin
		if (TRr.TransDate > RepSpec.sEndDate) then begin
			TrHs = false;
		end;
		if (TrHs) then begin
			mtrw = matrowcnt(TRr);
			for (i=0;i<mtrw;i=i+1) begin
				matrowget(TRr,i,TRrw);
				if ((TRrw.ovst == 0) and ((mid(TRrw.AccNumber,0,1)=="5")) and (setinset(RepSpec.ObjStr,TRrw.Objects) or blank(RepSpec.ObjStr))) then begin
					for (FAi=0;FAi<FoundArray.length;FAi=FAi+1) begin
						if setinset(FoundArray[FAi],TRrw.Objects) then begin
							for (PAi=0;PAi<ProjArray.length;PAi=PAi+1) begin
								if setinset(prjobjs[PAi],TRrw.Objects) then begin
									FPVect["Fact:" & FoundArray[FAi] & ":" & ProjArray[PAi]] = FPVect["Fact:" & FoundArray[FAi] & ":" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
									FPVect["Fact:TOTAL:" & ProjArray[PAi]] = FPVect["Fact:TOTAL:" & ProjArray[PAi]] - TRrw.CredVal + TRrw.DebVal;
									FPVect["Fact:" & FoundArray[FAi] & ":TOTAL"] = FPVect["Fact:" & FoundArray[FAi] & ":TOTAL"] - TRrw.CredVal + TRrw.DebVal;
									FPVect["Fact:TOTAL:TOTAL"] = FPVect["Fact:TOTAL:TOTAL"] - TRrw.CredVal + TRrw.DebVal;
								end;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	
	for (i=0;i<ProjArray.length;i=i+1) begin
		FPVect[		"TOTALproc:" & ProjArray[i]] = FPVect[     "TOTAL:" & ProjArray[i]]/FPVect[     "TOTAL:TOTAL"]*100;
		FPVect["Fact:TOTALproc:" & ProjArray[i]] = FPVect["Fact:TOTAL:" & ProjArray[i]]/FPVect["Fact:TOTAL:TOTAL"]*100;
		FPVect[		"TOTALproc:TOTALproc"] = FPVect[	 "TOTALproc:TOTALproc"] + FPVect[	  "TOTALproc:" & ProjArray[i]];
		FPVect["Fact:TOTALproc:TOTALproc"] = FPVect["Fact:TOTALproc:TOTALproc"] + FPVect["Fact:TOTALproc:" & ProjArray[i]];
	end;
	RETURN;
END;

global
procedure BudgetTotalRn(record RcVc RepSpec,var area areatofile)
BEGIN
	array string 255 FoundArray,ProjArray;
	vector string 255 ProjNamesVect,FoundNamesVect;
	integer i,j,k,prjInRow;
	vector val FPVect;
	boolean lastBigRow;
	
	array string 10 sheetNames;
	array val sheetColls;
	array integer sheetCollsOutLvl;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 16 reportName;

	ArraysCollect(RepSpec,FoundArray,ProjArray,ProjNamesVect,FoundNamesVect);
	DataCollect(FoundArray,ProjArray,RepSpec,FPVect);
	reportName = "BudgetTotalRn";
	if (windowsmode==1) then begin
		fileToSave = "tmpxlsx.xlsx";
	end else begin
		fileToSave = "/tmpxlsx.xlsx";
	end;
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
	sheetNames[0] = "Total " & DateToString(RepSpec.sStartDate,"DD.MM.YYYY") & "-" & DateToString(RepSpec.sEndDate,"DD.MM.YYYY");
	qtyOfSheets = 1;
	colnum = 0;
	rownum = 0;
	numOfUniqueSharedStrings = 0;
	numOfSharedStrings = 0;
	sheetnum = 1;
	qtyMergeCell = 0;
	if (RepSpec.flags[5] == 0) then begin
		sheetColls[colnum] = 22.7109375;
		sheetCollsOutLvl[colnum] = 0;
		colnum = colnum + 1;
		for (j=0;j<(ProjArray.length + 1);j=j+1) begin
			sheetColls[colnum] = 14.5703125;
			sheetCollsOutLvl[colnum] = 0;
			colnum = colnum + 1;
			sheetColls[colnum] = 14.5703125;
			sheetCollsOutLvl[colnum] = 1;
			colnum = colnum + 1;
			sheetColls[colnum] = 14.5703125;
			sheetCollsOutLvl[colnum] = 1;
			colnum = colnum + 1;
			sheetColls[colnum] = 14.5703125;
			sheetCollsOutLvl[colnum] = 1;
			colnum = colnum + 1;
		end;
		colnum = 0;
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
		SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
			rownum = 2;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
				style = 24;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 25;
				qtyOfEmpStr = (ProjArray.length + 1)*4 - 2;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 26;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
				qtyMergeCell = qtyMergeCell + 1;
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,30);
				for (i=0;i<ProjArray.length;i=i+1) begin
					mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
					style = 21;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i] & " - " & ProjNamesVect[ProjArray[i]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 22;
					qtyOfEmpStr = 2;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					style = 23;
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
					qtyMergeCell = qtyMergeCell + 1;
				end;
				mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
				style = 18;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 19;
				qtyOfEmpStr = 2;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 20;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
				qtyMergeCell = qtyMergeCell + 1;
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				for (i=0;i<ProjArray.length;i=i+1) begin
					style = 12;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 13;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 14;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 16;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				end;
				style = 17;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 15;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 14;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 16;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			EndRow(sheetnum,fileToSave,rownum);
			rownum = rownum + 1;
			for (i=0;i<FoundArray.length;i=i+1) begin
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					style = 1;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,FoundNamesVect[FoundArray[i]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					for (j=0;j<ProjArray.length;j=j+1) begin
						style = 2;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect[FoundArray[i] & ":" & ProjArray[j]]);
						style = 3;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[i] & ":" & ProjArray[j]]);
						style = 4;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[i] & ":" & ProjArray[j]] - FPVect[FoundArray[i] & ":" & ProjArray[j]]);
						style = 5;
						if (FPVect[FoundArray[i] & ":" & ProjArray[j]] == 0) then begin
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						end else begin
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(FPVect["Fact:" & FoundArray[i] & ":" & ProjArray[j]] - FPVect[FoundArray[i] & ":" & ProjArray[j]])/FPVect[FoundArray[i] & ":" & ProjArray[j]]);
						end;
					end;
					style = 6;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect[FoundArray[i] & ":TOTAL"]);
					style = 7;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[i] & ":TOTAL"]);
					style = 4;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[i] & ":TOTAL"] - FPVect[FoundArray[i] & ":TOTAL"]);
					style = 5;
					if (FPVect[FoundArray[i] & ":TOTAL"] == 0) then begin
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					end else begin
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(FPVect["Fact:" & FoundArray[i] & ":TOTAL"] - FPVect[FoundArray[i] & ":TOTAL"])/FPVect[FoundArray[i] & ":TOTAL"]);
					end;
				EndRow(sheetnum,fileToSave,rownum);
			end;
			rownum = rownum + 1;
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 1;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"sub tot",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				for (i=0;i<ProjArray.length;i=i+1) begin
					style = 10;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTAL:" & ProjArray[i]]);
					style = 11;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTAL:" & ProjArray[i]]);
					colnum = colnum + 2;
				end;
				style = 8;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTAL:TOTAL"]);
				style = 9;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTAL:TOTAL"]);
			EndRow(sheetnum,fileToSave,rownum);
			colnum = 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				style = 1;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"sub tot %",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				for (i=0;i<ProjArray.length;i=i+1) begin
					style = 10;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTALproc:" & ProjArray[i]]);
					style = 11;
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTALproc:" & ProjArray[i]]);
					colnum = colnum + 2;
				end;
				style = 8;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTALproc:TOTALproc"]);
				style = 9;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTALproc:TOTALproc"]);
			EndRow(sheetnum,fileToSave,rownum);
		EndSheetData(sheetnum,fileToSave);
		MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
		EndSheet(sheetnum,fileToSave,0);
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		ConvertToXLSX(fileToSave);
	end else begin
		prjInRow = 6;
		sheetColls[colnum] = 15.7109375;
		colnum = colnum + 1;
		for (i=0;i<prjInRow;i=i+1) begin
			sheetColls[colnum] = 12.7109375;
			colnum = colnum + 1;
			sheetColls[colnum] = 12.7109375;
			colnum = colnum + 1;
			sheetColls[colnum] = 10.42578125;
			colnum = colnum + 1;
			sheetColls[colnum] = 6;
			colnum = colnum + 1;
		end;
		XmlXlsxWorkBegin(fileToSave,reportName);
		CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
		SetSheetsCols(sheetnum,sheetColls,sheetCollsOutLvl,fileToSave);
		BeginSheetData(sheetnum,fileToSave);
			rownum = 2;
			i = 0;
			while (i <= ProjArray.length) begin
				lastBigRow = false;
				if ((ProjArray.length - mod((ProjArray.length - i),prjInRow))/i == 1) then begin
					lastBigRow = true;
					prjInRow = ProjArray.length - i;
				end;
				if (ProjArray.length<prjInRow) then begin
					lastBigRow = true;
					prjInRow = ProjArray.length;
				end;
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
					style = 24;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"TOTAL",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					style = 25;
					for (k=0;k<prjInRow;k=k+1) begin
						if k == prjInRow - 1 then begin
							qtyOfEmpStr = 2;
						end else begin
							qtyOfEmpStr = 4;
						end;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					end;
					if lastBigRow then begin
						qtyOfEmpStr = 4;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					end;
					style = 26;
					qtyOfEmpStr = 1;
					EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
					mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
					qtyMergeCell = qtyMergeCell + 1;
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,30);
					for (k=0;k<prjInRow;k=k+1) begin
						mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
						style = 21;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,ProjArray[i + k] & " - " & ProjNamesVect[ProjArray[i + k]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 22;
						qtyOfEmpStr = 2;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 23;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
						qtyMergeCell = qtyMergeCell + 1;
					end;
					if lastBigRow then begin
						mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum);
						style = 18;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Grand Total",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 19;
						qtyOfEmpStr = 2;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						style = 20;
						qtyOfEmpStr = 1;
						EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
						mergeCell[qtyMergeCell] = mergeCell[qtyMergeCell] & ":" & GetStringCellNum(colnum-1,rownum);
						qtyMergeCell = qtyMergeCell + 1;
					end;
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 2;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					for (k=0;k<prjInRow;k=k+1) begin
						style = 12;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 13;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 14;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 16;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					end;
					if lastBigRow then begin
						style = 17;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Plan",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 15;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Fact",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 14;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"Overrun",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						style = 16;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,"%",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				rownum = rownum + 1;
				for (j=0;j<FoundArray.length;j=j+1) begin
					colnum = 1;
					BeginRow(sheetnum,fileToSave,rownum,0,blankval);
						style = 1;
						StringCell(sheetnum,fileToSave,colnum,rownum,style,FoundNamesVect[FoundArray[j]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						for (k=0;k<prjInRow;k=k+1) begin
							style = 2;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect[FoundArray[j] & ":" & ProjArray[i + k]]);
							style = 3;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[j] & ":" & ProjArray[i + k]]);
							style = 4;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[j] & ":" & ProjArray[i + k]] - FPVect[FoundArray[j] & ":" & ProjArray[i + k]]);
							style = 5;
							if (FPVect[FoundArray[j] & ":" & ProjArray[i + k]] == 0) then begin
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end else begin
								NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(FPVect["Fact:" & FoundArray[j] & ":" & ProjArray[i + k]] - FPVect[FoundArray[j] & ":" & ProjArray[i + k]])/FPVect[FoundArray[j] & ":" & ProjArray[i + k]]);
							end;
						end;
						if lastBigRow then begin
							style = 6;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect[FoundArray[j] & ":TOTAL"]);
							style = 7;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[j] & ":TOTAL"]);
							style = 4;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:" & FoundArray[j] & ":TOTAL"] - FPVect[FoundArray[j] & ":TOTAL"]);
							style = 5;
							if (FPVect[FoundArray[j] & ":TOTAL"] == 0) then begin
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end else begin
								NumericCell(sheetnum,fileToSave,colnum,rownum,style,100*(FPVect["Fact:" & FoundArray[j] & ":TOTAL"] - FPVect[FoundArray[j] & ":TOTAL"])/FPVect[FoundArray[j] & ":TOTAL"]);
							end;
						end;
					EndRow(sheetnum,fileToSave,rownum);
				end;
				rownum = rownum + 1;
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					style = 1;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"sub tot",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					for (k=0;k<prjInRow;k=k+1) begin
						style = 10;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTAL:" & ProjArray[i + k]]);
						style = 11;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTAL:" & ProjArray[i + k]]);
						colnum = colnum + 2;
					end;
					if lastBigRow then begin
						style = 8;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTAL:TOTAL"]);
						style = 9;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTAL:TOTAL"]);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				colnum = 1;
				BeginRow(sheetnum,fileToSave,rownum,0,blankval);
					style = 1;
					StringCell(sheetnum,fileToSave,colnum,rownum,style,"sub tot %",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
					for (k=0;k<prjInRow;k=k+1) begin
						style = 10;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTALproc:" & ProjArray[i + k]]);
						style = 11;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTALproc:" & ProjArray[i + k]]);
						colnum = colnum + 2;
					end;
					if lastBigRow then begin
						style = 8;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["TOTALproc:TOTALproc"]);
						style = 9;
						NumericCell(sheetnum,fileToSave,colnum,rownum,style,FPVect["Fact:TOTALproc:TOTALproc"]);
					end;
				EndRow(sheetnum,fileToSave,rownum);
				rownum = rownum + 2;
				
				i = i + prjInRow;
				if lastBigRow then begin
					i = i + 1;
				end;
			end;
		EndSheetData(sheetnum,fileToSave);
		MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
		EndSheet(sheetnum,fileToSave,0);
		FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		ConvertToXLSX(fileToSave);
	end;
	MilliSleep(2000);
	addfiletoarea(fileToSave,areatofile,false);
	delete_file(fileToSave);
	RETURN;
END;